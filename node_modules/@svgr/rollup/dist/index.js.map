{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import * as fs from 'fs'\nimport { transform, Config } from '@svgr/core'\nimport { createFilter, CreateFilter } from 'rollup-pluginutils'\nimport { transformAsync, createConfigItem } from '@babel/core'\nimport svgo from '@svgr/plugin-svgo'\nimport jsx from '@svgr/plugin-jsx'\n// @ts-ignore\nimport presetReact from '@babel/preset-react'\n// @ts-ignore\nimport presetEnv from '@babel/preset-env'\n// @ts-ignore\nimport presetTS from '@babel/preset-typescript'\n// @ts-ignore\nimport pluginTransformReactConstantElements from '@babel/plugin-transform-react-constant-elements'\nimport type { PluginImpl } from 'rollup'\n\nconst babelOptions = {\n  babelrc: false,\n  configFile: false,\n  presets: [\n    createConfigItem(presetReact, { type: 'preset' }),\n    createConfigItem([presetEnv, { modules: false }], { type: 'preset' }),\n  ],\n  plugins: [createConfigItem(pluginTransformReactConstantElements)],\n}\n\nconst typeScriptBabelOptions = {\n  ...babelOptions,\n  presets: [\n    ...babelOptions.presets,\n    createConfigItem(\n      [presetTS, { allowNamespaces: true, allExtensions: true, isTSX: true }],\n      { type: 'preset' },\n    ),\n  ],\n}\nexport interface Options extends Config {\n  include?: Parameters<CreateFilter>[0]\n  exclude?: Parameters<CreateFilter>[1]\n  babel?: boolean\n}\n\nconst plugin: PluginImpl<Options> = (options = {}) => {\n  const EXPORT_REGEX = /(module\\.exports *= *|export default)/\n  const filter = createFilter(options.include || '**/*.svg', options.exclude)\n  const { babel = true } = options\n\n  return {\n    name: 'svgr',\n    async transform(data, id) {\n      if (!filter(id)) return null\n      if (id.slice(-4) !== '.svg') return null\n\n      const load = fs.readFileSync(id, 'utf8')\n\n      const previousExport = EXPORT_REGEX.test(data) ? data : null\n\n      const jsCode = await transform(load, options, {\n        filePath: id,\n        caller: {\n          name: '@svgr/rollup',\n          previousExport,\n          defaultPlugins: [svgo, jsx],\n        },\n      })\n\n      if (babel) {\n        const result = await transformAsync(\n          jsCode,\n          options.typescript ? typeScriptBabelOptions : babelOptions,\n        )\n        if (!result?.code) {\n          throw new Error(`Error while transforming using Babel`)\n        }\n        return { code: result.code, map: null }\n      }\n\n      return {\n        ast: {\n          type: 'Program',\n          start: 0,\n          end: 0,\n          sourceType: 'module',\n          body: [],\n        },\n        code: jsCode,\n        map: null\n      }\n    },\n  }\n}\n\nexport default plugin\n"],"names":["createConfigItem","presetReact","presetEnv","pluginTransformReactConstantElements","presetTS","createFilter","fs","transform","svgo","jsx","transformAsync"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,MAAM,eAAe;AAAA,EACnB,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,SAAS;AAAA,IACPA,sBAAiBC,iCAAa,EAAE,MAAM;AAAA,IACtCD,sBAAiB,CAACE,+BAAW,EAAE,SAAS,UAAU,EAAE,MAAM;AAAA;AAAA,EAE5D,SAAS,CAACF,sBAAiBG;AAAA;AAG7B,MAAM,yBAAyB,iCAC1B,eAD0B;AAAA,EAE7B,SAAS;AAAA,IACP,GAAG,aAAa;AAAA,IAChBH,sBACE,CAACI,8BAAU,EAAE,iBAAiB,MAAM,eAAe,MAAM,OAAO,SAChE,EAAE,MAAM;AAAA;AAAA;MAUR,SAA8B,CAAC,UAAU,OAAO;AACpD,QAAM,eAAe;AACrB,QAAM,SAASC,+BAAa,QAAQ,WAAW,YAAY,QAAQ;AACnE,QAAM,EAAE,QAAQ,SAAS;AAEzB,SAAO;AAAA,IACL,MAAM;AAAA,UACA,UAAU,MAAM,IAAI;AACxB,UAAI,CAAC,OAAO;AAAK,eAAO;AACxB,UAAI,GAAG,MAAM,QAAQ;AAAQ,eAAO;AAEpC,YAAM,OAAOC,cAAG,aAAa,IAAI;AAEjC,YAAM,iBAAiB,aAAa,KAAK,QAAQ,OAAO;AAExD,YAAM,SAAS,MAAMC,iBAAU,MAAM,SAAS;AAAA,QAC5C,UAAU;AAAA,QACV,QAAQ;AAAA,UACN,MAAM;AAAA,UACN;AAAA,UACA,gBAAgB,CAACC,0BAAMC;AAAA;AAAA;AAI3B,UAAI,OAAO;AACT,cAAM,SAAS,MAAMC,oBACnB,QACA,QAAQ,aAAa,yBAAyB;AAEhD,YAAI,mCAAS,OAAM;AACjB,gBAAM,IAAI,MAAM;AAAA;AAElB,eAAO,EAAE,MAAM,OAAO,MAAM,KAAK;AAAA;AAGnC,aAAO;AAAA,QACL,KAAK;AAAA,UACH,MAAM;AAAA,UACN,OAAO;AAAA,UACP,KAAK;AAAA,UACL,YAAY;AAAA,UACZ,MAAM;AAAA;AAAA,QAER,MAAM;AAAA,QACN,KAAK;AAAA;AAAA;AAAA;AAAA;;;;"}