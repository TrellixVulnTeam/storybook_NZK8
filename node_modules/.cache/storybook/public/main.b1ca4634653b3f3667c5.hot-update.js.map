{"version":3,"file":"main.b1ca4634653b3f3667c5.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0BA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAsCA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAPA;AAUA;AAAA;AAXA;AAeA;AAAA;AAUA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AANA;AAYA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAnBA;AAyBA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAOA;AAGA;AACA;AACA;AACA;AAJA;AAaA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AA1BA;AAgCA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAXA;AAkBA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAFA;AAYA","sources":["webpack://@zendeskgarden/react-components/./packages/chrome/demo/stories/ChromeStory.tsx"],"sourcesContent":["/**\r\n * Copyright Zendesk, Inc.\r\n *\r\n * Use of this source code is governed under the Apache License, Version 2.0\r\n * found at http://www.apache.org/licenses/LICENSE-2.0.\r\n */\r\n\r\nimport React, { MouseEventHandler, ReactElement, useState } from 'react';\r\nimport { Story } from '@storybook/react';\r\nimport ChatIcon from '@zendeskgarden/svg-icons/src/26/relationshape-chat.svg';\r\nimport ConnectIcon from '@zendeskgarden/svg-icons/src/26/relationshape-connect.svg';\r\nimport ExploreIcon from '@zendeskgarden/svg-icons/src/26/relationshape-explore.svg';\r\nimport GuideIcon from '@zendeskgarden/svg-icons/src/26/relationshape-guide.svg';\r\nimport MessageIcon from '@zendeskgarden/svg-icons/src/26/relationshape-message.svg';\r\nimport SupportIcon from '@zendeskgarden/svg-icons/src/26/relationshape-support.svg';\r\nimport TalkIcon from '@zendeskgarden/svg-icons/src/26/relationshape-talk.svg';\r\nimport ProductIcon from '@zendeskgarden/svg-icons/src/26/garden.svg';\r\nimport BrandmarkIcon from '@zendeskgarden/svg-icons/src/26/zendesk.svg';\r\nimport NavIcon from '@zendeskgarden/svg-icons/src/26/app.svg';\r\nimport NavIcon1 from '@zendeskgarden/svg-icons/src/26/home-fill.svg';\r\nimport NavIcon2 from '@zendeskgarden/svg-icons/src/26/email-fill.svg';\r\nimport NavIcon3 from '@zendeskgarden/svg-icons/src/26/customer-lists-fill.svg';\r\nimport NavIcon4 from '@zendeskgarden/svg-icons/src/26/chat.svg';\r\nimport NavIcon5 from '@zendeskgarden/svg-icons/src/26/dashboard.svg';\r\nimport NavIcon6 from '@zendeskgarden/svg-icons/src/26/settings-fill.svg';\r\nimport HeaderIcon from '@zendeskgarden/svg-icons/src/16/box-3d-stroke.svg';\r\nimport HeaderIcon1 from '@zendeskgarden/svg-icons/src/16/search-stroke.svg';\r\nimport HeaderIcon2 from '@zendeskgarden/svg-icons/src/16/lifesaver-stroke.svg';\r\nimport HeaderIcon3 from '@zendeskgarden/svg-icons/src/16/grid-2x2-stroke.svg';\r\nimport { HeaderIcon4 } from './user-solo';\r\nimport { DEFAULT_THEME } from '@zendeskgarden/react-theming';\r\nimport {\r\n  Body,\r\n  Chrome,\r\n  CollapsibleSubNavItem,\r\n  Content,\r\n  Footer,\r\n  FooterItem,\r\n  Header,\r\n  HeaderItem,\r\n  HeaderItemIcon,\r\n  HeaderItemText,\r\n  HeaderItemWrapper,\r\n  IChromeProps,\r\n  INavItemProps,\r\n  Main,\r\n  Nav,\r\n  NavItem,\r\n  NavItemIcon,\r\n  NavItemText,\r\n  PRODUCT,\r\n  Sidebar,\r\n  SkipNav,\r\n  SubNav,\r\n  SubNavItem,\r\n  SubNavItemText\r\n} from '@zendeskgarden/react-chrome';\r\nimport { Button } from '@zendeskgarden/react-buttons';\r\nimport { IFooterItem, IHeaderItem, INavItem, ISubNavItem } from './types';\r\nimport { SheetComponent } from './SheetStory';\r\n\r\nconst HEADER_ICONS = [\r\n  <HeaderIcon1 key={1} />,\r\n  <HeaderIcon2 key={2} />,\r\n  <HeaderIcon3 key={3} />,\r\n  <HeaderIcon4 key={4} />\r\n];\r\n\r\nconst NAV_ICONS = [\r\n  <NavIcon1 key={1} />,\r\n  <NavIcon2 key={2} />,\r\n  <NavIcon3 key={3} />,\r\n  <NavIcon4 key={4} />,\r\n  <NavIcon5 key={5} />,\r\n  <NavIcon6 key={6} />\r\n];\r\n\r\nconst PRODUCT_ICONS: Record<PRODUCT, ReactElement<SVGElement>> = {\r\n  chat: <ChatIcon />,\r\n  connect: <ConnectIcon />,\r\n  explore: <ExploreIcon />,\r\n  guide: <GuideIcon />,\r\n  message: <MessageIcon />,\r\n  support: <SupportIcon />,\r\n  talk: <TalkIcon />\r\n};\r\n\r\ninterface IArgs extends IChromeProps {\r\n  product: INavItemProps['product'];\r\n  skipNav: string;\r\n  hasNav: boolean;\r\n  navItems: INavItem[];\r\n  onNavClick: ({ hasSubNav, hasSidebar }: Record<string, boolean | undefined>) => void;\r\n  hasLogo: boolean;\r\n  hasBrandmark: boolean;\r\n  hasSubNav: boolean;\r\n  subNavItems: ISubNavItem[];\r\n  subNavMaxWidth: number;\r\n  hasHeader: boolean;\r\n  headerItems: IHeaderItem[];\r\n  hasSidebar: boolean;\r\n  hasFooter: boolean;\r\n  footerItems: IFooterItem[];\r\n  isExpanded: boolean;\r\n  isWrapped: boolean;\r\n  sidebar: string;\r\n  main: string;\r\n  isSheetOpen: boolean;\r\n  isSheetCompact: boolean;\r\n  sheetBody: string;\r\n  sheetTitle: string;\r\n  sheetDescription: string;\r\n  onSheetClick: MouseEventHandler<HTMLButtonElement>;\r\n}\r\n\r\nexport const ChromeStory: Story<IArgs> = ({\r\n  product,\r\n  skipNav,\r\n  hasNav,\r\n  navItems,\r\n  onNavClick,\r\n  hasLogo,\r\n  hasBrandmark,\r\n  hasSubNav,\r\n  subNavItems,\r\n  subNavMaxWidth,\r\n  hasHeader,\r\n  headerItems,\r\n  hasSidebar,\r\n  hasFooter,\r\n  footerItems,\r\n  isExpanded,\r\n  isWrapped,\r\n  sidebar,\r\n  main,\r\n  isSheetOpen,\r\n  isSheetCompact,\r\n  sheetBody,\r\n  sheetTitle,\r\n  sheetDescription,\r\n  onSheetClick,\r\n  ...args\r\n}) => {\r\n  const [currentNav, setCurrentNav] = useState(0);\r\n  const [currentSubNav, setCurrentSubNav] = useState(0);\r\n\r\n  return (\r\n    <Chrome {...args} style={{ margin: `-${DEFAULT_THEME.space.xl}` }}>\r\n      <SkipNav targetId=\"main-content\">{skipNav}</SkipNav>\r\n      {hasNav && (\r\n        <Nav isExpanded={isExpanded} aria-label=\"Nav\">\r\n          {hasLogo && (\r\n            <NavItem hasLogo product={product}>\r\n              <NavItemIcon>{product ? PRODUCT_ICONS[product] : <ProductIcon />}</NavItemIcon>\r\n              <NavItemText>Nav Logo</NavItemText>\r\n            </NavItem>\r\n          )}\r\n          {navItems.map((item, index) => (\r\n            <NavItem\r\n              key={index}\r\n              isCurrent={currentNav === index}\r\n              onClick={() => {\r\n                setCurrentNav(index);\r\n                setCurrentSubNav(0);\r\n                onNavClick({ hasSubNav: item.hasSubNav, hasSidebar: item.hasSidebar });\r\n              }}\r\n            >\r\n              <NavItemIcon>{NAV_ICONS[index] || <NavIcon />}</NavItemIcon>\r\n              <NavItemText isWrapped={isWrapped}>{item.text}</NavItemText>\r\n            </NavItem>\r\n          ))}\r\n          {hasBrandmark && (\r\n            <NavItem hasBrandmark>\r\n              <NavItemIcon>\r\n                <BrandmarkIcon />\r\n              </NavItemIcon>\r\n              <NavItemText>Brandmark</NavItemText>\r\n            </NavItem>\r\n          )}\r\n        </Nav>\r\n      )}\r\n      {hasSubNav && (\r\n        <SubNav style={{ maxWidth: subNavMaxWidth }}>\r\n          {subNavItems.map((item, index) =>\r\n            item.items ? (\r\n              <CollapsibleSubNavItem key={index} header={item.text}>\r\n                {item.items.map((subItem, subIndex) => (\r\n                  <SubNavItem\r\n                    key={subIndex}\r\n                    isCurrent={currentSubNav === parseFloat(`${index}.${subIndex}`)}\r\n                    onClick={() => setCurrentSubNav(parseFloat(`${index}.${subIndex}`))}\r\n                  >\r\n                    <SubNavItemText isWrapped={isWrapped}>{subItem}</SubNavItemText>\r\n                  </SubNavItem>\r\n                ))}\r\n              </CollapsibleSubNavItem>\r\n            ) : (\r\n              <SubNavItem\r\n                key={index}\r\n                isCurrent={currentSubNav === index}\r\n                onClick={() => setCurrentSubNav(index)}\r\n              >\r\n                <SubNavItemText isWrapped={isWrapped}>{item.text}</SubNavItemText>\r\n              </SubNavItem>\r\n            )\r\n          )}\r\n        </SubNav>\r\n      )}\r\n      <Body hasFooter={hasFooter}>\r\n        {hasHeader && (\r\n          <Header isStandalone={!(hasNav || hasSubNav)}>\r\n            {hasLogo && (\r\n              <HeaderItem hasLogo product={product}>\r\n                <HeaderItemIcon>\r\n                  <SupportIcon />\r\n                </HeaderItemIcon>\r\n                <HeaderItemText>Header Logo</HeaderItemText>\r\n              </HeaderItem>\r\n            )}\r\n            {headerItems.map((item, index) =>\r\n              item.isWrapper ? (\r\n                <HeaderItemWrapper\r\n                  key={index}\r\n                  maxX={item.maxX}\r\n                  maxY={item.maxY}\r\n                  isRound={item.isRound}\r\n                >\r\n                  {item.hasIcon && (\r\n                    <HeaderItemIcon>\r\n                      {HEADER_ICONS[HEADER_ICONS.length - headerItems.length + index] || (\r\n                        <HeaderIcon />\r\n                      )}\r\n                    </HeaderItemIcon>\r\n                  )}\r\n                  <HeaderItemText isClipped={item.isClipped}>{item.text}</HeaderItemText>\r\n                </HeaderItemWrapper>\r\n              ) : (\r\n                <HeaderItem key={index} maxX={item.maxX} maxY={item.maxY} isRound={item.isRound}>\r\n                  {item.hasIcon && (\r\n                    <HeaderItemIcon>\r\n                      {HEADER_ICONS[HEADER_ICONS.length - headerItems.length + index] || (\r\n                        <HeaderIcon />\r\n                      )}\r\n                    </HeaderItemIcon>\r\n                  )}\r\n                  <HeaderItemText isClipped={item.isClipped}>{item.text}</HeaderItemText>\r\n                </HeaderItem>\r\n              )\r\n            )}\r\n          </Header>\r\n        )}\r\n        <Content id=\"main-content\">\r\n          {hasSidebar && <Sidebar>{sidebar}</Sidebar>}\r\n          <Main>{main}</Main>\r\n          <SheetComponent\r\n            hasHeader\r\n            hasBody\r\n            hasFooter\r\n            hasClose\r\n            isOpen={isSheetOpen}\r\n            isCompact={isSheetCompact}\r\n            title={sheetTitle}\r\n            description={sheetDescription}\r\n            body={sheetBody}\r\n            footerItems={[{ text: 'Close', type: hasFooter ? undefined : 'primary' }]}\r\n            onClick={onSheetClick}\r\n            {...args}\r\n          />\r\n        </Content>\r\n        {hasFooter && (\r\n          <Footer>\r\n            {footerItems &&\r\n              footerItems.map(({ text, type }, index) => (\r\n                <FooterItem key={index}>\r\n                  <Button isBasic={type === 'basic'} isPrimary={type === 'primary'}>\r\n                    {text}\r\n                  </Button>\r\n                </FooterItem>\r\n              ))}\r\n          </Footer>\r\n        )}\r\n      </Body>\r\n    </Chrome>\r\n  );\r\n};\r\n"],"names":[],"sourceRoot":""}