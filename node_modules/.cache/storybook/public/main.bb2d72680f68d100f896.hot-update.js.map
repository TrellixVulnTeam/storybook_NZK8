{"version":3,"file":"main.bb2d72680f68d100f896.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;;AAEA;AAIA;AACA;AACA;;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAGA;AAKA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;;AASA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAGA;;AACA;AACA;AAdA;AAkBA;AACA;AACA;AAHA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAnDA;AA4DA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA","sources":["webpack://@zendeskgarden/react-components/./packages/dropdowns/src/elements/Select/Select.tsx"],"sourcesContent":["/**\r\n * Copyright Zendesk, Inc.\r\n *\r\n * Use of this source code is governed under the Apache License, Version 2.0\r\n * found at http://www.apache.org/licenses/LICENSE-2.0.\r\n */\r\n\r\nimport React, { useRef, useState, useEffect, useCallback, HTMLAttributes } from 'react';\r\nimport { composeEventHandlers, KEY_CODES } from '@zendeskgarden/container-utilities';\r\nimport Chevron from '@zendeskgarden/svg-icons/src/16/chevron-down-stroke.svg';\r\nimport PropTypes from 'prop-types';\r\nimport { Reference } from 'react-popper';\r\nimport mergeRefs from 'react-merge-refs';\r\nimport { StyledFauxInput, StyledInput, StyledSelect } from '../../styled';\r\nimport { VALIDATION } from '../../utils/validation';\r\nimport useDropdownContext from '../../utils/useDropdownContext';\r\nimport useFieldContext from '../../utils/useFieldContext';\r\n\r\nexport interface ISelectProps extends HTMLAttributes<HTMLDivElement> {\r\n  /** Applies compact styling */\r\n  isCompact?: boolean;\r\n  /** Removes borders and padding */\r\n  isBare?: boolean;\r\n  /** Indicates that the element is not interactive */\r\n  disabled?: boolean;\r\n  /** Applies inset `box-shadow` styling on focus */\r\n  focusInset?: boolean;\r\n  /** Defines the element's validation state */\r\n  validation?: VALIDATION;\r\n  /** Defines the icon rendered before the element's content */\r\n  start?: any;\r\n}\r\n\r\n/**\r\n * Applies state and a11y attributes to its children. Must be nested within a `<Field>` component.\r\n *\r\n * @extends HTMLAttributes<HTMLDivElement>\r\n */\r\nexport const Select = React.forwardRef<HTMLDivElement, ISelectProps>(\r\n  ({ children, start, ...props }, ref) => {\r\n    const {\r\n      popperReferenceElementRef,\r\n      itemSearchRegistry,\r\n      downshift: {\r\n        getToggleButtonProps,\r\n        getInputProps,\r\n        isOpen,\r\n        highlightedIndex,\r\n        setHighlightedIndex,\r\n        selectItemAtIndex,\r\n        closeMenu\r\n      }\r\n    } = useDropdownContext();\r\n    const { isLabelHovered } = useFieldContext();\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const hiddenInputRef = useRef<HTMLInputElement>();\r\n    const triggerRef = useRef<HTMLDivElement>();\r\n    const previousIsOpenRef = useRef<boolean | undefined>(undefined);\r\n    const [searchString, setSearchString] = useState('');\r\n    const searchTimeoutRef = useRef<number>();\r\n    const currentSearchIndexRef = useRef<number>(0);\r\n\r\n    useEffect(() => {\r\n      // Focus internal input when Menu is opened\r\n      if (hiddenInputRef.current && isOpen && !previousIsOpenRef.current) {\r\n        hiddenInputRef.current.focus();\r\n      }\r\n\r\n      // Focus trigger when Menu is closed\r\n      if (triggerRef.current && !isOpen && previousIsOpenRef.current) {\r\n        triggerRef.current.focus();\r\n      }\r\n\r\n      previousIsOpenRef.current = isOpen;\r\n    }, [isOpen, triggerRef]);\r\n\r\n    /**\r\n     * Handle timeouts for clearing search text\r\n     */\r\n    useEffect(() => {\r\n      // Cancel existing timeout if keys are pressed rapidly\r\n      if (searchTimeoutRef.current) {\r\n        clearTimeout(searchTimeoutRef.current);\r\n      }\r\n\r\n      // Reset search string after delay\r\n      searchTimeoutRef.current = window.setTimeout(() => {\r\n        setSearchString('');\r\n      }, 500);\r\n\r\n      return () => {\r\n        clearTimeout(searchTimeoutRef.current);\r\n      };\r\n    }, [searchString]);\r\n\r\n    /**\r\n     * Search item value registry based around current highlight bounds\r\n     */\r\n    const searchItems = useCallback(\r\n      (searchValue: string, startIndex: number, endIndex: number) => {\r\n        for (let index = startIndex; index < endIndex; index++) {\r\n          const itemTextValue = itemSearchRegistry.current[index];\r\n\r\n          if (\r\n            itemTextValue &&\r\n            itemTextValue.toUpperCase().indexOf(searchValue.toUpperCase()) === 0\r\n          ) {\r\n            return index;\r\n          }\r\n        }\r\n\r\n        return undefined;\r\n      },\r\n      [itemSearchRegistry]\r\n    );\r\n\r\n    const onInputKeyDown = useCallback(\r\n      (e: React.KeyboardEvent) => {\r\n        if (e.keyCode === KEY_CODES.SPACE) {\r\n          // Prevent space from closing Menu only if used with existing search value\r\n          if (searchString) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n          } else if (highlightedIndex !== null && highlightedIndex !== undefined) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            selectItemAtIndex(highlightedIndex);\r\n            closeMenu();\r\n          }\r\n        }\r\n\r\n        // Only search with alphanumeric keys\r\n        if (\r\n          (e.keyCode < 48 || e.keyCode > 57) &&\r\n          (e.keyCode < 65 || e.keyCode > 90) &&\r\n          e.keyCode !== KEY_CODES.SPACE\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        const character = String.fromCharCode(e.which || e.keyCode);\r\n\r\n        if (!character || character.length === 0) {\r\n          return;\r\n        }\r\n\r\n        // Reset starting search index after delay has removed previous values\r\n        if (!searchString) {\r\n          if (highlightedIndex === null || highlightedIndex === undefined) {\r\n            currentSearchIndexRef.current = -1;\r\n          } else {\r\n            currentSearchIndexRef.current = highlightedIndex;\r\n          }\r\n        }\r\n\r\n        const newSearchString = searchString + character;\r\n\r\n        setSearchString(newSearchString);\r\n\r\n        let matchingIndex = searchItems(\r\n          newSearchString,\r\n          currentSearchIndexRef.current + 1,\r\n          itemSearchRegistry.current.length\r\n        );\r\n\r\n        if (matchingIndex === undefined) {\r\n          matchingIndex = searchItems(newSearchString, 0, currentSearchIndexRef.current);\r\n        }\r\n\r\n        if (matchingIndex !== undefined) {\r\n          setHighlightedIndex(matchingIndex);\r\n        }\r\n      },\r\n      [\r\n        searchString,\r\n        searchItems,\r\n        itemSearchRegistry,\r\n        highlightedIndex,\r\n        selectItemAtIndex,\r\n        closeMenu,\r\n        setHighlightedIndex\r\n      ]\r\n    );\r\n\r\n    /**\r\n     * Destructure type out of props so that `type=\"button\"`\r\n     * is not spread onto the Select Dropdown `div`.\r\n     */\r\n    /* eslint-disable @typescript-eslint/no-unused-vars */\r\n    const { type, ...selectProps } = getToggleButtonProps({\r\n      tabIndex: props.disabled ? undefined : 0,\r\n      onMouseEnter: composeEventHandlers(props.onMouseEnter, () => setIsHovered(true)),\r\n      onMouseLeave: composeEventHandlers(props.onMouseLeave, () => setIsHovered(false)),\r\n      onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),\r\n      onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false)),\r\n      ...props\r\n    } as any);\r\n\r\n    const isContainerHovered = isLabelHovered && !isOpen;\r\n    const isContainerFocused = isFocused || isOpen;\r\n\r\n    return (\r\n      <Reference>\r\n        {({ ref: popperReference }) => (\r\n          <StyledFauxInput\r\n            data-test-is-open={isOpen}\r\n            data-test-is-hovered={isContainerHovered}\r\n            data-test-is-focused={isOpen}\r\n            isHovered={isContainerHovered}\r\n            isFocused={isContainerFocused}\r\n            {...selectProps}\r\n            ref={selectRef => {\r\n              // Pass ref to popperJS for positioning\r\n              (popperReference as any)(selectRef);\r\n\r\n              // Store ref locally to return focus on close\r\n              // Apply Select ref to global Dropdown context\r\n              mergeRefs([triggerRef, ref, popperReferenceElementRef])(selectRef);\r\n            }}\r\n          >\r\n            {start && (\r\n              <StyledFauxInput.StartIcon\r\n                isHovered={isHovered || (isLabelHovered && !isOpen)}\r\n                isFocused={isContainerFocused}\r\n                isDisabled={props.disabled}\r\n              >\r\n                {start}\r\n              </StyledFauxInput.StartIcon>\r\n            )}\r\n            <StyledSelect>{children}</StyledSelect>\r\n            <StyledInput\r\n              {...getInputProps({\r\n                readOnly: true,\r\n                isHidden: true,\r\n                tabIndex: -1,\r\n                ref: hiddenInputRef,\r\n                value: '',\r\n                onClick: (e: any) => {\r\n                  if (isOpen) {\r\n                    (e.nativeEvent as any).preventDownshiftDefault = true;\r\n                  }\r\n                },\r\n                onKeyDown: onInputKeyDown\r\n              } as any)}\r\n            />\r\n            {!props.isBare && (\r\n              <StyledFauxInput.EndIcon\r\n                data-test-id=\"select-icon\"\r\n                isHovered={isHovered || (isLabelHovered && !isOpen)}\r\n                isFocused={isContainerFocused}\r\n                isDisabled={props.disabled}\r\n                isRotated={isOpen}\r\n              >\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" focusable=\"false\" viewBox=\"0 0 16 16\">\r\n  <path fill=\"currentColor\" d=\"M12.688 5.61a.5.5 0 01.69.718l-.066.062-5 4a.5.5 0 01-.542.054l-.082-.054-5-4a.5.5 0 01.55-.83l.074.05L8 9.359l4.688-3.75z\"/>\r\n</svg>\r\n\r\n              </StyledFauxInput.EndIcon>\r\n            )}\r\n          </StyledFauxInput>\r\n        )}\r\n      </Reference>\r\n    );\r\n  }\r\n);\r\n\r\nSelect.displayName = 'Select';\r\n\r\nSelect.propTypes = {\r\n  isCompact: PropTypes.bool,\r\n  isBare: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  focusInset: PropTypes.bool,\r\n  validation: PropTypes.oneOf(['success', 'warning', 'error'])\r\n};\r\n"],"names":[],"sourceRoot":""}