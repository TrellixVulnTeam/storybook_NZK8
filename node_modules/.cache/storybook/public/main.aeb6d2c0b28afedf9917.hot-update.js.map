{"version":3,"file":"main.aeb6d2c0b28afedf9917.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;;AAuCA;AACA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA;AAAA;;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;;AASA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AA5BA;AADA;AAAA;;AAkCA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAuCA;AAxCA;AA2CA;AAEA;AAAA;AAAA;AACA;AAcA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AADA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAWA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAVA;AAeA;AACA;AACA;AAHA;AAQA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AA+CA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAnFA;AA2FA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AADA;AAIA","sources":["webpack://@zendeskgarden/react-components/./packages/dropdowns/src/elements/Multiselect/Multiselect.tsx"],"sourcesContent":["/**\r\n * Copyright Zendesk, Inc.\r\n *\r\n * Use of this source code is governed under the Apache License, Version 2.0\r\n * found at http://www.apache.org/licenses/LICENSE-2.0.\r\n */\r\n\r\nimport React, {\r\n  useContext,\r\n  useRef,\r\n  useEffect,\r\n  useState,\r\n  useMemo,\r\n  useCallback,\r\n  HTMLAttributes\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ThemeContext } from 'styled-components';\r\nimport { Reference } from 'react-popper';\r\nimport { useSelection } from '@zendeskgarden/container-selection';\r\nimport { KEY_CODES, composeEventHandlers } from '@zendeskgarden/container-utilities';\r\nimport Chevron from '@zendeskgarden/svg-icons/src/16/chevron-down-stroke.svg';\r\nimport mergeRefs from 'react-merge-refs';\r\nimport {\r\n  StyledFauxInput,\r\n  StyledMultiselectInput,\r\n  StyledMultiselectItemsContainer,\r\n  StyledMultiselectItemWrapper,\r\n  StyledMultiselectMoreAnchor\r\n} from '../../styled';\r\nimport { VALIDATION } from '../../utils/validation';\r\nimport useDropdownContext from '../../utils/useDropdownContext';\r\nimport useFieldContext from '../../utils/useFieldContext';\r\nimport { REMOVE_ITEM_STATE_TYPE } from '../Dropdown/Dropdown';\r\n\r\nexport interface IMultiselectProps extends HTMLAttributes<HTMLDivElement> {\r\n  /** Applies compact styling */\r\n  isCompact?: boolean;\r\n  /** Removes borders and padding */\r\n  isBare?: boolean;\r\n  /** Indicates that the element is not interactive */\r\n  disabled?: boolean;\r\n  /** Applies inset `box-shadow` styling on focus */\r\n  focusInset?: boolean;\r\n  /** Defines text that appears in the element when no items are selected */\r\n  placeholder?: string;\r\n  /** Defines the element's validation state */\r\n  validation?: VALIDATION;\r\n  /** Determines the maximum number of items displayed while collapsed */\r\n  maxItems?: number;\r\n  /**\r\n   * Overrides the \"+ N more\" text displayed when the total number of items exceeds `maxItems`\r\n   *\r\n   * @param {number} value The number of hidden items\r\n   * @returns {string} a replacement for the \"+ N more\" text\r\n   */\r\n  renderShowMore?: (value: number) => string;\r\n  /**\r\n   * Renders each item element. Designed to be used with [Tag](/components/tags).\r\n   *\r\n   * @param {Object} options Rendered item options\r\n   * @param {any} options.value The item value\r\n   * @param {Function} options.removeValue Remove item callback\r\n   * @returns {React.ReactElement} the item element\r\n   */\r\n  renderItem: (options: { value: any; removeValue: () => void }) => React.ReactElement;\r\n  /** Provides DOM access to the underlying input element */\r\n  inputRef?: React.Ref<HTMLInputElement>;\r\n  /** Defines the icon rendered before the element's content */\r\n  start?: any;\r\n}\r\n\r\n/**\r\n * @extends HTMLAttributes<HTMLDivElement>\r\n */\r\nexport const Multiselect = React.forwardRef<HTMLDivElement, IMultiselectProps>(\r\n  (\r\n    {\r\n      renderItem,\r\n      placeholder,\r\n      maxItems,\r\n      renderShowMore,\r\n      inputRef: externalInputRef = null,\r\n      start,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const {\r\n      popperReferenceElementRef,\r\n      selectedItems = [],\r\n      containsMultiselectRef,\r\n      previousIndexRef,\r\n      downshift: {\r\n        getToggleButtonProps,\r\n        getRootProps,\r\n        getInputProps,\r\n        isOpen,\r\n        closeMenu,\r\n        inputValue,\r\n        setState: setDownshiftState,\r\n        itemToString\r\n      },\r\n      setDropdownType\r\n    } = useDropdownContext();\r\n    const { isLabelHovered } = useFieldContext();\r\n    const inputRef = useRef<HTMLInputElement>();\r\n    const triggerRef = useRef<HTMLDivElement>();\r\n    const blurTimeoutRef = useRef<number | undefined>();\r\n    const previousIsOpenRef = useRef<boolean | undefined>(undefined);\r\n    const previousIsFocusedRef = useRef<boolean | undefined>(undefined);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [focusedItem, setFocusedItem] = useState(undefined);\r\n    const themeContext = useContext(ThemeContext);\r\n\r\n    const { getContainerProps, getItemProps } = useSelection({\r\n      rtl: themeContext.rtl,\r\n      focusedItem,\r\n      selectedItem: undefined,\r\n      onFocus: (item: any) => {\r\n        setFocusedItem(item);\r\n      }\r\n    });\r\n\r\n    useEffect(() => {\r\n      containsMultiselectRef.current = true;\r\n      const tempRef = blurTimeoutRef;\r\n\r\n      return () => {\r\n        clearTimeout(tempRef.current);\r\n      };\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      // Focus internal input when Menu is opened\r\n      if (inputRef.current) {\r\n        if (isOpen && !previousIsOpenRef.current) {\r\n          inputRef.current.focus();\r\n        } else if (isFocused && !previousIsFocusedRef.current && focusedItem === undefined) {\r\n          inputRef.current.focus();\r\n        }\r\n      }\r\n\r\n      previousIsOpenRef.current = isOpen;\r\n      previousIsFocusedRef.current = isFocused;\r\n    }, [isOpen, inputRef, isFocused, focusedItem]);\r\n\r\n    /**\r\n     * Close menu when an item becomes focused\r\n     */\r\n    useEffect(() => {\r\n      if (focusedItem !== undefined && isOpen) {\r\n        closeMenu();\r\n      }\r\n    }, [focusedItem, isOpen, closeMenu]);\r\n\r\n    /**\r\n     * Destructure type out of props so that `type=\"button\"`\r\n     * is not spread onto the MultiSelect Dropdown `div`.\r\n     */\r\n    /* eslint-disable @typescript-eslint/no-unused-vars */\r\n    const { type, ...selectProps } = getToggleButtonProps(\r\n      getRootProps({\r\n        tabIndex: props.disabled ? undefined : -1,\r\n        onKeyDown: (e: React.KeyboardEvent<HTMLElement>) => {\r\n          if (isOpen) {\r\n            (e.nativeEvent as any).preventDownshiftDefault = true;\r\n          } else if (!inputValue && e.keyCode === KEY_CODES.HOME) {\r\n            setFocusedItem(selectedItems[0]);\r\n            e.preventDefault();\r\n          }\r\n        },\r\n        onFocus: () => {\r\n          setIsFocused(true);\r\n        },\r\n        onBlur: (e: React.FocusEvent<HTMLElement>) => {\r\n          const currentTarget = e.currentTarget;\r\n\r\n          blurTimeoutRef.current = setTimeout(() => {\r\n            if (!currentTarget.contains(document.activeElement)) {\r\n              setIsFocused(false);\r\n            }\r\n          }, 0) as unknown as number;\r\n        },\r\n        onMouseEnter: composeEventHandlers(props.onMouseEnter, () => setIsHovered(true)),\r\n        onMouseLeave: composeEventHandlers(props.onMouseLeave, () => setIsHovered(false)),\r\n        /**\r\n         * Ensure that [role=\"combobox\"] is applied directly to the input\r\n         * for Safari screenreader support\r\n         */\r\n        role: null,\r\n        ...props\r\n      } as any)\r\n    );\r\n\r\n    const renderSelectableItem = useCallback(\r\n      (item, index) => {\r\n        const removeValue = () => {\r\n          (setDownshiftState as any)({\r\n            type: REMOVE_ITEM_STATE_TYPE,\r\n            selectedItem: item\r\n          });\r\n          inputRef.current && inputRef.current.focus();\r\n        };\r\n\r\n        const renderedItem = renderItem({ value: item, removeValue });\r\n        const focusRef = React.createRef();\r\n\r\n        const clonedChild = React.cloneElement(renderedItem, {\r\n          ...getItemProps({\r\n            item,\r\n            focusRef,\r\n            onKeyDown: (e: React.KeyboardEvent<any>) => {\r\n              if (e.keyCode === KEY_CODES.DELETE || e.keyCode === KEY_CODES.BACKSPACE) {\r\n                e.preventDefault();\r\n                removeValue();\r\n              }\r\n\r\n              if (e.keyCode === KEY_CODES.END && !inputValue) {\r\n                inputRef.current && inputRef.current.focus();\r\n                e.preventDefault();\r\n              }\r\n\r\n              if (themeContext.rtl) {\r\n                if (e.keyCode === KEY_CODES.RIGHT && index === 0) {\r\n                  e.preventDefault();\r\n                }\r\n\r\n                if (e.keyCode === KEY_CODES.LEFT && index === selectedItems.length - 1) {\r\n                  e.preventDefault();\r\n                  inputRef.current && inputRef.current.focus();\r\n                }\r\n              } else {\r\n                if (e.keyCode === KEY_CODES.LEFT && index === 0) {\r\n                  e.preventDefault();\r\n                }\r\n\r\n                if (e.keyCode === KEY_CODES.RIGHT && index === selectedItems.length - 1) {\r\n                  e.preventDefault();\r\n                  inputRef.current && inputRef.current.focus();\r\n                }\r\n              }\r\n            },\r\n            onClick: (e: React.MouseEvent<any>) => {\r\n              (e as any).nativeEvent.preventDownshiftDefault = true;\r\n            },\r\n            tabIndex: -1\r\n          }),\r\n          size: props.isCompact ? 'medium' : 'large'\r\n        });\r\n\r\n        const key = `${itemToString(item)}-${index}`;\r\n\r\n        return <StyledMultiselectItemWrapper key={key}>{clonedChild}</StyledMultiselectItemWrapper>;\r\n      },\r\n      [\r\n        getItemProps,\r\n        inputValue,\r\n        renderItem,\r\n        setDownshiftState,\r\n        itemToString,\r\n        selectedItems,\r\n        props,\r\n        inputRef,\r\n        themeContext.rtl\r\n      ]\r\n    );\r\n\r\n    const items = useMemo(() => {\r\n      const itemValues = selectedItems || [];\r\n      const output = [];\r\n\r\n      for (let x = 0; x < itemValues.length; x++) {\r\n        const item = itemValues[x];\r\n\r\n        if (x < maxItems!) {\r\n          if (props.disabled) {\r\n            const renderedItem = React.cloneElement(\r\n              renderItem({\r\n                value: item,\r\n                removeValue: () => {\r\n                  return undefined;\r\n                }\r\n              }),\r\n              {\r\n                size: props.isCompact ? 'medium' : 'large'\r\n              }\r\n            );\r\n\r\n            output.push(\r\n              <StyledMultiselectItemWrapper key={x}>{renderedItem}</StyledMultiselectItemWrapper>\r\n            );\r\n          } else {\r\n            output.push(renderSelectableItem(item, x));\r\n          }\r\n        } else if ((!isFocused && !inputValue) || props.disabled) {\r\n          output.push(\r\n            <StyledMultiselectItemWrapper key=\"more-anchor\">\r\n              <StyledMultiselectMoreAnchor\r\n                data-test-id=\"show-more\"\r\n                isCompact={props.isCompact}\r\n                isDisabled={props.disabled}\r\n              >\r\n                {renderShowMore\r\n                  ? renderShowMore(itemValues.length - x)\r\n                  : `+ ${itemValues.length - x} more`}\r\n              </StyledMultiselectMoreAnchor>\r\n            </StyledMultiselectItemWrapper>\r\n          );\r\n          break;\r\n        } else {\r\n          output.push(renderSelectableItem(item, x));\r\n        }\r\n      }\r\n\r\n      return output;\r\n    }, [\r\n      isFocused,\r\n      props.disabled,\r\n      renderSelectableItem,\r\n      selectedItems,\r\n      renderItem,\r\n      inputValue,\r\n      maxItems,\r\n      renderShowMore,\r\n      props.isCompact\r\n    ]);\r\n\r\n    const isContainerHovered = isLabelHovered && !isOpen;\r\n    const isContainerFocused = isOpen || isFocused;\r\n\r\n    useEffect(() => {\r\n      setDropdownType('multiselect');\r\n    }, [setDropdownType]);\r\n\r\n    return (\r\n      <Reference>\r\n        {({ ref: popperReference }) => (\r\n          <StyledFauxInput\r\n            data-test-is-open={isOpen}\r\n            data-test-is-hovered={isContainerHovered}\r\n            data-test-is-focused={isContainerFocused}\r\n            {...getContainerProps({\r\n              ...selectProps,\r\n              isHovered: isContainerHovered,\r\n              isFocused: isContainerFocused,\r\n              ref: (selectRef: any) => {\r\n                // Pass ref to popperJS for positioning\r\n                (popperReference as any)(selectRef);\r\n\r\n                // Apply Select ref to global Dropdown context\r\n                mergeRefs([triggerRef, popperReferenceElementRef, ref])(selectRef);\r\n              }\r\n            })}\r\n          >\r\n            {start && (\r\n              <StyledFauxInput.StartIcon\r\n                isHovered={isHovered || (isLabelHovered && !isOpen)}\r\n                isFocused={isContainerFocused}\r\n                isDisabled={props.disabled}\r\n              >\r\n                {start}\r\n              </StyledFauxInput.StartIcon>\r\n            )}\r\n            <StyledMultiselectItemsContainer isBare={props.isBare} isCompact={props.isCompact}>\r\n              {items}\r\n              <StyledMultiselectInput\r\n                {...(getInputProps({\r\n                  disabled: props.disabled,\r\n                  onFocus: () => {\r\n                    setFocusedItem(undefined);\r\n                  },\r\n                  onClick: (e: MouseEvent) => {\r\n                    if (inputValue && inputValue.length > 0 && isOpen) {\r\n                      (e as any).nativeEvent.preventDownshiftDefault = true;\r\n                    }\r\n                  },\r\n                  onKeyDown: (e: KeyboardEvent) => {\r\n                    if (!inputValue) {\r\n                      if (\r\n                        themeContext.rtl &&\r\n                        e.keyCode === KEY_CODES.RIGHT &&\r\n                        selectedItems.length > 0 &&\r\n                        previousIndexRef.current === undefined\r\n                      ) {\r\n                        setFocusedItem(selectedItems[selectedItems.length - 1]);\r\n                      } else if (\r\n                        !themeContext.rtl &&\r\n                        e.keyCode === KEY_CODES.LEFT &&\r\n                        selectedItems.length > 0 &&\r\n                        previousIndexRef.current === undefined\r\n                      ) {\r\n                        setFocusedItem(selectedItems[selectedItems.length - 1]);\r\n                      } else if (e.keyCode === KEY_CODES.BACKSPACE && selectedItems.length > 0) {\r\n                        (setDownshiftState as any)({\r\n                          type: REMOVE_ITEM_STATE_TYPE,\r\n                          selectedItem: selectedItems[selectedItems.length - 1]\r\n                        });\r\n                        (e as any).nativeEvent.preventDownshiftDefault = true;\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                      }\r\n                    }\r\n                  },\r\n                  isVisible: isFocused || inputValue || selectedItems.length === 0,\r\n                  isCompact: props.isCompact,\r\n                  role: 'combobox',\r\n                  ref: mergeRefs([inputRef, externalInputRef]),\r\n                  placeholder: selectedItems.length === 0 ? placeholder : undefined\r\n                }) as any)}\r\n              />\r\n            </StyledMultiselectItemsContainer>\r\n            {!props.isBare && (\r\n              <StyledFauxInput.EndIcon\r\n                isHovered={isHovered || (isLabelHovered && !isOpen)}\r\n                isFocused={isContainerFocused}\r\n                isDisabled={props.disabled}\r\n                isRotated={isOpen}\r\n              >\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" focusable=\"false\" viewBox=\"0 0 16 16\">\r\n  <path fill=\"currentColor\" d=\"M12.688 5.61a.5.5 0 01.69.718l-.066.062-5 4a.5.5 0 01-.542.054l-.082-.054-5-4a.5.5 0 01.55-.83l.074.05L8 9.359l4.688-3.75z\"/>\r\n</svg>\r\n              </StyledFauxInput.EndIcon>\r\n            )}\r\n          </StyledFauxInput>\r\n        )}\r\n      </Reference>\r\n    );\r\n  }\r\n);\r\n\r\nMultiselect.propTypes = {\r\n  isCompact: PropTypes.bool,\r\n  isBare: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  focusInset: PropTypes.bool,\r\n  renderItem: PropTypes.func.isRequired,\r\n  maxItems: PropTypes.number,\r\n  validation: PropTypes.oneOf(['success', 'warning', 'error'])\r\n};\r\n\r\nMultiselect.defaultProps = {\r\n  maxItems: 4\r\n};\r\n\r\nMultiselect.displayName = 'Multiselect';\r\n"],"names":[],"sourceRoot":""}