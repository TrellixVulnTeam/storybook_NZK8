{"version":3,"file":"main.c3fe682336bc190c402c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAmBA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA;AAAA;;AACA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAZA;AADA;AAAA;;AAkBA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;AAGA;;AAGA;AACA;AAjBA;AAqBA;AACA;AACA;AAHA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAoBA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAzDA;AAiEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;;AACA","sources":["webpack://@zendeskgarden/react-components/./packages/dropdowns/src/elements/Autocomplete/Autocomplete.tsx"],"sourcesContent":["/**\r\n * Copyright Zendesk, Inc.\r\n *\r\n * Use of this source code is governed under the Apache License, Version 2.0\r\n * found at http://www.apache.org/licenses/LICENSE-2.0.\r\n */\r\n\r\nimport React, { useRef, useEffect, useState, HTMLAttributes, KeyboardEvent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Reference } from 'react-popper';\r\nimport { composeEventHandlers } from '@zendeskgarden/container-utilities';\r\nimport Chevron from '@zendeskgarden/svg-icons/src/16/chevron-down-stroke.svg';\r\nimport mergeRefs from 'react-merge-refs';\r\nimport { StyledFauxInput, StyledInput, StyledSelect } from '../../styled';\r\nimport { VALIDATION } from '../../utils/validation';\r\nimport useDropdownContext from '../../utils/useDropdownContext';\r\nimport useFieldContext from '../../utils/useFieldContext';\r\n\r\nexport interface IAutocompleteProps extends HTMLAttributes<HTMLDivElement> {\r\n  /** Applies compact styling */\r\n  isCompact?: boolean;\r\n  /** Removes borders and padding */\r\n  isBare?: boolean;\r\n  /** Indicates that the element is not interactive */\r\n  disabled?: boolean;\r\n  /** Applies inset `box-shadow` styling on focus */\r\n  focusInset?: boolean;\r\n  /** Defines the element's validation state */\r\n  validation?: VALIDATION;\r\n  /** Provides ref access to the underlying input element */\r\n  inputRef?: React.Ref<HTMLInputElement>;\r\n  /** Defines the icon rendered in the start position */\r\n  start?: any;\r\n}\r\n\r\nconst Autocomplete = React.forwardRef<HTMLDivElement, IAutocompleteProps>(\r\n  ({ children, inputRef: controlledInputRef, start, ...props }, ref) => {\r\n    const {\r\n      popperReferenceElementRef,\r\n      downshift: { getToggleButtonProps, getInputProps, getRootProps, isOpen },\r\n      setDropdownType\r\n    } = useDropdownContext();\r\n    const { isLabelHovered } = useFieldContext();\r\n    const inputRef = useRef<HTMLInputElement>();\r\n    const triggerRef = useRef<HTMLDivElement>();\r\n    const previousIsOpenRef = useRef<boolean | undefined>(isOpen);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const [isFocused, setIsFocused] = useState(false);\r\n\r\n    useEffect(() => {\r\n      if (inputRef.current && isOpen !== previousIsOpenRef.current) {\r\n        inputRef.current.focus();\r\n      }\r\n\r\n      previousIsOpenRef.current = isOpen;\r\n    }, [inputRef, isOpen]);\r\n\r\n    /**\r\n     * Destructure type out of props so that `type=\"button\"`\r\n     * is not spread onto the MultiSelect Dropdown `div`.\r\n     */\r\n    /* eslint-disable @typescript-eslint/no-unused-vars */\r\n    const { type, ...selectProps } = getToggleButtonProps(\r\n      getRootProps({\r\n        onKeyDown: (e: KeyboardEvent<HTMLDivElement>) => {\r\n          if (isOpen) {\r\n            (e.nativeEvent as any).preventDownshiftDefault = true;\r\n          }\r\n        },\r\n        onMouseEnter: composeEventHandlers(props.onMouseEnter, () => setIsHovered(true)),\r\n        onMouseLeave: composeEventHandlers(props.onMouseLeave, () => setIsHovered(false)),\r\n        /**\r\n         * Ensure that [role=\"combobox\"] is applied directly to the input\r\n         * for Safari screenreader support\r\n         */\r\n        role: null,\r\n        ...props\r\n      } as any)\r\n    );\r\n\r\n    const isContainerHovered = isLabelHovered && !isOpen;\r\n    const isContainerFocused = isOpen || isFocused;\r\n\r\n    useEffect(() => {\r\n      setDropdownType('autocomplete');\r\n    }, [setDropdownType]);\r\n\r\n    return (\r\n      <Reference>\r\n        {({ ref: popperReference }) => (\r\n          <StyledFauxInput\r\n            data-test-is-open={isOpen}\r\n            data-test-is-hovered={isContainerHovered}\r\n            data-test-is-focused={isContainerFocused}\r\n            isHovered={isContainerHovered}\r\n            isFocused={isContainerFocused}\r\n            tabIndex={null}\r\n            {...selectProps}\r\n            ref={selectRef => {\r\n              // Pass ref to popperJS for positioning\r\n              (popperReference as any)(selectRef);\r\n\r\n              // Store ref locally to return focus on close\r\n              mergeRefs([triggerRef, ref])(selectRef);\r\n\r\n              // Apply Select ref to global Dropdown context\r\n              popperReferenceElementRef.current = selectRef;\r\n            }}\r\n          >\r\n            {start && (\r\n              <StyledFauxInput.StartIcon\r\n                isHovered={isHovered || (isLabelHovered && !isOpen)}\r\n                isFocused={isContainerFocused}\r\n                isDisabled={props.disabled}\r\n              >\r\n                {start}\r\n              </StyledFauxInput.StartIcon>\r\n            )}\r\n            {!isOpen && <StyledSelect>{children}</StyledSelect>}\r\n            <StyledInput\r\n              {...getInputProps({\r\n                isHidden: !isOpen,\r\n                disabled: props.disabled,\r\n                onFocus: () => {\r\n                  setIsFocused(true);\r\n                },\r\n                onBlur: () => {\r\n                  setIsFocused(false);\r\n                },\r\n                onClick: (e: any) => {\r\n                  if (isOpen) {\r\n                    (e.nativeEvent as any).preventDownshiftDefault = true;\r\n                  }\r\n                },\r\n                role: 'combobox',\r\n                ref: mergeRefs([inputRef, controlledInputRef || null])\r\n              } as any)}\r\n            />\r\n            {!props.isBare && (\r\n              <StyledFauxInput.EndIcon\r\n                isHovered={isHovered || (isLabelHovered && !isOpen)}\r\n                isFocused={isContainerFocused}\r\n                isDisabled={props.disabled}\r\n                isRotated={isOpen}\r\n              >\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" focusable=\"false\" viewBox=\"0 0 16 16\">\r\n  <path fill=\"currentColor\" d=\"M12.688 5.61a.5.5 0 01.69.718l-.066.062-5 4a.5.5 0 01-.542.054l-.082-.054-5-4a.5.5 0 01.55-.83l.074.05L8 9.359l4.688-3.75z\"/>\r\n</svg>\r\n              </StyledFauxInput.EndIcon>\r\n            )}\r\n          </StyledFauxInput>\r\n        )}\r\n      </Reference>\r\n    );\r\n  }\r\n);\r\n\r\nAutocomplete.displayName = 'Autocomplete';\r\n\r\nAutocomplete.propTypes = {\r\n  isCompact: PropTypes.bool,\r\n  isBare: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  focusInset: PropTypes.bool,\r\n  validation: PropTypes.oneOf(['success', 'warning', 'error'])\r\n};\r\n\r\n/**\r\n * @extends HTMLAttributes<HTMLDivElement>\r\n */\r\nexport default Autocomplete as React.FunctionComponent<\r\n  IAutocompleteProps & React.RefAttributes<HTMLDivElement>\r\n>;\r\n"],"names":[],"sourceRoot":""}