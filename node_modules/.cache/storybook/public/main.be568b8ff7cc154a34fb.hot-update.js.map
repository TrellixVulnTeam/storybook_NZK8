{"version":3,"file":"main.be568b8ff7cc154a34fb.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAMA;AACA;AAFA;AALA;AAAA;AAAA;;AASA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAFA;AAAA;AAOA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAXA;AAiBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;AAEA","sources":["webpack://@zendeskgarden/react-components/./packages/accordions/src/elements/accordion/components/Header.tsx"],"sourcesContent":["/**\r\n * Copyright Zendesk, Inc.\r\n *\r\n * Use of this source code is governed under the Apache License, Version 2.0\r\n * found at http://www.apache.org/licenses/LICENSE-2.0.\r\n */\r\n\r\nimport React, { useState, FocusEvent, forwardRef, HTMLAttributes, useMemo } from 'react';\r\nimport { composeEventHandlers } from '@zendeskgarden/container-utilities';\r\n// import ChevronDown from '@zendeskgarden/svg-icons/src/16/chevron-down-stroke.svg';\r\nimport { useAccordionContext, useSectionContext, HeaderContext } from '../../../utils';\r\nimport { StyledHeader, StyledRotateIcon, COMPONENT_ID as buttonGardenId } from '../../../styled';\r\n\r\nexport const Header = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>((props, ref) => {\r\n  const {\r\n    level: ariaLevel,\r\n    isCompact,\r\n    isCollapsible,\r\n    getHeaderProps,\r\n    getTriggerProps,\r\n    expandedSections\r\n  } = useAccordionContext();\r\n  const { onClick, onFocus, onBlur, onMouseOver, onMouseOut, children, ...other } = props;\r\n  const sectionIndex = useSectionContext();\r\n  const [isFocused, setIsFocused] = useState(false);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const isExpanded = expandedSections.includes(sectionIndex);\r\n  /**\r\n   *  Pressing the space key on a button triggers the `onTriggerClick` callback.\r\n   * `onKeyDown` is plucked out and not passed to the Label (button) element\r\n   * to prevent double invocations of the click event.\r\n   */\r\n  const {\r\n    onClick: onTriggerClick,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    onKeyDown,\r\n    ...otherTriggerProps\r\n  } = getTriggerProps({\r\n    type: 'button',\r\n    index: sectionIndex\r\n  });\r\n  const onHeaderFocus = (e: FocusEvent) => {\r\n    e.persist();\r\n\r\n    setTimeout(() => {\r\n      const isAccordionButton = e.target.getAttribute('data-garden-id') === buttonGardenId;\r\n      const isFocusVisible = e.target.getAttribute('data-garden-focus-visible');\r\n\r\n      if (isAccordionButton && isFocusVisible) {\r\n        setIsFocused(true);\r\n      }\r\n    }, 0);\r\n  };\r\n\r\n  const value = useMemo(\r\n    () => ({\r\n      isHovered,\r\n      otherTriggerProps\r\n    }),\r\n    [isHovered, otherTriggerProps]\r\n  );\r\n\r\n  return (\r\n    <HeaderContext.Provider value={value}>\r\n      <StyledHeader\r\n        {...getHeaderProps({\r\n          ref,\r\n          ariaLevel,\r\n          isCompact,\r\n          isFocused,\r\n          isExpanded,\r\n          isCollapsible,\r\n          onClick: composeEventHandlers(onClick, onTriggerClick),\r\n          onFocus: composeEventHandlers(onFocus, onHeaderFocus),\r\n          onBlur: composeEventHandlers(onBlur, () => setIsFocused(false)),\r\n          onMouseOver: composeEventHandlers(onMouseOver, () => setIsHovered(true)),\r\n          onMouseOut: composeEventHandlers(onMouseOut, () => setIsHovered(false)),\r\n          ...other\r\n        })}\r\n      >\r\n        {children}\r\n        <StyledRotateIcon\r\n          isCompact={isCompact}\r\n          isHovered={isHovered}\r\n          isRotated={isExpanded}\r\n          isCollapsible={isCollapsible}\r\n          onMouseOver={composeEventHandlers(onMouseOver, () => setIsHovered(true))}\r\n          onMouseOut={composeEventHandlers(onMouseOut, () => setIsHovered(false))}\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" focusable=\"false\" viewBox=\"0 0 16 16\">\r\n  <path fill=\"currentColor\" d=\"M12.688 5.61a.5.5 0 01.69.718l-.066.062-5 4a.5.5 0 01-.542.054l-.082-.054-5-4a.5.5 0 01.55-.83l.074.05L8 9.359l4.688-3.75z\"/>\r\n</svg>\r\n        </StyledRotateIcon>\r\n      </StyledHeader>\r\n    </HeaderContext.Provider>\r\n  );\r\n});\r\n\r\nHeader.displayName = 'Header';\r\n"],"names":[],"sourceRoot":""}