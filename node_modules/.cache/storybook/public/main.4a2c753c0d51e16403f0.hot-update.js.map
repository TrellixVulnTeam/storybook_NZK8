{"version":3,"file":"main.4a2c753c0d51e16403f0.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAwCA;AACA;AACA;AACA;AACA;AAAA;;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;;AASA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AA5BA;AAkCA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA","sources":["webpack://@zendeskgarden/react-components/./packages/colorpickers/src/elements/ColorSwatch/index.tsx"],"sourcesContent":["/**\r\n * Copyright Zendesk, Inc.\r\n *\r\n * Use of this source code is governed under the Apache License, Version 2.0\r\n * found at http://www.apache.org/licenses/LICENSE-2.0.\r\n */\r\n\r\nimport React, { forwardRef, useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ThemeContext } from 'styled-components';\r\nimport { Tooltip } from '@zendeskgarden/react-tooltips';\r\nimport { useGrid } from '@zendeskgarden/container-grid';\r\nimport { useId } from '@zendeskgarden/container-utilities';\r\nimport CheckIcon from '@zendeskgarden/svg-icons/src/12/check-sm-fill.svg';\r\nimport { StyledSwatchButton, StyledIcon, StyledCell, StyledColorSwatch } from '../../styled';\r\n\r\nexport interface ILabeledColor {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\nexport interface IColorSwatchProps {\r\n  /** Sets the two-dimension array of labeled HEX and RGB/A string colors */\r\n  colors: ILabeledColor[][];\r\n  /** Sets the focused row index in a controlled color swatch */\r\n  rowIndex?: number;\r\n  /** Sets the focused column index in a controlled color swatch.\r\n   * Can be set to `-1` to clear the row focus.\r\n   */\r\n  colIndex?: number;\r\n  /** Sets the selected row index in a controlled color swatch.\r\n   * Can be set to `-1` to clear the column focus.\r\n   */\r\n  selectedRowIndex?: number;\r\n  /** Sets the selected column index in a controlled color swatch.\r\n   * Can be set to `-1` to clear the row selection.\r\n   */\r\n  selectedColIndex?: number;\r\n  /** Sets the default focused row index in an uncontrolled color swatch.\r\n   * Can be set to `-1` to clear the column selection.\r\n   */\r\n  defaultRowIndex?: number;\r\n  /** Sets the default focused column index in an uncontrolled color swatch */\r\n  defaultColIndex?: number;\r\n  /** Sets the default selected row index in an uncontrolled color swatch */\r\n  defaultSelectedRowIndex?: number;\r\n  /** Sets the default selected column index in an uncontrolled color swatch */\r\n  defaultSelectedColIndex?: number;\r\n  /** Handles color swatch changes */\r\n  onChange?: (rowIndex: number, colIndex: number) => void;\r\n  /** Handles color swatch select event */\r\n  onSelect?: (rowIndex: number, colIndex: number) => void;\r\n}\r\n\r\n/**\r\n * @extends HTMLAttributes<HTMLTableElement>\r\n */\r\nexport const ColorSwatch = forwardRef<HTMLTableElement, IColorSwatchProps>(\r\n  ({ colors, ...props }, ref) => {\r\n    const { rtl } = useContext(ThemeContext);\r\n    const { getGridCellProps } = useGrid({\r\n      rtl,\r\n      matrix: colors,\r\n      selection: true,\r\n      wrap: true,\r\n      idPrefix: useId(),\r\n      ...props\r\n    });\r\n\r\n    return (\r\n      <StyledColorSwatch ref={ref}>\r\n        <tbody>\r\n          {colors.map((row: ILabeledColor[], rowIdx: number) => (\r\n            <tr key={row[0].value}>\r\n              {row.map((color: ILabeledColor, colIdx: number) => {\r\n                const { label, value } = color;\r\n                const { 'aria-selected': ariaSelected, ...other } = getGridCellProps({\r\n                  colIdx,\r\n                  rowIdx,\r\n                  type: 'button',\r\n                  role: undefined\r\n                });\r\n\r\n                return (\r\n                  <StyledCell key={value} aria-selected={ariaSelected}>\r\n                    <Tooltip content={label}>\r\n                      <StyledSwatchButton\r\n                        backgroundColor={value}\r\n                        aria-pressed={ariaSelected}\r\n                        {...other}\r\n                      >\r\n                        <StyledIcon color={value} selected={ariaSelected}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" focusable=\"false\" viewBox=\"0 0 16 16\">\r\n  <path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 9l3 3 7-7\"/>\r\n</svg>\r\n                        </StyledIcon>\r\n                      </StyledSwatchButton>\r\n                    </Tooltip>\r\n                  </StyledCell>\r\n                );\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </StyledColorSwatch>\r\n    );\r\n  }\r\n);\r\n\r\nColorSwatch.displayName = 'ColorSwatch';\r\n\r\nColorSwatch.propTypes = {\r\n  colors: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n  rowIndex: PropTypes.number,\r\n  colIndex: PropTypes.number,\r\n  selectedRowIndex: PropTypes.number,\r\n  selectedColIndex: PropTypes.number,\r\n  defaultRowIndex: PropTypes.number,\r\n  defaultColIndex: PropTypes.number,\r\n  defaultSelectedRowIndex: PropTypes.number,\r\n  defaultSelectedColIndex: PropTypes.number,\r\n  onChange: PropTypes.func,\r\n  onSelect: PropTypes.func\r\n};\r\n"],"names":[],"sourceRoot":""}