{"version":3,"file":"main.74aba59dcc766b06cbbd.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAUA;AACA;AACA;AACA;AAGA;AAAA;;AAAA;AACA;AAAA;AAAA;AADA;AAKA;AAEA;AAEA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AAEA;;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;;AACA;AAGA;AAAA;;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AADA;AAGA;AAAA;AAEA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAJA;AAQA;AAZA;AAcA;;AAEA;AAAA;AACA;AADA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;;AAEA;AACA;AAEA;AACA;;AAEA;AAAA;AACA;AADA;AAAA;;AAIA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAJA;AASA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA","sources":["webpack://@zendeskgarden/react-components/./packages/buttons/src/elements/ToggleIconButton.tsx","webpack://@zendeskgarden/react-components/./packages/buttons/demo/toggleIconButton.stories.mdx"],"sourcesContent":["/**\r\n * Copyright Zendesk, Inc.\r\n *\r\n * Use of this source code is governed under the Apache License, Version 2.0\r\n * found at http://www.apache.org/licenses/LICENSE-2.0.\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport IconButton, { IIconButtonProps } from './IconButton';\r\n\r\nexport interface IToggleIconButtonProps extends IIconButtonProps {\r\n  /**\r\n   * Determines if the button is pressed. Use \"mixed\" to indicate that the\r\n   * toggle controls other elements which do not share the same value.\r\n   */\r\n  isPressed?: boolean | 'mixed';\r\n}\r\n\r\n/**\r\n * @extends ButtonHTMLAttributes<HTMLButtonElement>\r\n */\r\nconst ToggleIconButton: React.FunctionComponent<\r\n  IToggleIconButtonProps & React.RefAttributes<HTMLButtonElement>\r\n> = React.forwardRef<HTMLButtonElement, IToggleIconButtonProps>(\r\n  ({ isPressed, ...otherProps }, ref) => (\r\n    <IconButton aria-pressed={isPressed} ref={ref} {...otherProps} />\r\n  )\r\n);\r\n\r\nToggleIconButton.displayName = 'ToggleIconButton';\r\n\r\nToggleIconButton.propTypes = {\r\n  ...IconButton.propTypes,\r\n  isPressed: PropTypes.oneOf([true, false, 'mixed'])\r\n};\r\n\r\nToggleIconButton.defaultProps = {\r\n  isPill: true,\r\n  isBasic: true,\r\n  isPressed: false,\r\n  size: 'medium'\r\n};\r\n\r\nexport default ToggleIconButton;\r\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, ArgsTable, Canvas, Story } from '@storybook/addon-docs';\nimport { useArgs } from '@storybook/client-api';\nimport IconStroke from '@zendeskgarden/svg-icons/src/16/star-stroke.svg';\nimport IconFill from '@zendeskgarden/svg-icons/src/16/star-fill.svg';\nimport { ToggleIconButton } from '@zendeskgarden/react-buttons';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Packages/Buttons/ToggleIconButton\" component={ToggleIconButton} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h1>\n    <ArgsTable mdxType=\"ArgsTable\" />\n    <h1 {...{\n      \"id\": \"demo\"\n    }}>{`Demo`}</h1>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"ToggleIconButton\" args={{\n        'aria-label': 'Label',\n        isBasic: true,\n        isPill: true\n      }} argTypes={{\n        disabled: {\n          control: 'boolean'\n        },\n        isPressed: {\n          control: 'radio',\n          options: [false, true, 'mixed']\n        }\n      }} mdxType=\"Story\">\n    {args => {\n          const updateArgs = useArgs()[1];\n\n          const handleClick = () => updateArgs({\n            isPressed: args.isPressed ? false : true\n          });\n\n          return <ToggleIconButton {...args} onClick={handleClick} mdxType=\"ToggleIconButton\">\n          {args.isPressed === true ? <IconFill mdxType=\"IconFill\" /> : <IconStroke mdxType=\"IconStroke\" />}\n        </ToggleIconButton>;\n        }}\n  </Story>\n    </Canvas>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const toggleIconButton = (args => {\n  const updateArgs = useArgs()[1];\n\n  const handleClick = () => updateArgs({\n    isPressed: args.isPressed ? false : true\n  });\n\n  return <ToggleIconButton {...args} onClick={handleClick}>\n          {args.isPressed === true ? <IconFill /> : <IconStroke />}\n        </ToggleIconButton>;\n});\ntoggleIconButton.storyName = 'ToggleIconButton';\ntoggleIconButton.argTypes = {\n  disabled: {\n    control: 'boolean'\n  },\n  isPressed: {\n    control: 'radio',\n    options: [false, true, 'mixed']\n  }\n};\ntoggleIconButton.args = {\n  'aria-label': 'Label',\n  isBasic: true,\n  isPill: true\n};\ntoggleIconButton.parameters = { storySource: { source: 'args => {\\n  const updateArgs = useArgs()[1];\\n\\n  const handleClick = () => updateArgs({\\n    isPressed: args.isPressed ? false : true\\n  });\\n\\n  return <ToggleIconButton {...args} onClick={handleClick}>\\n          {args.isPressed === true ? <IconFill /> : <IconStroke />}\\n        </ToggleIconButton>;\\n}' } };\n\nconst componentMeta = { title: 'Packages/Buttons/ToggleIconButton', component: ToggleIconButton, includeStories: [\"toggleIconButton\"],  };\n\nconst mdxStoryNameToKey = {\"ToggleIconButton\":\"toggleIconButton\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"names":[],"sourceRoot":""}