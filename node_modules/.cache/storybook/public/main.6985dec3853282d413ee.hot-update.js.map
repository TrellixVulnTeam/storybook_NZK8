{"version":3,"file":"main.6985dec3853282d413ee.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AAEA;AAEA;AACA;;AAsCA;AACA;AACA;AACA;AA+BA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAEA;AAKA;AACA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AAEA;;AAEA;AAMA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAFA;AAMA;AACA;AACA;AACA;AAJA;AAQA;AADA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAxBA;AA8BA;AAGA;AACA;AAeA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;AACA;AACA;AACA;AAAA;;AAJA;AAOA","sources":["webpack://@zendeskgarden/react-components/./packages/colorpickers/src/elements/ColorSwatchDialog/index.tsx"],"sourcesContent":["/**\r\n * Copyright Zendesk, Inc.\r\n *\r\n * Use of this source code is governed under the Apache License, Version 2.0\r\n * found at http://www.apache.org/licenses/LICENSE-2.0.\r\n */\r\n\r\nimport React, {\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  Children,\r\n  cloneElement,\r\n  forwardRef,\r\n  ReactElement,\r\n  HTMLAttributes\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modifier } from 'react-popper';\r\nimport { Button } from '@zendeskgarden/react-buttons';\r\nimport { GARDEN_PLACEMENT } from '@zendeskgarden/react-modals';\r\nimport { composeEventHandlers } from '@zendeskgarden/container-utilities';\r\nimport Chevron from '@zendeskgarden/svg-icons/src/16/chevron-down-stroke.svg';\r\nimport { ColorSwatch, IColorSwatchProps } from '../ColorSwatch';\r\nimport {\r\n  StyledButton,\r\n  StyledButtonPreview,\r\n  StyledTooltipModal,\r\n  StyledTooltipBody\r\n} from '../../styled';\r\n\r\ninterface IDialogChanges {\r\n  isOpen?: boolean;\r\n}\r\n\r\nexport interface IColorSwatchDialogProps extends IColorSwatchProps {\r\n  /** Adjusts the placement of the color dialog */\r\n  placement?: GARDEN_PLACEMENT;\r\n  /** Disables the color dialog button */\r\n  disabled?: boolean;\r\n  /** Modifies [Popper instance](https://popper.js.org/docs/v2/modifiers/) to customize positioning logic */\r\n  popperModifiers?: Partial<Modifier<any, any>>[];\r\n  /** Sets the `z-index` of the color dialog */\r\n  zIndex?: number;\r\n  /** Adds an arrow to the color dialog */\r\n  hasArrow?: boolean;\r\n  /** Animates the color dialog */\r\n  isAnimated?: boolean;\r\n  /** Applies inset `box-shadow` styling on focus */\r\n  focusInset?: boolean;\r\n  /** Passes HTML attributes to the color dialog button element */\r\n  buttonProps?: HTMLAttributes<HTMLButtonElement>;\r\n  /** Opens the dialog in a controlled color swatch dialog */\r\n  isOpen?: boolean;\r\n  /**\r\n   * Handles dialog changes\r\n   *\r\n   * @param {Object} changes The changed dialog state\r\n   */\r\n  onDialogChange?: (changes: IDialogChanges) => void;\r\n}\r\n\r\n/**\r\n * @extends HTMLAttributes<HTMLDivElement>\r\n */\r\nexport const ColorSwatchDialog = forwardRef<\r\n  HTMLDivElement,\r\n  IColorSwatchDialogProps & Omit<HTMLAttributes<HTMLDivElement>, 'onChange' | 'onSelect'>\r\n>(\r\n  (\r\n    {\r\n      colors,\r\n      rowIndex,\r\n      colIndex,\r\n      selectedRowIndex,\r\n      selectedColIndex,\r\n      defaultRowIndex,\r\n      defaultColIndex,\r\n      defaultSelectedRowIndex,\r\n      defaultSelectedColIndex,\r\n      placement,\r\n      onChange,\r\n      onSelect,\r\n      hasArrow,\r\n      isAnimated,\r\n      popperModifiers,\r\n      zIndex,\r\n      isOpen,\r\n      focusInset,\r\n      disabled,\r\n      buttonProps,\r\n      onDialogChange,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const controlledFocus =\r\n      rowIndex !== null && colIndex !== null && rowIndex !== undefined && colIndex !== undefined;\r\n    const controlledSelect =\r\n      selectedRowIndex !== null &&\r\n      selectedColIndex !== null &&\r\n      selectedRowIndex !== undefined &&\r\n      selectedColIndex !== undefined;\r\n    const isControlled = controlledFocus || controlledSelect;\r\n    const isDialogControlled = isOpen !== undefined && isOpen !== null;\r\n    const buttonRef = useRef<HTMLButtonElement>(null);\r\n    const colorSwatchRef = useRef<HTMLTableElement>(null);\r\n    const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>();\r\n    const [uncontrolledSelectedRowIndex, setUncontrolledSelectedRowIndex] = useState(\r\n      defaultSelectedRowIndex || 0\r\n    );\r\n    const [uncontrolledSelectedColIndex, setUncontrolledSelectedColIndex] = useState(\r\n      defaultSelectedColIndex || 0\r\n    );\r\n    const [uncontrolledRowIndex, setUncontrolledRowIndex] = useState(defaultRowIndex || 0);\r\n    const [uncontrolledColIndex, setUncontrolledColIndex] = useState(defaultColIndex || 0);\r\n\r\n    useEffect(() => {\r\n      if (isDialogControlled) {\r\n        if (isOpen) {\r\n          setReferenceElement(buttonRef.current);\r\n        } else {\r\n          setReferenceElement(null);\r\n        }\r\n      }\r\n    }, [isOpen, isDialogControlled]);\r\n\r\n    let uncontrolledSelectedColor;\r\n    let controlledSelectedColor;\r\n\r\n    if (uncontrolledSelectedRowIndex > -1 && uncontrolledSelectedColIndex > -1) {\r\n      uncontrolledSelectedColor =\r\n        colors[uncontrolledSelectedRowIndex][uncontrolledSelectedColIndex];\r\n    }\r\n\r\n    if (\r\n      selectedRowIndex !== undefined &&\r\n      selectedColIndex !== undefined &&\r\n      selectedRowIndex > -1 &&\r\n      selectedColIndex > -1\r\n    ) {\r\n      controlledSelectedColor = colors[selectedRowIndex][selectedColIndex];\r\n    }\r\n\r\n    const openDialog = () => {\r\n      setReferenceElement(buttonRef.current);\r\n      onDialogChange && onDialogChange({ isOpen: true });\r\n    };\r\n\r\n    const closeDialog = () => {\r\n      setUncontrolledRowIndex(uncontrolledSelectedRowIndex);\r\n      setUncontrolledColIndex(uncontrolledSelectedColIndex);\r\n      setReferenceElement(null);\r\n      onDialogChange && onDialogChange({ isOpen: false });\r\n    };\r\n\r\n    const onClick = composeEventHandlers(props.onClick, () => {\r\n      if (referenceElement) {\r\n        closeDialog();\r\n      } else {\r\n        openDialog();\r\n      }\r\n    });\r\n\r\n    useEffect(() => {\r\n      if (referenceElement && colorSwatchRef.current) {\r\n        const focusableButton =\r\n          colorSwatchRef.current.querySelector<HTMLButtonElement>('[tabindex=\"0\"]');\r\n        const selectedCell = colorSwatchRef.current.querySelector('[aria-selected=\"true\"]');\r\n\r\n        if (selectedCell) {\r\n          (selectedCell.children[0] as HTMLButtonElement).focus();\r\n        } else {\r\n          focusableButton?.focus();\r\n        }\r\n      }\r\n    }, [referenceElement]);\r\n\r\n    return (\r\n      <>\r\n        {children ? (\r\n          cloneElement(Children.only(children as ReactElement), {\r\n            onClick,\r\n            ref: buttonRef\r\n          })\r\n        ) : (\r\n          <StyledButton\r\n            disabled={disabled}\r\n            focusInset={focusInset}\r\n            ref={buttonRef}\r\n            onClick={onClick}\r\n            {...buttonProps}\r\n          >\r\n            <StyledButtonPreview\r\n              backgroundColor={\r\n                isControlled ? controlledSelectedColor?.value : uncontrolledSelectedColor?.value\r\n              }\r\n            />\r\n            {/* eslint-disable-next-line no-eq-null, eqeqeq */}\r\n            <Button.EndIcon isRotated={referenceElement != null}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" focusable=\"false\" viewBox=\"0 0 16 16\">\r\n  <path fill=\"currentColor\" d=\"M12.688 5.61a.5.5 0 01.69.718l-.066.062-5 4a.5.5 0 01-.542.054l-.082-.054-5-4a.5.5 0 01.55-.83l.074.05L8 9.359l4.688-3.75z\"/>\r\n</svg>\r\n            </Button.EndIcon>\r\n          </StyledButton>\r\n        )}\r\n        <StyledTooltipModal\r\n          ref={ref}\r\n          zIndex={zIndex}\r\n          hasArrow={hasArrow}\r\n          focusOnMount={false}\r\n          placement={placement}\r\n          isAnimated={isAnimated}\r\n          popperModifiers={popperModifiers}\r\n          referenceElement={referenceElement}\r\n          onClose={closeDialog}\r\n          {...props}\r\n        >\r\n          <StyledTooltipBody>\r\n            <ColorSwatch\r\n              colors={colors}\r\n              ref={colorSwatchRef}\r\n              rowIndex={rowIndex}\r\n              colIndex={colIndex}\r\n              selectedRowIndex={selectedRowIndex}\r\n              selectedColIndex={selectedColIndex}\r\n              defaultRowIndex={uncontrolledRowIndex}\r\n              defaultColIndex={uncontrolledColIndex}\r\n              defaultSelectedRowIndex={uncontrolledSelectedRowIndex}\r\n              defaultSelectedColIndex={uncontrolledSelectedColIndex}\r\n              onChange={(rowIdx, colIdx) => {\r\n                if (isControlled === false) {\r\n                  setUncontrolledRowIndex(rowIdx);\r\n                  setUncontrolledColIndex(colIdx);\r\n                }\r\n                onChange && onChange(rowIdx, colIdx);\r\n              }}\r\n              onSelect={(rowIdx, colIdx) => {\r\n                if (isControlled === false) {\r\n                  setUncontrolledSelectedRowIndex(rowIdx);\r\n                  setUncontrolledSelectedColIndex(colIdx);\r\n                }\r\n                onSelect && onSelect(rowIdx, colIdx);\r\n              }}\r\n            />\r\n          </StyledTooltipBody>\r\n        </StyledTooltipModal>\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nColorSwatchDialog.propTypes = {\r\n  placement: PropTypes.oneOf([\r\n    'auto',\r\n    'top',\r\n    'top-start',\r\n    'top-end',\r\n    'end',\r\n    'end-top',\r\n    'end-bottom',\r\n    'bottom',\r\n    'bottom-start',\r\n    'bottom-end',\r\n    'start',\r\n    'start-top',\r\n    'start-bottom'\r\n  ]),\r\n  onChange: PropTypes.func,\r\n  onDialogChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  buttonProps: PropTypes.object\r\n};\r\n\r\nColorSwatchDialog.defaultProps = {\r\n  placement: 'bottom-start',\r\n  isAnimated: true,\r\n  zIndex: 1000,\r\n  hasArrow: false /* TooltipModal override */\r\n};\r\n\r\nColorSwatchDialog.displayName = 'ColorSwatchDialog';\r\n"],"names":[],"sourceRoot":""}