{"version":3,"file":"main.49d5c1988d214730287e.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAeA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA;AAAA;AAAA;;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AAAA;AAQA;;;AAGA;AAEA;AACA;AAAA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAFA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAGA;AAEA;AACA;AACA;AAFA","sources":["webpack://@zendeskgarden/react-components/./packages/dropdowns/src/elements/Menu/Items/Item.tsx"],"sourcesContent":["/**\r\n * Copyright Zendesk, Inc.\r\n *\r\n * Use of this source code is governed under the Apache License, Version 2.0\r\n * found at http://www.apache.org/licenses/LICENSE-2.0.\r\n */\r\n\r\nimport React, { useEffect, useRef, LiHTMLAttributes, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport mergeRefs from 'react-merge-refs';\r\nimport { StyledItem, StyledItemIcon } from '../../../styled';\r\nimport useDropdownContext from '../../../utils/useDropdownContext';\r\nimport useMenuContext from '../../../utils/useMenuContext';\r\nimport { ItemContext } from '../../../utils/useItemContext';\r\n\r\nexport interface IItemProps extends LiHTMLAttributes<HTMLLIElement> {\r\n  /** Sets the value that is returned upon selection */\r\n  value?: any;\r\n  /**\r\n   * @ignore Sets the wrapping component for the item\r\n   */\r\n  component?: any;\r\n  /** Indicates that the element is not interactive */\r\n  disabled?: boolean;\r\n  /** Applies danger styling */\r\n  isDanger?: boolean;\r\n}\r\n\r\n/**\r\n * @extends LiHTMLAttributes<HTMLLIElement>\r\n */\r\nexport const Item = React.forwardRef<HTMLLIElement, IItemProps>(\r\n  ({ value, disabled, isDanger, component = StyledItem, children, ...props }, forwardRef) => {\r\n    const {\r\n      selectedItems,\r\n      hasMenuRef,\r\n      itemSearchRegistry,\r\n      downshift: {\r\n        isOpen,\r\n        selectedItem,\r\n        highlightedIndex,\r\n        getItemProps,\r\n        setHighlightedIndex,\r\n        itemToString\r\n      }\r\n    } = useDropdownContext();\r\n    const { itemIndexRef, isCompact } = useMenuContext();\r\n    const itemRef = useRef<HTMLLIElement>();\r\n    const Component = component;\r\n\r\n    if ((value === undefined || value === null) && !disabled) {\r\n      throw new Error('All Item components require a `value` prop');\r\n    }\r\n\r\n    const currentIndex = itemIndexRef.current;\r\n    const isFocused = highlightedIndex === currentIndex;\r\n    let isSelected: boolean;\r\n\r\n    useEffect(() => {\r\n      if (!disabled && itemRef.current) {\r\n        const itemTextValue = itemRef.current!.innerText;\r\n\r\n        if (itemTextValue) {\r\n          itemSearchRegistry.current[currentIndex] = itemTextValue;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Calculate selection if provided value is an `object`\r\n    if (value) {\r\n      if (selectedItems) {\r\n        isSelected = selectedItems.some(item => {\r\n          return itemToString(item) === itemToString(value);\r\n        });\r\n      } else {\r\n        isSelected = itemToString(selectedItem) === itemToString(value);\r\n      }\r\n    } else {\r\n      isSelected = false;\r\n    }\r\n\r\n    useEffect(() => {\r\n      // Highlight selected item when Select/Autocomplete is open\r\n      if (isOpen && !disabled && !selectedItems && isSelected) {\r\n        setHighlightedIndex(currentIndex);\r\n      }\r\n    }, [currentIndex, disabled, isOpen, isSelected, selectedItems, setHighlightedIndex]);\r\n\r\n    const contextValue = useMemo(() => ({ isDisabled: disabled }), [disabled]);\r\n    const ref = mergeRefs([itemRef, forwardRef]);\r\n\r\n    if (disabled) {\r\n      return (\r\n        <ItemContext.Provider value={contextValue}>\r\n          <Component\r\n            ref={ref}\r\n            disabled={disabled}\r\n            isDanger={isDanger}\r\n            isCompact={isCompact}\r\n            {...props}\r\n          >\r\n            {isSelected && (\r\n              <StyledItemIcon isCompact={isCompact} isVisible={isSelected} isDisabled={disabled}>\r\n                <SelectedSvg />\r\n              </StyledItemIcon>\r\n            )}\r\n            {children}\r\n          </Component>\r\n        </ItemContext.Provider>\r\n      );\r\n    }\r\n\r\n    // Only increment current item index if the `Item` is not disabled\r\n    itemIndexRef.current++;\r\n\r\n    return (\r\n      <ItemContext.Provider value={contextValue}>\r\n        <Component\r\n          data-test-is-focused={isFocused}\r\n          data-test-is-selected={isSelected}\r\n          {...getItemProps({\r\n            item: value,\r\n            isFocused,\r\n            ref,\r\n            isCompact,\r\n            isDanger,\r\n            ...(hasMenuRef.current && {\r\n              role: 'menuitem',\r\n              'aria-selected': null\r\n            }),\r\n            ...props\r\n          } as any)}\r\n        >\r\n          {isSelected && (\r\n            <StyledItemIcon isCompact={isCompact} isVisible={isSelected} data-test-id=\"item-icon\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" focusable=\"false\" viewBox=\"0 0 16 16\">\r\n  <path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M1 9l4 4L15 3\"/>\r\n</svg>\r\n\r\n            </StyledItemIcon>\r\n          )}\r\n          {children}\r\n        </Component>\r\n      </ItemContext.Provider>\r\n    );\r\n  }\r\n);\r\n\r\nItem.displayName = 'Item';\r\n\r\nItem.propTypes = {\r\n  value: PropTypes.any,\r\n  disabled: PropTypes.bool\r\n};\r\n"],"names":[],"sourceRoot":""}