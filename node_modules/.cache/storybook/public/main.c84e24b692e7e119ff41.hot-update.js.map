{"version":3,"file":"main.c84e24b692e7e119ff41.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAeA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAEA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAaA","sources":["webpack://@zendeskgarden/react-components/./packages/modals/demo/stories/DrawerModalStory.tsx"],"sourcesContent":["/**\r\n * Copyright Zendesk, Inc.\r\n *\r\n * Use of this source code is governed under the Apache License, Version 2.0\r\n * found at http://www.apache.org/licenses/LICENSE-2.0.\r\n */\r\n\r\nimport React, { EventHandler, MouseEventHandler } from 'react';\r\nimport { Story } from '@storybook/react';\r\nimport { useTheme } from 'styled-components';\r\nimport { DrawerModal, IDrawerModalProps } from '@zendeskgarden/react-modals';\r\nimport { Button } from '@zendeskgarden/react-buttons';\r\nimport { IFooterItem } from './types';\r\n\r\ninterface IArgs extends IDrawerModalProps {\r\n  onClick: MouseEventHandler<HTMLElement>;\r\n  onClose: EventHandler<any>;\r\n  hasBody: boolean;\r\n  body: string;\r\n  hasClose: boolean;\r\n  hasFooter: boolean;\r\n  footerItems: IFooterItem[];\r\n  hasHeader: boolean;\r\n  header: string;\r\n}\r\n\r\nexport const DrawerModalStory: Story<IArgs> = ({\r\n  onClick,\r\n  onClose,\r\n  hasBody,\r\n  body,\r\n  hasClose,\r\n  hasFooter,\r\n  footerItems,\r\n  hasHeader,\r\n  header,\r\n  ...args\r\n}) => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={onClick}>\r\n        Open\r\n        <Button.EndIcon isRotated={theme.rtl}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" focusable=\"false\" viewBox=\"0 0 16 16\">\r\n  <path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" d=\"M1 8.5h14.5m-10-5L.9 8.1c-.2.2-.2.5 0 .7l4.6 4.6\"/>\r\n</svg>\r\n        </Button.EndIcon>\r\n      </Button>\r\n      <DrawerModal {...args} onClose={onClose}>\r\n        {hasHeader && <DrawerModal.Header>{header}</DrawerModal.Header>}\r\n        {hasBody ? <DrawerModal.Body>{body}</DrawerModal.Body> : body}\r\n        {hasFooter && (\r\n          <DrawerModal.Footer>\r\n            {footerItems.map(({ text, type }, index) => (\r\n              <DrawerModal.FooterItem key={index}>\r\n                <Button isBasic={type === 'basic'} isPrimary={type === 'primary'} onClick={onClose}>\r\n                  {text}\r\n                </Button>\r\n              </DrawerModal.FooterItem>\r\n            ))}\r\n          </DrawerModal.Footer>\r\n        )}\r\n        {hasClose && <DrawerModal.Close />}\r\n      </DrawerModal>\r\n    </>\r\n  );\r\n};\r\n"],"names":[],"sourceRoot":""}