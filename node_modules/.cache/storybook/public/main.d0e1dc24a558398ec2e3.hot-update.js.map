{"version":3,"file":"main.d0e1dc24a558398ec2e3.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;;AAEA;AACA;AAEA;AAFA;AAIA;;AAEA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAFA;AAKA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AAKA;;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAWA;AAAA;AAGA;AACA;AADA;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA","sources":["webpack://@zendeskgarden/react-components/./packages/forms/src/elements/common/Label.tsx","webpack://@zendeskgarden/react-components/./packages/forms/src/styled/radio/StyledRadioSvg.ts","webpack://@zendeskgarden/react-components/./packages/forms/src/styled/radio/circle-sm.tsx"],"sourcesContent":["/**\r\n * Copyright Zendesk, Inc.\r\n *\r\n * Use of this source code is governed under the Apache License, Version 2.0\r\n * found at http://www.apache.org/licenses/LICENSE-2.0.\r\n */\r\n\r\nimport React, { HTMLAttributes } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { composeEventHandlers } from '@zendeskgarden/container-utilities';\r\nimport useFieldContext from '../../utils/useFieldContext';\r\nimport useFieldsetContext from '../../utils/useFieldsetContext';\r\nimport useInputContext from '../../utils/useInputContext';\r\nimport {\r\n  StyledLabel,\r\n  StyledCheckLabel,\r\n  StyledCheckSvg,\r\n  StyledDashSvg,\r\n  StyledRadioLabel,\r\n  StyledRadioSvg,\r\n  StyledToggleLabel,\r\n  StyledToggleSvg\r\n} from '../../styled';\r\n\r\nexport interface ILabelProps extends HTMLAttributes<HTMLLabelElement> {\r\n  /** Applies regular (non-bold) font weight */\r\n  isRegular?: boolean;\r\n}\r\n\r\n/**\r\n * @extends LabelHTMLAttributes<HTMLLabelElement>\r\n */\r\nexport const Label = React.forwardRef<HTMLLabelElement, ILabelProps>((props, ref) => {\r\n  const fieldContext = useFieldContext();\r\n  const fieldsetContext = useFieldsetContext();\r\n  const type = useInputContext();\r\n\r\n  let combinedProps = props;\r\n\r\n  if (fieldContext) {\r\n    combinedProps = fieldContext.getLabelProps(combinedProps);\r\n\r\n    if (type === undefined) {\r\n      const { setIsLabelActive, setIsLabelHovered, multiThumbRangeRef } = fieldContext;\r\n\r\n      combinedProps = {\r\n        ...combinedProps,\r\n        onMouseUp: composeEventHandlers(props.onMouseUp, () => {\r\n          setIsLabelActive(false);\r\n        }),\r\n        onMouseDown: composeEventHandlers(props.onMouseDown, () => {\r\n          setIsLabelActive(true);\r\n        }),\r\n        onMouseEnter: composeEventHandlers(props.onMouseEnter, () => {\r\n          setIsLabelHovered(true);\r\n        }),\r\n        onMouseLeave: composeEventHandlers(props.onMouseLeave, () => {\r\n          setIsLabelHovered(false);\r\n        }),\r\n        onClick: composeEventHandlers(props.onClick, () => {\r\n          multiThumbRangeRef.current && multiThumbRangeRef.current.focus();\r\n        })\r\n      };\r\n    }\r\n  }\r\n\r\n  if (fieldsetContext) {\r\n    combinedProps = {\r\n      ...combinedProps,\r\n      isRegular: combinedProps.isRegular === undefined ? true : combinedProps.isRegular\r\n    };\r\n  }\r\n\r\n  if (type === 'radio') {\r\n    return (\r\n      <StyledRadioLabel ref={ref} {...(combinedProps as any)}>\r\n        <StyledRadioSvg />\r\n        {props.children}\r\n      </StyledRadioLabel>\r\n    );\r\n  } else if (type === 'checkbox') {\r\n    /**\r\n     * `onLabelSelect` is a workaround for checkbox label `shift + click` bug in Firefox\r\n     * See: https://bugzilla.mozilla.org/show_bug.cgi?id=559506\r\n     */\r\n    const onLabelSelect = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n      const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\r\n\r\n      if (fieldContext && isFirefox && e.target instanceof Element) {\r\n        const inputId = e.target.getAttribute('for');\r\n\r\n        if (!inputId) return;\r\n\r\n        const input = document.getElementById(inputId) as HTMLInputElement | null;\r\n\r\n        if (input && input.type === 'checkbox') {\r\n          if (e.shiftKey) {\r\n            input.click();\r\n            input.checked = true;\r\n          }\r\n          input.focus();\r\n        }\r\n      }\r\n    };\r\n\r\n    combinedProps = {\r\n      ...combinedProps,\r\n      onClick: composeEventHandlers(combinedProps.onClick, onLabelSelect)\r\n    };\r\n\r\n    return (\r\n      <StyledCheckLabel ref={ref} {...(combinedProps as any)}>\r\n        <StyledCheckSvg />\r\n        <StyledDashSvg />\r\n        {props.children}\r\n      </StyledCheckLabel>\r\n    );\r\n  } else if (type === 'toggle') {\r\n    return (\r\n      <StyledToggleLabel ref={ref} {...(combinedProps as any)}>\r\n        <StyledToggleSvg />\r\n        {props.children}\r\n      </StyledToggleLabel>\r\n    );\r\n  }\r\n\r\n  return <StyledLabel ref={ref} {...(combinedProps as any)} />;\r\n});\r\n\r\nLabel.displayName = 'Label';\r\n\r\nLabel.propTypes = {\r\n  isRegular: PropTypes.bool\r\n};\r\n","/**\r\n * Copyright Zendesk, Inc.\r\n *\r\n * Use of this source code is governed under the Apache License, Version 2.0\r\n * found at http://www.apache.org/licenses/LICENSE-2.0.\r\n */\r\n\r\nimport styled from 'styled-components';\r\nimport { retrieveComponentStyles, DEFAULT_THEME } from '@zendeskgarden/react-theming';\r\nimport { StyledRadioInput } from './StyledRadioInput';\r\nimport { StyledRadioLabel } from './StyledRadioLabel';\r\nimport { CircleIcon } from './circle-sm';\r\n\r\nconst COMPONENT_ID = 'forms.radio_svg';\r\n\r\nexport const StyledRadioSvg = styled(CircleIcon).attrs({\r\n  'data-garden-id': COMPONENT_ID,\r\n  'data-garden-version': PACKAGE_VERSION\r\n})`\r\n  transition: opacity 0.25 ease-in-out;\r\n  opacity: 0;\r\n\r\n  ${StyledRadioInput}:checked ~ ${StyledRadioLabel} > & {\r\n    opacity: 1;\r\n  }\r\n\r\n  ${props => retrieveComponentStyles(COMPONENT_ID, props)};\r\n`;\r\n\r\nStyledRadioSvg.defaultProps = {\r\n  theme: DEFAULT_THEME\r\n};\r\n","import * as React from 'react';\r\nexport const CircleIcon = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" focusable=\"false\" viewBox=\"0 0 16 16\">\r\n  <circle cx=\"8\" cy=\"8\" r=\"6\" fill=\"currentColor\"/>\r\n</svg>\r\n\r\n    )\r\n}"],"names":[],"sourceRoot":""}