/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

import { useSelection } from '@zendeskgarden/container-selection';
import React from 'react';
import PropTypes from 'prop-types';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

var _excluded$1 = ["role"],
    _excluded2 = ["ariaLabel", "role"],
    _excluded3 = ["ariaLabel", "role"],
    _excluded4 = ["ariaLabel", "page", "current", "role"];
function usePagination(options) {
  var _useSelection = useSelection(options),
      selectedItem = _useSelection.selectedItem,
      focusedItem = _useSelection.focusedItem,
      getControlledContainerProps = _useSelection.getContainerProps,
      getItemProps = _useSelection.getItemProps;
  var _getContainerProps = function getContainerProps(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        _ref$role = _ref.role,
        role = _ref$role === void 0 ? 'list' : _ref$role,
        other = _objectWithoutPropertiesLoose(_ref, _excluded$1);
    return _extends({
      role: role,
      'data-garden-container-id': 'containers.pagination',
      'data-garden-container-version': '0.3.15'
    }, other);
  };
  var _getPreviousPageProps = function getPreviousPageProps(_temp2) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2,
        ariaLabel = _ref2.ariaLabel,
        _ref2$role = _ref2.role,
        role = _ref2$role === void 0 ? 'listitem' : _ref2$role,
        props = _objectWithoutPropertiesLoose(_ref2, _excluded2);
    return _extends({
      selectedAriaKey: null,
      role: role,
      'aria-label': ariaLabel || 'Previous Page'
    }, props);
  };
  var _getNextPageProps = function getNextPageProps(_temp3) {
    var _ref3 = _temp3 === void 0 ? {} : _temp3,
        ariaLabel = _ref3.ariaLabel,
        _ref3$role = _ref3.role,
        role = _ref3$role === void 0 ? 'listitem' : _ref3$role,
        props = _objectWithoutPropertiesLoose(_ref3, _excluded3);
    return _extends({
      selectedAriaKey: null,
      role: role,
      'aria-label': ariaLabel || 'Next Page'
    }, props);
  };
  var _getPageProps = function getPageProps(_temp4) {
    var _ref4 = _temp4 === void 0 ? {} : _temp4,
        ariaLabel = _ref4.ariaLabel,
        page = _ref4.page,
        current = _ref4.current,
        _ref4$role = _ref4.role,
        role = _ref4$role === void 0 ? 'listitem' : _ref4$role,
        other = _objectWithoutPropertiesLoose(_ref4, _excluded4);
    var ariaLabelText = "Page " + page;
    if (current && !ariaLabel) {
      ariaLabelText = "Current page, Page " + page;
    }
    return _extends({
      selectedAriaKey: 'aria-current',
      role: role,
      'aria-label': ariaLabel || ariaLabelText
    }, other);
  };
  return {
    selectedItem: selectedItem,
    focusedItem: focusedItem,
    getContainerProps: function getContainerProps(props) {
      return getControlledContainerProps(_getContainerProps(props));
    },
    getPageProps: function getPageProps(props) {
      return getItemProps(_getPageProps(props), 'getPageProps');
    },
    getPreviousPageProps: function getPreviousPageProps(props) {
      return getItemProps(_getPreviousPageProps(props), 'getPreviousPageProps');
    },
    getNextPageProps: function getNextPageProps(props) {
      return getItemProps(_getNextPageProps(props), 'getNextPageProps');
    }
  };
}

var _excluded = ["children", "render"];
var PaginationContainer = function PaginationContainer(_ref) {
  var children = _ref.children,
      _ref$render = _ref.render,
      render = _ref$render === void 0 ? children : _ref$render,
      options = _objectWithoutPropertiesLoose(_ref, _excluded);
  return React.createElement(React.Fragment, null, render(usePagination(options)));
};
PaginationContainer.propTypes = {
  children: PropTypes.func,
  render: PropTypes.func,
  focusedItem: PropTypes.any,
  selectedItem: PropTypes.any,
  onSelect: PropTypes.func,
  onFocus: PropTypes.func
};

export { PaginationContainer, usePagination };
