"use strict";
/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const commander_1 = require("commander");
const utils_1 = require("../../utils");
const execa_1 = __importDefault(require("execa"));
/**
 * Execute the `netlify-token` command.
 *
 * @param {Ora} [spinner] Terminal spinner.
 *
 * @returns {Promise<string>} The token provided by the `NETLIFY_TOKEN`
 * environment variable or the value of the `netlify.token` git configuration
 * option.
 */
const execute = async (spinner) => {
    let retVal = process.env.NETLIFY_TOKEN;
    if (!retVal) {
        try {
            const token = await (0, execa_1.default)('git', ['config', '--get', 'netlify.token']);
            retVal = token.stdout.toString();
        }
        catch (error) {
            (0, utils_1.handleErrorMessage)(error, 'netlify-token', spinner);
            throw error;
        }
    }
    return retVal;
};
exports.execute = execute;
exports.default = (spinner) => {
    const command = new commander_1.Command('netlify-token');
    return command
        .description('output Netlify personal access token')
        .option('--no-mask', 'display unobscured token')
        .action(async () => {
        try {
            spinner.start();
            const token = await (0, exports.execute)(spinner);
            if (token) {
                (0, utils_1.handleSuccessMessage)(command.opts().mask ? `${token.slice(0, 4)}......${token.slice(-4)}` : token, spinner);
            }
            else {
                throw new Error();
            }
        }
        catch {
            spinner.fail('Netlify token not found');
            process.exitCode = 1;
        }
        finally {
            spinner.stop();
        }
    });
};
