"use strict";
/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const commander_1 = require("commander");
const __1 = require("..");
const utils_1 = require("../../utils");
const execa_1 = __importDefault(require("execa"));
/**
 * Execute the `netlify-deploy` command.
 *
 * @param {string} args.dir Folder to deploy.
 * @param {boolean} [args.production] Determine whether this is a production deploy.
 * @param {string} [args.message] Deploy message.
 * @param {string} [args.token] Netlify personal access token.
 * @param {string} [args.siteId] Netlify site API ID.
 * @param {Ora} [args.spinner] Terminal spinner.
 *
 * @returns {object} The Netlify deployment and log URLs.
 */
const execute = async (args) => {
    let retVal;
    try {
        const siteId = args.siteId || (await (0, __1.siteId)(args.spinner));
        const token = args.token || (await (0, __1.token)(args.spinner));
        const deployArgs = [
            'deploy',
            `--site=${siteId}`,
            `--auth=${token}`,
            `--dir=${args.dir}`,
            '--json'
        ];
        if (args.production) {
            deployArgs.push('--prod');
        }
        if (args.message) {
            deployArgs.push(`--message=${args.message}`);
        }
        /* https://cli.netlify.com/commands/deploy */
        const deploy = await (0, execa_1.default)('netlify', deployArgs, { preferLocal: true });
        const response = JSON.parse(deploy.stdout);
        const url = args.production ? response.url : response.deploy_url;
        retVal = { url, logUrl: response.logs };
    }
    catch (error) {
        (0, utils_1.handleErrorMessage)(error, 'netlify-deploy', args.spinner);
        throw error;
    }
    return retVal;
};
exports.execute = execute;
exports.default = (spinner) => {
    const command = new commander_1.Command('netlify-deploy');
    return command
        .description('deploy to a Netlify site')
        .argument('<dir>', 'directory of content to deploy')
        .option('-p, --production', 'production deploy')
        .option('-i, --id <id>', 'site API ID')
        .option('-t, --token <token>', 'access token')
        .option('-m, --message <message>', 'deploy message')
        .action(async (dir) => {
        try {
            spinner.start();
            const options = command.opts();
            const result = await (0, exports.execute)({
                dir,
                production: options.production,
                token: options.token,
                siteId: options.id,
                message: options.message,
                spinner
            });
            if (result) {
                (0, utils_1.handleSuccessMessage)(result.url, spinner);
            }
            else {
                throw new Error();
            }
        }
        catch {
            spinner.fail(`Unable to deploy ${dir}`);
            process.exitCode = 1;
        }
        finally {
            spinner.stop();
        }
    });
};
