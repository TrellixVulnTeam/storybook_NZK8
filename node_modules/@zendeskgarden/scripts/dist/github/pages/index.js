"use strict";
/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const gh_pages_1 = require("gh-pages");
const commander_1 = require("commander");
const __1 = require("..");
const utils_1 = require("../../utils");
const execa_1 = __importDefault(require("execa"));
/**
 * Execute the `github-pages` command.
 *
 * @param {string} args.dir Folder to publish.
 * @param {string} [args.path] Path to a git directory.
 * @param {string} [args.message] Commit message.
 * @param {string} [args.token] GitHub personal access token.
 * @param {Ora} [args.spinner] Terminal spinner.
 *
 * @returns {Promise<string>} The GitHub pages URL.
 */
const execute = async (args) => {
    let retVal;
    try {
        const token = args.token || (await (0, __1.token)(args.spinner));
        const repository = await (0, __1.repository)(args.path || args.dir, args.spinner);
        const message = args.message || 'Updates [skip ci]';
        if (token && repository) {
            const { owner, repo } = repository;
            let name;
            let email;
            try {
                name = (await (0, execa_1.default)('git', ['config', 'user.name'])).stdout.toString();
                email = (await (0, execa_1.default)('git', ['config', 'user.email'])).stdout.toString();
            }
            catch {
                name = 'Zendesk Garden';
                email = 'garden@zendesk.com';
            }
            (0, gh_pages_1.clean)();
            (0, gh_pages_1.publish)(args.dir, {
                repo: `https://${token}@github.com/${owner}/${repo}.git`,
                user: {
                    name,
                    email
                },
                message,
                silent: true
            }, error => {
                if (error) {
                    (0, utils_1.handleErrorMessage)(error, 'github-pages', args.spinner);
                }
                else {
                    retVal = `https://${owner}.github.io/${repo}/`;
                }
            });
        }
        else {
            throw new Error('Invalid git repository');
        }
    }
    catch (error) {
        (0, utils_1.handleErrorMessage)(error, 'github-pages', args.spinner);
        throw error;
    }
    return retVal;
};
exports.execute = execute;
exports.default = (spinner) => {
    const command = new commander_1.Command('github-pages');
    return command
        .description('publish to a GitHub "gh-pages" branch')
        .argument('<dir>', 'directory of web content to publish')
        .option('-p, --path <path>', 'git directory')
        .option('-t, --token <token>', 'access token')
        .option('-m, --message <message>', 'commit message')
        .action(async (dir) => {
        try {
            spinner.start();
            const options = command.opts();
            const url = await (0, exports.execute)({
                dir,
                path: options.path,
                message: options.message,
                token: options.token,
                spinner
            });
            if (url) {
                (0, utils_1.handleSuccessMessage)(url, spinner);
            }
            else {
                throw new Error();
            }
        }
        catch {
            spinner.fail(`Unable to publish '${dir}'`);
            process.exitCode = 1;
        }
        finally {
            spinner.stop();
        }
    });
};
