"use strict";
/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const commander_1 = require("commander");
const __1 = require("..");
const utils_1 = require("../../utils");
const rest_1 = require("@octokit/rest");
/**
 * Execute the `github-release` command.
 *
 * @param {string} args.tag Tag name.
 * @param {string} args.body Body markdown content.
 * @param {boolean} [args.published] Determine if the release is published or draft.
 * @param {string} [args.path] Path to a git directory.
 * @param {string} [args.token] GitHub personal access token.
 * @param {string} [args.spinner] Terminal spinner.
 *
 * @returns {Promise<string>} The GitHub release URL.
 */
const execute = async (args) => {
    let retVal;
    try {
        const auth = args.token || (await (0, __1.token)(args.spinner));
        const github = new rest_1.Octokit({ auth });
        const repository = (await (0, __1.repository)(args.path, args.spinner));
        /* https://octokit.github.io/rest.js/v17#repos-create-release */
        const release = await github.repos.createRelease({
            owner: repository.owner,
            repo: repository.repo,
            tag_name: args.tag,
            body: args.body,
            draft: !args.published
        });
        const url = release.data.html_url;
        retVal = args.published ? url : url.replace('/tag/', '/edit/');
    }
    catch (error) {
        (0, utils_1.handleErrorMessage)(error, 'github-release', args.spinner);
        throw error;
    }
    return retVal;
};
exports.execute = execute;
exports.default = (spinner) => {
    const command = new commander_1.Command('github-release');
    return command
        .description('create a GitHub release')
        .argument('<markdown>', 'markdown content')
        .requiredOption('-t, --tag <tag>', 'tag name')
        .option('-p, --published', 'published (non-draft) release')
        .option('-d, --path <path>', 'git directory')
        .option('-a, --token <token>', 'access token')
        .action(async (markdown) => {
        try {
            spinner.start();
            const options = command.opts();
            const release = await (0, exports.execute)({
                tag: options.tag,
                body: markdown,
                published: options.published,
                path: options.path,
                token: options.token,
                spinner
            });
            if (release) {
                (0, utils_1.handleSuccessMessage)(release, spinner);
            }
            else {
                throw new Error();
            }
        }
        catch {
            spinner.fail('Unable to release');
            process.exitCode = 1;
        }
        finally {
            spinner.stop();
        }
    });
};
