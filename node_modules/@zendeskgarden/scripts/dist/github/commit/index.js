"use strict";
/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const commander_1 = require("commander");
const __1 = require("..");
const utils_1 = require("../../utils");
const rest_1 = require("@octokit/rest");
/**
 * Execute the `github-commit` command.
 *
 * @param {string} [args.path] Path to a git directory.
 * @param {string} [args.token] GitHub personal access token.
 * @param {string} [args.branch] GitHub branch.
 * @param {string} [args.spinner] Terminal spinner.
 *
 * @returns {Promise<string>} The latest commit SHA provided by a CI
 * environment variable or remote GitHub commits for the given git repository.
 */
const execute = async (args = {}) => {
    let retVal = process.env.CIRCLE_SHA1 || process.env.TRAVIS_PULL_REQUEST_SHA || process.env.TRAVIS_COMMIT;
    if (!retVal) {
        try {
            const auth = args.token || (await (0, __1.token)(args.spinner));
            const github = new rest_1.Octokit({ auth });
            const repository = (await (0, __1.repository)(args.path, args.spinner));
            const sha = args.branch || (await (0, __1.branch)(args.path, args.spinner));
            /* https://octokit.github.io/rest.js/v17#repos-list-commits */
            const commits = await github.repos.listCommits({
                owner: repository.owner,
                repo: repository.repo,
                sha
            });
            /* eslint-disable-next-line @typescript-eslint/no-unnecessary-condition */
            if (commits && commits.data) {
                retVal = commits.data[0].sha || undefined;
            }
        }
        catch (error /* eslint-disable-line @typescript-eslint/no-implicit-any-catch */) {
            if (error.status !== 404) {
                (0, utils_1.handleErrorMessage)(error, 'github-commit', args.spinner);
                throw error;
            }
        }
    }
    return retVal;
};
exports.execute = execute;
exports.default = (spinner) => {
    const command = new commander_1.Command('github-commit');
    return command
        .description('output latest GitHub commit SHA for the repo branch')
        .arguments('[path]')
        .option('-b, --branch <branch>', 'GitHub branch name')
        .option('-t, --token <token>', 'access token')
        .action(async (path) => {
        try {
            spinner.start();
            const options = command.opts();
            const commit = await (0, exports.execute)({
                path,
                branch: options.branch,
                token: options.token,
                spinner
            });
            if (commit) {
                (0, utils_1.handleSuccessMessage)(commit, spinner);
            }
            else {
                throw new Error();
            }
        }
        catch {
            spinner.fail('Commit not found');
            process.exitCode = 1;
        }
        finally {
            spinner.stop();
        }
    });
};
