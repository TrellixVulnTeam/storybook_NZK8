"use strict";
/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const commander_1 = require("commander");
const __1 = require("..");
const utils_1 = require("../../utils");
const rest_1 = require("@octokit/rest");
const execa_1 = __importDefault(require("execa"));
/**
 * Execute the `github-deploy` command.
 *
 * @param {function} args.command Deployment command to execute.
 * @param {string} [args.path] Path to a git directory.
 * @param {boolean} [args.production] Determine whether this is a production deployment.
 * @param {string} [args.token] GitHub personal access token.
 * @param {string} [args.ref] GitHub ref (commit SHA, branch, tag).
 * @param {string} [args.message] Deployment message.
 * @param {Ora} [args.spinner] Terminal spinner.
 *
 * @returns {Promise<string>} The result of the deployment command.
 */
const execute = async (args) => {
    let retVal;
    try {
        const auth = args.token || (await (0, __1.token)(args.spinner));
        const github = new rest_1.Octokit({ auth });
        const repository = (await (0, __1.repository)(args.path, args.spinner));
        const ref = (args.ref || (await (0, __1.commit)({ ...args })));
        const environment = args.production ? 'production' : 'staging';
        /* https://octokit.github.io/rest.js/v17#repos-create-deployment */
        const deployment = await github.repos.createDeployment({
            owner: repository.owner,
            repo: repository.repo,
            ref,
            environment,
            description: args.message,
            auto_merge: false,
            required_contexts: [],
            transient_environment: environment !== 'production'
        });
        let result;
        let error;
        try {
            result = await args.command();
        }
        catch (err) {
            error = err;
        }
        /* https://octokit.github.io/rest.js/v17#repos-create-deployment-status */
        await github.repos.createDeploymentStatus({
            owner: repository.owner,
            repo: repository.repo,
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            deployment_id: deployment.data.id,
            state: error ? 'error' : 'success',
            environment_url: typeof result === 'object' ? result.url : result,
            log_url: typeof result === 'object' ? result.logUrl : undefined,
            environment,
            description: args.message
        });
        if (error) {
            throw error;
        }
        retVal = typeof result === 'object' ? result.url : result;
    }
    catch (error) {
        (0, utils_1.handleErrorMessage)(error, 'github-deploy', args.spinner);
        throw error;
    }
    return retVal;
};
exports.execute = execute;
exports.default = (spinner) => {
    const command = new commander_1.Command('github-deploy');
    return command
        .description('execute a GitHub deployment based on a <command> that outputs a URL')
        .argument('<command>', 'deployment command to execute')
        .argument('[args...]', 'deployment command arguments')
        .option('-p, --production', 'production deployment')
        .option('-d, --path <path>', 'git directory')
        .option('-c, --commit <commit>', 'GitHub commit SHA')
        .option('-t, --token <token>', 'access token')
        .option('-m, --message <message>', 'deployment message')
        .action(async (subcommand, args) => {
        try {
            spinner.start();
            const options = command.opts();
            const url = await (0, exports.execute)({
                command: async () => {
                    let retVal;
                    try {
                        const result = await (0, execa_1.default)(subcommand, args);
                        retVal = result.stdout.toString();
                    }
                    catch (error) {
                        (0, utils_1.handleErrorMessage)(error, subcommand, spinner);
                        throw error;
                    }
                    return retVal;
                },
                path: options.path,
                production: options.production,
                token: options.token,
                ref: options.commit,
                message: options.message,
                spinner
            });
            if (url) {
                (0, utils_1.handleSuccessMessage)(url, spinner);
            }
            else {
                throw new Error();
            }
        }
        catch {
            const cmd = args.length > 0 ? `${subcommand} ${args.join(' ')}` : subcommand;
            spinner.fail(`Unable to deploy '${cmd}'`);
            process.exitCode = 1;
        }
        finally {
            spinner.stop();
        }
    });
};
