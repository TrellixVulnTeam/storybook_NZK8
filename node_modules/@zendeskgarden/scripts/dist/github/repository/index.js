"use strict";
/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const commander_1 = require("commander");
const utils_1 = require("../../utils");
const execa_1 = __importDefault(require("execa"));
/**
 * Execute the `github-repository` command.
 *
 * @param {string} [path] Path to a git directory.
 * @param {Ora} [spinner] Terminal spinner.
 *
 * @returns {Promise<object>} The repository {owner, name} provided by CI
 * environment variables or extracted from the given git repository.
 */
const execute = async (path, spinner) => {
    let retVal;
    if (process.env.TRAVIS_REPO_SLUG) {
        const [owner, repo] = process.env.TRAVIS_REPO_SLUG.split('/');
        retVal = { owner, repo };
    }
    else if (process.env.CIRCLECI) {
        const owner = process.env.CIRCLE_PROJECT_USERNAME;
        const repo = process.env.CIRCLE_PROJECT_REPONAME;
        retVal = { owner, repo };
    }
    if (!retVal) {
        const lsRemoteArgs = ['ls-remote', '--get-url'];
        if (path) {
            lsRemoteArgs.unshift('-C', path);
        }
        try {
            const remote = await (0, execa_1.default)('git', lsRemoteArgs);
            const regexp = /^.+github\.com[/:](?<owner>[\w-]+)\/(?<repo>[\w.-]+)\.git$/u;
            /* eslint-disable-next-line @typescript-eslint/prefer-regexp-exec */
            const match = remote.stdout.match(regexp);
            if (match && match.groups) {
                const owner = match.groups.owner;
                const repo = match.groups.repo;
                retVal = { owner, repo };
            }
            else {
                (0, utils_1.handleErrorMessage)(`Unexpected remote URL: ${remote.stdout}`, 'github-repository', spinner);
            }
        }
        catch (error) {
            (0, utils_1.handleErrorMessage)(error, 'github-repository', spinner);
            throw error;
        }
    }
    return retVal;
};
exports.execute = execute;
exports.default = (spinner) => {
    const command = new commander_1.Command('github-repository');
    return command
        .description('output GitHub repository name for the repo')
        .arguments('[path]')
        .action(async (path) => {
        try {
            spinner.start();
            const repository = await (0, exports.execute)(path, spinner);
            if (repository) {
                (0, utils_1.handleSuccessMessage)(`${repository.owner}/${repository.repo}`, spinner);
            }
            else {
                throw new Error();
            }
        }
        catch {
            spinner.fail('GitHub repository not found');
            process.exitCode = 1;
        }
        finally {
            spinner.stop();
        }
    });
};
