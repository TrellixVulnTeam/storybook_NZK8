/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

import * as React from 'react';
import React__default, { Children, createContext, useContext, useMemo } from 'react';
import PropTypes from 'prop-types';
import styled, { css } from 'styled-components';
import { retrieveComponentStyles, DEFAULT_THEME, getColor } from '@zendeskgarden/react-theming';
import { math, rgba, em } from 'polished';
import { useButtonGroup } from '@zendeskgarden/container-buttongroup';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends$2() {
  _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$2.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var COMPONENT_ID$5 = 'buttons.button_group_view';
var StyledButtonGroup = styled.div.attrs({
  'data-garden-id': COMPONENT_ID$5,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledButtonGroup",
  componentId: "sc-1fbpzef-0"
})(["display:inline-flex;position:relative;z-index:0;direction:", ";white-space:nowrap;:focus{outline:none;}", ";"], function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$5, props);
});
StyledButtonGroup.defaultProps = {
  theme: DEFAULT_THEME
};

var _excluded$6 = ["children", "isRotated", "theme"];
var COMPONENT_ID$4 = 'buttons.icon';
var sizeStyles$1 = function sizeStyles(props) {
  var marginProperty;
  if (props.position === 'start') {
    marginProperty = "margin-".concat(props.theme.rtl ? 'left' : 'right');
  } else if (props.position === 'end') {
    marginProperty = "margin-".concat(props.theme.rtl ? 'right' : 'left');
  }
  return marginProperty && css(["", ":", "px;"], marginProperty, props.theme.space.base * 2);
};
var StyledIcon = styled(function (_ref) {
  var children = _ref.children;
      _ref.isRotated;
      _ref.theme;
      var props = _objectWithoutProperties(_ref, _excluded$6);
  return React__default.cloneElement(Children.only(children), props);
}).attrs({
  'data-garden-id': COMPONENT_ID$4,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledIcon",
  componentId: "sc-19meqgg-0"
})(["transform:", ";transition:transform 0.25s ease-in-out,color 0.25s ease-in-out;", ";", ";"], function (props) {
  return props.isRotated && "rotate(".concat(props.theme.rtl ? '-' : '+', "180deg)");
}, function (props) {
  return sizeStyles$1(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$4, props);
});
StyledIcon.defaultProps = {
  theme: DEFAULT_THEME
};

var COMPONENT_ID$3 = 'buttons.button';
var SIZE = {
  SMALL: 'small',
  MEDIUM: 'medium',
  LARGE: 'large'
};
var getBorderRadius = function getBorderRadius(props) {
  if (props.isLink) {
    return 0;
  } else if (props.isPill) {
    return '100px';
  }
  return props.theme.borderRadii.md;
};
var getDisabledBackgroundColor = function getDisabledBackgroundColor(props) {
  return getColor('neutralHue', 200, props.theme);
};
var getHeight = function getHeight(props) {
  if (props.size === SIZE.SMALL) {
    return "".concat(props.theme.space.base * 8, "px");
  } else if (props.size === SIZE.LARGE) {
    return "".concat(props.theme.space.base * 12, "px");
  }
  return "".concat(props.theme.space.base * 10, "px");
};
var colorStyles = function colorStyles(props) {
  var retVal;
  var hue;
  if (props.disabled || props.isNeutral && (props.isPrimary || props.isSelected) && !props.isDanger) {
    hue = 'neutralHue';
  } else if (props.isDanger) {
    hue = 'dangerHue';
  } else {
    hue = 'primaryHue';
  }
  var shade = 600;
  var baseColor = getColor(hue, shade, props.theme);
  var hoverColor = getColor(hue, shade + 100, props.theme);
  var activeColor = getColor(hue, shade + 200, props.theme);
  var disabledBackgroundColor = getDisabledBackgroundColor(props);
  var disabledForegroundColor = getColor(hue, shade - 200, props.theme);
  var boxShadowColor = props.focusInset && (props.isPrimary || props.isSelected) ? props.theme.palette.white : baseColor;
  var boxShadow = "\n    ".concat(props.focusInset ? 'inset' : '', "\n    ").concat(props.theme.shadows.md(rgba(boxShadowColor, 0.35)));
  if (props.isLink) {
    retVal = css(["background-color:transparent;color:", ";&:focus{color:", ";}&:hover,&[data-garden-focus-visible]{color:", ";}&:active,&[aria-pressed='true'],&[aria-pressed='mixed']{color:", ";}&:disabled{color:", ";}"], baseColor, baseColor, hoverColor, activeColor, disabledForegroundColor);
  } else if (props.isPrimary || props.isSelected) {
    retVal = css(["background-color:", ";color:", ";&:hover{background-color:", ";}&[data-garden-focus-visible]{box-shadow:", ";}&:active{background-color:", ";}&[aria-pressed='true'],&[aria-pressed='mixed']{background-color:", ";}&:disabled{background-color:", ";color:", ";}"], props.isPrimary && props.isSelected ? activeColor : baseColor, props.theme.palette.white, hoverColor, boxShadow, activeColor, props.isPrimary && activeColor, disabledBackgroundColor, disabledForegroundColor);
  } else {
    var borderColor = props.isNeutral && !props.isDanger ? getColor('neutralHue', 300, props.theme) : baseColor;
    var foregroundColor = props.isNeutral ? props.theme.colors.foreground : baseColor;
    var hoverBorderColor = props.isNeutral && !props.isDanger ? baseColor : hoverColor;
    var hoverForegroundColor = props.isNeutral ? foregroundColor : hoverColor;
    retVal = css(["border-color:", ";background-color:transparent;color:", ";&:hover{border-color:", ";background-color:", ";color:", ";}&[data-garden-focus-visible]{border-color:", ";box-shadow:", ";}&:active,&[aria-pressed='true'],&[aria-pressed='mixed']{border-color:", ";background-color:", ";color:", ";}&:disabled{border-color:transparent;background-color:", ";color:", ";}& ", "{color:", ";}&:hover ", ",&[data-garden-focus-visible] ", "{color:", ";}&:active ", "{color:", ";}&:disabled ", "{color:", ";}"], !props.isBasic && borderColor, foregroundColor, !props.isBasic && hoverBorderColor, rgba(baseColor, 0.08), hoverForegroundColor, props.isNeutral && baseColor, boxShadow, !props.isBasic && activeColor, rgba(baseColor, 0.2), !props.isNeutral && activeColor, disabledBackgroundColor, disabledForegroundColor, StyledIcon, props.isNeutral && getColor('neutralHue', shade, props.theme), StyledIcon, StyledIcon, props.isNeutral && getColor('neutralHue', shade + 100, props.theme), StyledIcon, props.isNeutral && foregroundColor, StyledIcon, disabledForegroundColor);
  }
  return retVal;
};
var groupStyles = function groupStyles(props) {
  var isPrimary = props.isPrimary;
  var rtl = props.theme.rtl;
  var lightBorderColor = props.theme.colors.background;
  var disabledBackgroundColor = getDisabledBackgroundColor(props);
  return css(["position:relative;margin-", ":", ";border-top-width:", ";border-bottom-width:", ";border-right-color:", ";border-left-color:", ";&:hover,&[data-garden-focus-visible],&:active{z-index:1;}&:disabled{z-index:-1;border-top-width:0;border-bottom-width:0;border-right-color:", ";border-left-color:", ";background-color:", ";}&:first-of-type:not(:last-of-type){margin-", ":0;border-top-", "-radius:0;border-bottom-", "-radius:0;border-", "-width:", ";}&:last-of-type:not(:first-of-type){border-top-", "-radius:0;border-bottom-", "-radius:0;border-", "-width:", ";}&:not(:first-of-type):not(:last-of-type){border-radius:0;}&:first-of-type:not(:last-of-type) ", "{margin-", ":", ";}&:last-of-type:not(:first-of-type) ", "{margin-", ":", ";}"], rtl ? 'right' : 'left', math("".concat(props.theme.borderWidths.sm, " * -1")), isPrimary && 0, isPrimary && 0, isPrimary && lightBorderColor, isPrimary && lightBorderColor, lightBorderColor, lightBorderColor, !isPrimary && disabledBackgroundColor, rtl ? 'right' : 'left', rtl ? 'left' : 'right', rtl ? 'left' : 'right', rtl ? 'right' : 'left', isPrimary && 0, rtl ? 'right' : 'left', rtl ? 'right' : 'left', rtl ? 'left' : 'right', isPrimary && 0, StyledIcon, rtl ? 'left' : 'right', props.isPill && '-2px', StyledIcon, rtl ? 'right' : 'left', props.isPill && '-2px');
};
var iconStyles$1 = function iconStyles(props) {
  var size = props.size === 'small' ? props.theme.iconSizes.sm : props.theme.iconSizes.md;
  return css(["width:", ";min-width:", ";height:", ";vertical-align:", ";"], size, size, size, props.isLink && 'middle');
};
var sizeStyles = function sizeStyles(props) {
  var retVal;
  if (props.isLink) {
    retVal = css(["padding:0;font-size:inherit;"]);
  } else {
    var height = getHeight(props);
    var lineHeight = math("".concat(height, " - (").concat(props.theme.borderWidths.sm, " * 2)"));
    var padding;
    var fontSize;
    if (props.size === SIZE.SMALL) {
      fontSize = props.theme.fontSizes.sm;
      padding = "".concat(props.theme.space.base * 3, "px");
    } else {
      fontSize = props.theme.fontSizes.md;
      if (props.size === SIZE.LARGE) {
        padding = "".concat(props.theme.space.base * 5, "px");
      } else {
        padding = "".concat(props.theme.space.base * 4, "px");
      }
    }
    retVal = css(["padding:0 ", ";height:", ";line-height:", ";font-size:", ";"], em(math("".concat(padding, " - ").concat(props.theme.borderWidths.sm)), fontSize), height, lineHeight, fontSize);
  }
  return retVal;
};
var StyledButton = styled.button.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$3,
    'data-garden-version': '8.47.1',
    type: props.type || 'button'
  };
}).withConfig({
  displayName: "StyledButton",
  componentId: "sc-qe3ace-0"
})(["display:", ";align-items:", ";justify-content:", ";transition:border-color 0.25s ease-in-out,box-shadow 0.1s ease-in-out,background-color 0.25s ease-in-out,color 0.25s ease-in-out,z-index 0.25s ease-in-out;margin:0;border:", ";border-radius:", ";cursor:pointer;width:", ";overflow:hidden;text-decoration:none;text-overflow:ellipsis;white-space:", ";font-family:inherit;font-weight:", ";-webkit-font-smoothing:subpixel-antialiased;box-sizing:border-box;user-select:", ";-webkit-touch-callout:none;", ";&::-moz-focus-inner{border:0;padding:0;}&:focus{outline:none;text-decoration:", ";}&:hover{text-decoration:", ";}&[data-garden-focus-visible]{text-decoration:", ";}&:active,&[aria-pressed='true'],&[aria-pressed='mixed']{transition:border-color 0.1s ease-in-out,background-color 0.1s ease-in-out,color 0.1s ease-in-out,z-index 0.25s ease-in-out;text-decoration:", ";}", ";&:disabled{cursor:default;text-decoration:", ";}& ", "{", "}", " &{", ";}", ";"], function (props) {
  return props.isLink ? 'inline' : 'inline-flex';
}, function (props) {
  return !props.isLink && 'center';
}, function (props) {
  return !props.isLink && 'center';
}, function (props) {
  return props.isLink ? 'none' : "".concat(props.theme.borders.sm, " transparent");
}, function (props) {
  return getBorderRadius(props);
}, function (props) {
  return props.isStretched ? '100%' : '';
}, function (props) {
  return !props.isLink && 'nowrap';
}, function (props) {
  return props.isLink ? 'inherit' : props.theme.fontWeights.regular;
}, function (props) {
  return !props.isLink && 'none';
}, function (props) {
  return sizeStyles(props);
}, function (props) {
  return props.isLink && 'none';
}, function (props) {
  return props.isLink ? 'underline' : 'none';
}, function (props) {
  return props.isLink ? 'underline' : 'none';
}, function (props) {
  return props.isLink ? 'underline' : 'none';
}, function (props) {
  return colorStyles(props);
}, function (props) {
  return props.isLink && 'none';
}, StyledIcon, function (props) {
  return iconStyles$1(props);
}, StyledButtonGroup, function (props) {
  return groupStyles(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$3, props);
});
StyledButton.defaultProps = {
  theme: DEFAULT_THEME
};

var COMPONENT_ID$2 = 'buttons.anchor';
var StyledAnchor = styled(StyledButton).attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$2,
    'data-garden-version': '8.47.1',
    as: 'a',
    dir: props.theme.rtl ? 'rtl' : undefined,
    isLink: true,
    type: undefined
  };
}).withConfig({
  displayName: "StyledAnchor",
  componentId: "sc-xshgmo-0"
})(["direction:", ";", ";"], function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$2, props);
});
StyledAnchor.defaultProps = {
  theme: DEFAULT_THEME
};

function _extends$1() { _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }

var _ref$1 = /*#__PURE__*/React.createElement("path", {
  fill: "none",
  stroke: "currentColor",
  strokeLinecap: "round",
  d: "M10.5 8.5V10c0 .3-.2.5-.5.5H2c-.3 0-.5-.2-.5-.5V2c0-.3.2-.5.5-.5h1.5M6 6l4-4m-3.5-.5H10c.3 0 .5.2.5.5v3.5"
});

function SvgNewWindowStroke(props) {
  return /*#__PURE__*/React.createElement("svg", _extends$1({
    xmlns: "http://www.w3.org/2000/svg",
    width: 12,
    height: 12,
    viewBox: "0 0 12 12",
    focusable: "false",
    role: "presentation"
  }, props), _ref$1);
}

var COMPONENT_ID$1 = 'buttons.external_icon';
var StyledExternalIcon = styled(SvgNewWindowStroke).attrs({
  'data-garden-id': COMPONENT_ID$1,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledExternalIcon",
  componentId: "sc-16oz07e-0"
})(["transform:", ";margin-bottom:-0.085em;padding-left:0.25em;box-sizing:content-box;width:0.85em;height:0.85em;", ";"], function (props) {
  return props.theme.rtl && 'scaleX(-1)';
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID$1, props);
});
StyledExternalIcon.defaultProps = {
  theme: DEFAULT_THEME
};

var COMPONENT_ID = 'buttons.icon_button';
var iconColorStyles = function iconColorStyles(props) {
  var shade = 600;
  var baseColor = getColor('neutralHue', shade, props.theme);
  var hoverColor = getColor('neutralHue', shade + 100, props.theme);
  var activeColor = getColor('neutralHue', shade + 200, props.theme);
  return css(["color:", ";&:hover{color:", ";}&:active,&[aria-pressed='true'],&[aria-pressed='mixed']{color:", ";}"], baseColor, hoverColor, activeColor);
};
var iconButtonStyles = function iconButtonStyles(props) {
  var width = getHeight(props);
  return css(["border:", ";padding:0;width:", ";min-width:", ";", ";&:disabled{background-color:", ";}"], props.isBasic && 'none', width, width, props.isBasic && !(props.isPrimary || props.isDanger || props.disabled) && iconColorStyles(props), !props.isPrimary && 'transparent');
};
var iconStyles = function iconStyles(props) {
  var size = props.theme.iconSizes.md;
  return css(["width:", ";height:", ";& > svg{transition:opacity 0.15s ease-in-out;}"], size, size);
};
var StyledIconButton = styled(StyledButton).attrs({
  'data-garden-id': COMPONENT_ID,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledIconButton",
  componentId: "sc-1t0ughp-0"
})(["", ";& ", "{", "}", ";"], function (props) {
  return iconButtonStyles(props);
}, StyledIcon, function (props) {
  return iconStyles(props);
}, function (props) {
  return retrieveComponentStyles(COMPONENT_ID, props);
});
StyledIconButton.defaultProps = {
  theme: DEFAULT_THEME
};

var ButtonGroupContext = createContext(undefined);
var useButtonGroupContext = function useButtonGroupContext() {
  return useContext(ButtonGroupContext);
};

var SplitButtonContext = createContext(undefined);
var useSplitButtonContext = function useSplitButtonContext() {
  return useContext(SplitButtonContext);
};

var Button = React__default.forwardRef(function (props, ref) {
  var buttonGroupContext = useButtonGroupContext();
  var splitButtonContext = useSplitButtonContext();
  var computedProps = _objectSpread2(_objectSpread2({}, props), {}, {
    focusInset: props.focusInset || buttonGroupContext !== undefined || splitButtonContext
  });
  if (buttonGroupContext && !props.disabled) {
    if (!props.value) {
      throw new Error('"value" prop must be provided to Button when used within a ButtonGroup');
    }
    computedProps = buttonGroupContext.getButtonProps(_objectSpread2({
      item: props.value,
      focusRef: React__default.createRef(),
      isSelected: props.value === buttonGroupContext.selectedItem
    }, computedProps));
  }
  return React__default.createElement(StyledButton, _extends$2({
    ref: ref
  }, computedProps));
});
Button.propTypes = {
  isNeutral: PropTypes.bool,
  isPrimary: PropTypes.bool,
  isDanger: PropTypes.bool,
  isPill: PropTypes.bool,
  isBasic: PropTypes.bool,
  focusInset: PropTypes.bool,
  isLink: PropTypes.bool,
  isStretched: PropTypes.bool,
  isSelected: PropTypes.bool,
  size: PropTypes.oneOf(['small', 'medium', 'large'])
};
Button.defaultProps = {
  size: 'medium'
};
var StartIcon = function StartIcon(props) {
  return React__default.createElement(StyledIcon, _extends$2({
    position: "start"
  }, props));
};
var EndIcon = function EndIcon(props) {
  return React__default.createElement(StyledIcon, _extends$2({
    position: "end"
  }, props));
};
Button.StartIcon = StartIcon;
Button.EndIcon = EndIcon;

var _excluded$5 = ["children", "isExternal"];
var Anchor = React__default.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      isExternal = _ref.isExternal,
      otherProps = _objectWithoutProperties(_ref, _excluded$5);
  var anchorProps = otherProps;
  if (isExternal) {
    anchorProps = _objectSpread2({
      target: '_blank',
      rel: 'noopener noreferrer'
    }, anchorProps);
  }
  return React__default.createElement(StyledAnchor, _extends$2({
    ref: ref
  }, anchorProps), children, isExternal && React__default.createElement(StyledExternalIcon, null));
});
Anchor.displayName = 'Anchor';
Anchor.propTypes = {
  isExternal: PropTypes.bool,
  isDanger: PropTypes.bool
};

var _excluded$4 = ["children", "onSelect", "selectedItem"];
var ButtonGroup = function ButtonGroup(_ref) {
  var children = _ref.children,
      onSelect = _ref.onSelect,
      controlledSelectedItem = _ref.selectedItem,
      otherProps = _objectWithoutProperties(_ref, _excluded$4);
  var _useButtonGroup = useButtonGroup({
    selectedItem: controlledSelectedItem,
    defaultSelectedIndex: 0,
    onSelect: onSelect
  }),
      selectedItem = _useButtonGroup.selectedItem,
      getButtonProps = _useButtonGroup.getButtonProps,
      getGroupProps = _useButtonGroup.getGroupProps;
  var contextValue = useMemo(function () {
    return {
      selectedItem: selectedItem,
      getButtonProps: getButtonProps
    };
  }, [selectedItem, getButtonProps]);
  return React__default.createElement(ButtonGroupContext.Provider, {
    value: contextValue
  }, React__default.createElement(StyledButtonGroup, getGroupProps(otherProps), children));
};
ButtonGroup.propTypes = {
  selectedItem: PropTypes.any,
  onSelect: PropTypes.func
};

var _excluded$3 = ["children", "isRotated"];
var IconButton = React__default.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      isRotated = _ref.isRotated,
      otherProps = _objectWithoutProperties(_ref, _excluded$3);
  var focusInset = useSplitButtonContext();
  return React__default.createElement(StyledIconButton, _extends$2({
    ref: ref
  }, otherProps, {
    focusInset: otherProps.focusInset || focusInset
  }), React__default.createElement(StyledIcon, {
    isRotated: isRotated
  }, children));
});
IconButton.displayName = 'IconButton';
IconButton.propTypes = {
  isDanger: PropTypes.bool,
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  isNeutral: PropTypes.bool,
  isPrimary: PropTypes.bool,
  isBasic: PropTypes.bool,
  isPill: PropTypes.bool,
  focusInset: PropTypes.bool,
  isRotated: PropTypes.bool
};
IconButton.defaultProps = {
  isPill: true,
  isBasic: true,
  size: 'medium'
};

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _ref = /*#__PURE__*/React.createElement("path", {
  fill: "currentColor",
  d: "M12.688 5.61a.5.5 0 01.69.718l-.066.062-5 4a.5.5 0 01-.542.054l-.082-.054-5-4a.5.5 0 01.55-.83l.074.05L8 9.359l4.688-3.75z"
});

function SvgChevronDownStroke(props) {
  return /*#__PURE__*/React.createElement("svg", _extends({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref);
}

var ChevronButton = React__default.forwardRef(function (_ref, ref) {
  var buttonProps = _extends$2({}, _ref);
  return React__default.createElement(IconButton, _extends$2({
    ref: ref
  }, buttonProps), React__default.createElement(SvgChevronDownStroke, null));
});
ChevronButton.displayName = 'ChevronButton';
ChevronButton.propTypes = IconButton.propTypes;
ChevronButton.defaultProps = {
  isBasic: false,
  isPill: false,
  size: 'medium'
};

var _excluded$2 = ["children"];
var SplitButton = function SplitButton(_ref) {
  var children = _ref.children,
      other = _objectWithoutProperties(_ref, _excluded$2);
  return React__default.createElement(SplitButtonContext.Provider, {
    value: true
  }, React__default.createElement(StyledButtonGroup, other, children));
};

var _excluded$1 = ["isPressed"];
var ToggleButton = React__default.forwardRef(function (_ref, ref) {
  var isPressed = _ref.isPressed,
      otherProps = _objectWithoutProperties(_ref, _excluded$1);
  return React__default.createElement(Button, _extends$2({
    "aria-pressed": isPressed,
    ref: ref
  }, otherProps));
});
ToggleButton.displayName = 'ToggleButton';
ToggleButton.propTypes = _objectSpread2(_objectSpread2({}, Button.propTypes), {}, {
  isPressed: PropTypes.oneOf([true, false, 'mixed'])
});
ToggleButton.defaultProps = {
  isPressed: false,
  size: 'medium'
};

var _excluded = ["isPressed"];
var ToggleIconButton = React__default.forwardRef(function (_ref, ref) {
  var isPressed = _ref.isPressed,
      otherProps = _objectWithoutProperties(_ref, _excluded);
  return React__default.createElement(IconButton, _extends$2({
    "aria-pressed": isPressed,
    ref: ref
  }, otherProps));
});
ToggleIconButton.displayName = 'ToggleIconButton';
ToggleIconButton.propTypes = _objectSpread2(_objectSpread2({}, IconButton.propTypes), {}, {
  isPressed: PropTypes.oneOf([true, false, 'mixed'])
});
ToggleIconButton.defaultProps = {
  isPill: true,
  isBasic: true,
  isPressed: false,
  size: 'medium'
};

export { Anchor, Button, ButtonGroup, ChevronButton, IconButton, SplitButton, ToggleButton, ToggleIconButton };
