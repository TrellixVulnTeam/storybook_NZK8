/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
/// <reference types="react" />
export interface IUseFocusJailProps {
    /** Focuses on the `containerRef` element after mounting */
    focusOnMount?: boolean;
    /** Determines whether to return keyboard focus to the last active element upon unmounting */
    restoreFocus?: boolean;
    /** The global environment where the focus jail is rendered */
    environment?: Document;
    /** A callback function that receives the focused element */
    focusElem?: (element: HTMLElement) => any;
    /** A [ref](https://reactjs.org/docs/refs-and-the-dom.html) pointing to the focus jail's container element */
    containerRef: React.RefObject<HTMLElement>;
}
export interface IUseFocusJailReturnValue {
    getContainerProps: <T>(options?: T) => T & React.HTMLProps<any>;
    focusElement: (element?: HTMLElement) => any;
}
export declare const useFocusJail: ({ focusOnMount, restoreFocus, environment, focusElem, containerRef }?: IUseFocusJailProps) => IUseFocusJailReturnValue;
