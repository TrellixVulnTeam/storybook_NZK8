/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var containerBreadcrumb = require('@zendeskgarden/container-breadcrumb');
var styled = require('styled-components');
var reactTheming = require('@zendeskgarden/react-theming');
var polished = require('polished');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var COMPONENT_ID$1 = 'breadcrumbs.list';
var StyledBreadcrumb = styled__default['default'].ol.attrs({
  'data-garden-id': COMPONENT_ID$1,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledBreadcrumb",
  componentId: "sc-11jrinn-0"
})(["display:flex;margin:0;padding:0;list-style:none;font-size:", ";direction:", ";"], function (props) {
  return props.theme.fontSizes.md;
}, function (props) {
  return props.theme.rtl && 'rtl';
});
StyledBreadcrumb.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _ref = /*#__PURE__*/React__namespace.createElement("path", {
  fill: "currentColor",
  d: "M3.646 10.354a.5.5 0 01-.057-.638l.057-.07L7.293 6 3.646 2.354a.5.5 0 01-.057-.638l.057-.07a.5.5 0 01.638-.057l.07.057 4 4a.5.5 0 01.057.638l-.057.07-4 4a.5.5 0 01-.708 0z"
});

function SvgChevronRightStroke(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends({
    xmlns: "http://www.w3.org/2000/svg",
    width: 12,
    height: 12,
    viewBox: "0 0 12 12",
    focusable: "false",
    role: "presentation"
  }, props), _ref);
}

var _excluded = ["theme"];
var ValidChevronIcon = function ValidChevronIcon(props) {
  props.theme;
      var validProps = _objectWithoutProperties(props, _excluded);
  return React__default['default'].createElement(SvgChevronRightStroke, validProps);
};
var StyledChevronIcon = styled__default['default'](ValidChevronIcon).attrs({
  role: 'presentation',
  'aria-hidden': 'true'
}).withConfig({
  displayName: "StyledChevronIcon",
  componentId: "sc-9r9qrm-0"
})(["transform:", ";margin:0 ", ";color:", ";"], function (props) {
  return props.theme.rtl && "rotate(180deg);";
}, function (props) {
  return polished.em(props.theme.space.base, props.theme.fontSizes.md);
}, function (props) {
  return reactTheming.getColor('neutralHue', 600, props.theme);
});
StyledChevronIcon.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID = 'breadcrumbs.item';
var linkStyles = function linkStyles(_ref) {
  var isCurrent = _ref.isCurrent;
  return styled.css(["& >:link,& >:visited{white-space:inherit;}", ""], isCurrent && "\n      & > :link,\n      & > :visited,\n      & > :link:hover,\n      & > :visited:hover,\n      & > :link:focus,\n      & > :visited:focus {\n        color: inherit;\n      }\n    ");
};
var StyledBreadcrumbItem = styled__default['default'].li.attrs({
  'data-garden-id': COMPONENT_ID,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledBreadcrumbItem",
  componentId: "sc-r0suq7-0"
})(["line-height:", ";white-space:nowrap;color:", ";font-size:inherit;", ";"], function (props) {
  return reactTheming.getLineHeight(props.theme.space.base * 5, props.theme.fontSizes.md);
}, function (props) {
  return props.isCurrent ? reactTheming.getColor(props.theme.colors.neutralHue, 600) : 'inherit';
}, linkStyles);
StyledBreadcrumbItem.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var StyledCenteredBreadcrumbItem = styled__default['default'](StyledBreadcrumbItem).attrs({
  'aria-hidden': true
}).withConfig({
  displayName: "StyledCenteredBreadcrumbItem",
  componentId: "sc-1ces9y2-0"
})(["display:flex;align-items:center;"]);
StyledCenteredBreadcrumbItem.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var Breadcrumb = React__default['default'].forwardRef(function (props, ref) {
  var _useBreadcrumb = containerBreadcrumb.useBreadcrumb(),
      getContainerProps = _useBreadcrumb.getContainerProps,
      getCurrentPageProps = _useBreadcrumb.getCurrentPageProps;
  var totalChildren = React.Children.count(props.children);
  var mappedChildren = React.Children.map(props.children, function (child, index) {
    var isLastItem = index === totalChildren - 1;
    if (isLastItem) {
      return React__default['default'].createElement(StyledBreadcrumbItem, {
        isCurrent: true
      }, React.cloneElement(child, getCurrentPageProps()));
    }
    return React__default['default'].createElement(React__default['default'].Fragment, null, React__default['default'].createElement(StyledBreadcrumbItem, null, child), React__default['default'].createElement(StyledCenteredBreadcrumbItem, null, React__default['default'].createElement(StyledChevronIcon, null)));
  });
  return React__default['default'].createElement("nav", getContainerProps(_objectSpread2(_objectSpread2({}, props), {}, {
    ref: ref,
    role: null
  })), React__default['default'].createElement(StyledBreadcrumb, null, mappedChildren));
});
Breadcrumb.displayName = 'Breadcrumb';

exports.Breadcrumb = Breadcrumb;
