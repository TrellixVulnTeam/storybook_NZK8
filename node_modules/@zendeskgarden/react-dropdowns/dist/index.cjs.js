/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var PropTypes = require('prop-types');
var Downshift = require('downshift');
var reactPopper = require('react-popper');
var reactTheming = require('@zendeskgarden/react-theming');
var containerUtilities = require('@zendeskgarden/container-utilities');
var styled = require('styled-components');
var polished = require('polished');
var reactForms = require('@zendeskgarden/react-forms');
var mergeRefs = require('react-merge-refs');
var containerSelection = require('@zendeskgarden/container-selection');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var Downshift__default = /*#__PURE__*/_interopDefaultLegacy(Downshift);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var mergeRefs__default = /*#__PURE__*/_interopDefaultLegacy(mergeRefs);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends$5() {
  _extends$5 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$5.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var DropdownContext = React__default['default'].createContext(undefined);
var useDropdownContext = function useDropdownContext() {
  var dropdownContext = React.useContext(DropdownContext);
  if (!dropdownContext) {
    throw new Error('This component must be rendered within a `Dropdown` component.');
  }
  return dropdownContext;
};

var _excluded$c = ["onKeyDown"],
    _excluded2$6 = ["getInputProps", "getToggleButtonProps"];
var REMOVE_ITEM_STATE_TYPE = 'REMOVE_ITEM';
var Dropdown = function Dropdown(props) {
  var children = props.children,
      isOpen = props.isOpen,
      selectedItem = props.selectedItem,
      selectedItems = props.selectedItems,
      highlightedIndex = props.highlightedIndex,
      inputValue = props.inputValue,
      onSelect = props.onSelect,
      _onStateChange = props.onStateChange,
      _onInputValueChange = props.onInputValueChange,
      downshiftProps = props.downshiftProps;
  var itemIndexRef = React.useRef(0);
  var previousItemRef = React.useRef(undefined);
  var previousIndexRef = React.useRef(undefined);
  var nextItemsHashRef = React.useRef({});
  var containsMultiselectRef = React.useRef(false);
  var itemSearchRegistry = React.useRef([]);
  var _useState = React.useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      dropdownType = _useState2[0],
      setDropdownType = _useState2[1];
  var hasMenuRef = React.useRef(false);
  var popperReferenceElementRef = React.useRef(null);
  var customGetInputProps = function customGetInputProps(_ref, downshift, rtl) {
    var onKeyDown = _ref.onKeyDown,
        other = _objectWithoutProperties(_ref, _excluded$c);
    return _objectSpread2({
      onKeyDown: containerUtilities.composeEventHandlers(onKeyDown, function (e) {
        var PREVIOUS_KEY = rtl ? containerUtilities.KEY_CODES.RIGHT : containerUtilities.KEY_CODES.LEFT;
        var NEXT_KEY = rtl ? containerUtilities.KEY_CODES.LEFT : containerUtilities.KEY_CODES.RIGHT;
        if (downshift.isOpen) {
          if (e.keyCode === PREVIOUS_KEY && previousIndexRef.current !== null && previousIndexRef.current !== undefined && !downshift.inputValue) {
            e.preventDefault();
            e.stopPropagation();
            downshift.selectItemAtIndex(previousIndexRef.current);
          }
          if (e.keyCode === NEXT_KEY) {
            var nextItemIndexes = Object.values(nextItemsHashRef.current);
            if (nextItemIndexes.includes(downshift.highlightedIndex)) {
              e.preventDefault();
              e.stopPropagation();
              downshift.selectItemAtIndex(downshift.highlightedIndex);
            }
          }
        } else if ((e.keyCode === containerUtilities.KEY_CODES.ENTER || e.keyCode === containerUtilities.KEY_CODES.SPACE) && !downshift.isOpen && dropdownType !== 'combobox') {
          e.preventDefault();
          e.stopPropagation();
          downshift.openMenu();
        }
      })
    }, other);
  };
  var transformDownshift = function transformDownshift(_ref2) {
    var _getInputProps = _ref2.getInputProps,
        _getToggleButtonProps = _ref2.getToggleButtonProps,
        downshift = _objectWithoutProperties(_ref2, _excluded2$6);
    return _objectSpread2({
      getInputProps: function getInputProps(p) {
        return _getInputProps(customGetInputProps(p, downshift, reactTheming.isRtl(props)));
      },
      getToggleButtonProps: function getToggleButtonProps(p) {
        return _getToggleButtonProps(_objectSpread2({
          'aria-label': undefined
        }, p));
      }
    }, downshift);
  };
  return React__default['default'].createElement(reactPopper.Manager, null, React__default['default'].createElement(Downshift__default['default'], _extends$5({
    suppressRefError: true
    ,
    isOpen: isOpen,
    highlightedIndex: highlightedIndex,
    selectedItem: selectedItem || null
    ,
    inputValue: inputValue,
    onInputValueChange: function onInputValueChange(inputVal, stateAndHelpers) {
      if (_onInputValueChange) {
        if (stateAndHelpers.isOpen) {
          _onInputValueChange(inputVal, stateAndHelpers);
        } else if (dropdownType === 'multiselect') {
          _onInputValueChange('', stateAndHelpers);
        }
      }
    },
    onStateChange: function onStateChange(changes, stateAndHelpers) {
      if (dropdownType === 'autocomplete' && changes.isOpen === false && !changes.selectedItem) {
        onSelect && onSelect(selectedItem, stateAndHelpers);
      }
      if (Object.prototype.hasOwnProperty.call(changes, 'selectedItem') && changes.selectedItem !== null) {
        if (selectedItems) {
          var itemToString = stateAndHelpers.itemToString;
          var existingItemIndex = selectedItems.findIndex(function (item) {
            return itemToString(item) === itemToString(changes.selectedItem);
          });
          var updatedSelectedItems = Array.from(selectedItems);
          if (existingItemIndex === -1) {
            updatedSelectedItems.splice(updatedSelectedItems.length, 0, changes.selectedItem);
          } else {
            updatedSelectedItems.splice(existingItemIndex, 1);
          }
          changes.selectedItems = updatedSelectedItems;
          delete changes.selectedItem;
          onSelect && onSelect(updatedSelectedItems, stateAndHelpers);
        } else {
          onSelect && onSelect(changes.selectedItem, stateAndHelpers);
        }
        if (dropdownType === 'multiselect') {
          stateAndHelpers.setState({
            inputValue: ''
          });
        }
      }
      _onStateChange && _onStateChange(changes, stateAndHelpers);
    },
    stateReducer: function stateReducer(_state, changes) {
      switch (changes.type) {
        case Downshift__default['default'].stateChangeTypes.changeInput:
          if (changes.inputValue === '' && dropdownType === 'combobox') {
            return _objectSpread2(_objectSpread2({}, changes), {}, {
              isOpen: false
            });
          }
          return changes;
        default:
          return changes;
      }
    }
  }, downshiftProps), function (downshift) {
    return React__default['default'].createElement(DropdownContext.Provider, {
      value: {
        hasMenuRef: hasMenuRef,
        itemIndexRef: itemIndexRef,
        previousItemRef: previousItemRef,
        previousIndexRef: previousIndexRef,
        nextItemsHashRef: nextItemsHashRef,
        popperReferenceElementRef: popperReferenceElementRef,
        selectedItems: selectedItems,
        downshift: transformDownshift(downshift),
        containsMultiselectRef: containsMultiselectRef,
        itemSearchRegistry: itemSearchRegistry,
        setDropdownType: setDropdownType
      }
    }, children);
  }));
};
Dropdown.propTypes = {
  isOpen: PropTypes__default['default'].bool,
  selectedItem: PropTypes__default['default'].any,
  selectedItems: PropTypes__default['default'].arrayOf(PropTypes__default['default'].any),
  highlightedIndex: PropTypes__default['default'].number,
  inputValue: PropTypes__default['default'].string,
  onSelect: PropTypes__default['default'].func,
  onStateChange: PropTypes__default['default'].func,
  downshiftProps: PropTypes__default['default'].object
};
var Dropdown$1 = reactTheming.withTheme(Dropdown);

function getPopperPlacement(gardenPlacement) {
  switch (gardenPlacement) {
    case 'end':
      return 'right';
    case 'end-top':
      return 'right-start';
    case 'end-bottom':
      return 'right-end';
    case 'start':
      return 'left';
    case 'start-top':
      return 'left-start';
    case 'start-bottom':
      return 'left-end';
    default:
      return gardenPlacement;
  }
}
function getRtlPopperPlacement(gardenPlacement) {
  var popperPlacement = getPopperPlacement(gardenPlacement);
  switch (popperPlacement) {
    case 'left':
      return 'right';
    case 'left-start':
      return 'right-start';
    case 'left-end':
      return 'right-end';
    case 'top-start':
      return 'top-end';
    case 'top-end':
      return 'top-start';
    case 'right':
      return 'left';
    case 'right-start':
      return 'left-start';
    case 'right-end':
      return 'left-end';
    case 'bottom-start':
      return 'bottom-end';
    case 'bottom-end':
      return 'bottom-start';
    default:
      return popperPlacement;
  }
}
function getArrowPosition(popperPlacement) {
  var arrowPositionMappings = {
    auto: 'top',
    top: 'bottom',
    'top-start': 'bottom-left',
    'top-end': 'bottom-right',
    right: 'left',
    'right-start': 'left-top',
    'right-end': 'left-bottom',
    bottom: 'top',
    'bottom-start': 'top-left',
    'bottom-end': 'top-right',
    left: 'right',
    'left-start': 'right-top',
    'left-end': 'right-bottom'
  };
  return popperPlacement ? arrowPositionMappings[popperPlacement] : 'top';
}
function getMenuPosition(popperPlacement) {
  if (popperPlacement === 'auto') {
    return 'bottom';
  }
  return popperPlacement ? popperPlacement.split('-')[0] : 'bottom';
}

var COMPONENT_ID$m = 'dropdowns.menu';
var StyledMenu = styled__default['default'].ul.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$m,
    'data-garden-version': '8.47.1',
    className: props.isAnimated && 'is-animated'
  };
}).withConfig({
  displayName: "StyledMenu",
  componentId: "sc-1vpttfd-0"
})(["position:static !important;max-height:", ";overflow-y:auto;", ";", ";"], function (props) {
  return props.maxHeight;
}, function (props) {
  return props.hasArrow && reactTheming.arrowStyles(getArrowPosition(props.placement), {
    size: "".concat(props.theme.space.base * 2, "px"),
    inset: '2px',
    animationModifier: props.isAnimated ? '.is-animated' : undefined
  });
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$m, props);
});
StyledMenu.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$l = 'dropdowns.menu_wrapper';
var StyledMenuWrapper = styled__default['default'].div.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$l,
    'data-garden-version': '8.47.1',
    className: props.isAnimated && 'is-animated'
  };
}).withConfig({
  displayName: "StyledMenuWrapper",
  componentId: "sc-tiwdxz-0"
})(["", ";", ";"], function (props) {
  return reactTheming.menuStyles(getMenuPosition(props.placement), {
    theme: props.theme,
    hidden: props.isHidden,
    margin: "".concat(props.theme.space.base * (props.hasArrow ? 2 : 1), "px"),
    zIndex: props.zIndex,
    animationModifier: props.isAnimated ? '.is-animated' : undefined
  });
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$l, props);
});
StyledMenuWrapper.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$k = 'dropdowns.separator';
var StyledSeparator = styled__default['default'].li.attrs({
  'data-garden-id': COMPONENT_ID$k,
  'data-garden-version': '8.47.1',
  role: 'separator'
}).withConfig({
  displayName: "StyledSeparator",
  componentId: "sc-1mrnp18-0"
})(["display:block;margin:", "px 0;border-bottom:", ";", ";"], function (props) {
  return props.theme.space.base;
}, function (props) {
  return "".concat(props.theme.borders.sm, " ").concat(reactTheming.getColor('neutralHue', 200, props.theme));
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$k, props);
});
StyledSeparator.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$j = 'dropdowns.item';
var getItemPaddingVertical = function getItemPaddingVertical(props) {
  if (props.isCompact) {
    return "".concat(props.theme.space.base, "px");
  }
  return "".concat(props.theme.space.base * 2, "px");
};
var getColorStyles = function getColorStyles(props) {
  var foregroundColor;
  var backgroundColor;
  if (props.disabled) {
    foregroundColor = reactTheming.getColor('neutralHue', 400, props.theme);
  } else if (props.isDanger) {
    foregroundColor = reactTheming.getColor('dangerHue', 600, props.theme);
    backgroundColor = props.isFocused ? polished.rgba(foregroundColor, 0.08) : 'inherit';
  } else {
    foregroundColor = props.theme.colors.foreground;
    backgroundColor = props.isFocused ? reactTheming.getColor('primaryHue', 600, props.theme, 0.08) : 'inherit';
  }
  return styled.css(["background-color:", ";color:", ";& a,& a:hover,& a:focus,& a:active{color:inherit;}"], backgroundColor, foregroundColor);
};
var StyledItem = styled__default['default'].li.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$j,
    'data-garden-version': '8.47.1',
    'aria-disabled': props.disabled
  };
}).withConfig({
  displayName: "StyledItem",
  componentId: "sc-1xeog7q-0"
})(["display:block;position:relative;z-index:0;cursor:", ";padding:", " ", "px;text-decoration:none;line-height:", "px;word-wrap:break-word;user-select:none;&:first-child{margin-top:", "px;}&:last-child{margin-bottom:", "px;}&:focus{outline:none;}& a,& a:hover,& a:focus,& a:active{text-decoration:none;}", ";", ";"], function (props) {
  return props.disabled ? 'default' : 'pointer';
}, function (props) {
  return getItemPaddingVertical(props);
}, function (props) {
  return props.theme.space.base * 9;
}, function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  return props.theme.space.base;
}, function (props) {
  return props.theme.space.base;
}, function (props) {
  return getColorStyles(props);
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$j, props);
});
StyledItem.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$i = 'dropdowns.add_item';
var StyledAddItem = styled__default['default'](StyledItem).attrs({
  'data-garden-id': COMPONENT_ID$i,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledAddItem",
  componentId: "sc-ekqk50-0"
})(["color:", ";", ";"], function (props) {
  return !props.disabled && reactTheming.getColor('primaryHue', 600, props.theme);
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$i, props);
});
StyledAddItem.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$h = 'dropdowns.item_meta';
var StyledItemMeta = styled__default['default'].span.attrs({
  'data-garden-id': COMPONENT_ID$h,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledItemMeta",
  componentId: "sc-k6xy28-0"
})(["display:block;line-height:", "px;color:", ";font-size:", ";", ";"], function (props) {
  return props.theme.space.base * (props.isCompact ? 3 : 4);
}, function (props) {
  return reactTheming.getColor('neutralHue', props.isDisabled ? 400 : 600, props.theme);
}, function (props) {
  return props.theme.fontSizes.sm;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$h, props);
});
StyledItemMeta.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$g = 'dropdowns.item_icon';
var getSizeStyles = function getSizeStyles(props) {
  return styled.css(["width:", ";height:calc(", "px + ", ");"], props.theme.iconSizes.md, props.theme.space.base * 5, polished.math("".concat(getItemPaddingVertical(props), " * 2")));
};
var StyledItemIcon = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$g,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledItemIcon",
  componentId: "sc-1v0ty11-0"
})(["display:flex;position:absolute;top:0;", ":", "px;align-items:center;justify-content:center;transition:opacity 0.1s ease-in-out;opacity:", ";color:", ";", ";& > *{width:", ";height:", ";}"], function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return props.theme.space.base * 3;
}, function (props) {
  return props.isVisible ? '1' : '0';
}, function (props) {
  return props.isDisabled ? 'inherit' : reactTheming.getColor('primaryHue', 600, props.theme);
}, function (props) {
  return getSizeStyles(props);
}, function (props) {
  return props.theme.iconSizes.md;
}, function (props) {
  return props.theme.iconSizes.md;
});
StyledItemIcon.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$f = 'dropdowns.next_item';
var StyledNextItem = styled__default['default'](StyledItem).attrs({
  'data-garden-id': COMPONENT_ID$f,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledNextItem",
  componentId: "sc-1bcygn5-0"
})(["", "{right:", ";left:", ";}", ";"], StyledItemIcon, function (props) {
  return props.theme.rtl ? 'auto' : "".concat(props.theme.space.base * 3, "px");
}, function (props) {
  return props.theme.rtl ? "".concat(props.theme.space.base * 3, "px") : 'auto';
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$f, props);
});
StyledNextItem.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

function _extends$4() { _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }

var _ref$4 = /*#__PURE__*/React__namespace.createElement("path", {
  fill: "currentColor",
  d: "M5.61 3.312a.5.5 0 01.718-.69l.062.066 4 5a.5.5 0 01.054.542l-.054.082-4 5a.5.5 0 01-.83-.55l.05-.074L9.359 8l-3.75-4.688z"
});

function SvgChevronRightStroke(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$4({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$4);
}

var COMPONENT_ID$e = 'dropdowns.next_item_icon';
var NextIconComponent = function NextIconComponent(_ref) {
  var className = _ref.className;
  return React__default['default'].createElement(SvgChevronRightStroke, {
    "data-garden-id": COMPONENT_ID$e,
    "data-garden-version": '8.47.1',
    className: className
  });
};
var StyledNextIcon = styled__default['default'](NextIconComponent).withConfig({
  displayName: "StyledNextIcon",
  componentId: "sc-1rinki2-0"
})(["transform:", ";color:", ";", ";"], function (props) {
  return props.theme.rtl && 'rotate(180deg)';
}, function (props) {
  return props.isDisabled ? 'inherit' : reactTheming.getColor('neutralHue', 600, props.theme);
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$e, props);
});
StyledNextIcon.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$d = 'dropdowns.previous_item';
var StyledPreviousItem = styled__default['default'](StyledItem).attrs({
  'data-garden-id': COMPONENT_ID$d,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledPreviousItem",
  componentId: "sc-1nmdds9-0"
})(["font-weight:", ";", ";"], function (props) {
  return props.theme.fontWeights.semibold;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$d, props);
});
StyledPreviousItem.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

function _extends$3() { _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }

var _ref$3 = /*#__PURE__*/React__namespace.createElement("path", {
  fill: "currentColor",
  d: "M10.39 12.688a.5.5 0 01-.718.69l-.062-.066-4-5a.5.5 0 01-.054-.542l.054-.082 4-5a.5.5 0 01.83.55l-.05.074L6.641 8l3.75 4.688z"
});

function SvgChevronLeftStroke(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$3({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$3);
}

var COMPONENT_ID$c = 'dropdowns.previous_item_icon';
var PreviousIconComponent = function PreviousIconComponent(_ref) {
  var className = _ref.className;
  return React__default['default'].createElement(SvgChevronLeftStroke, {
    "data-garden-id": COMPONENT_ID$c,
    "data-garden-version": '8.47.1',
    className: className
  });
};
var StyledPreviousIcon = styled__default['default'](PreviousIconComponent).withConfig({
  displayName: "StyledPreviousIcon",
  componentId: "sc-czfwj7-0"
})(["transform:", ";color:", ";", ";"], function (props) {
  return props.theme.rtl && 'rotate(180deg)';
}, function (props) {
  return props.isDisabled ? 'inherit' : reactTheming.getColor('neutralHue', 600, props.theme);
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$c, props);
});
StyledPreviousIcon.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$b = 'dropdowns.header_icon';
var StyledHeaderIcon = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$b,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledHeaderIcon",
  componentId: "sc-1fl6nsz-0"
})(["display:flex;position:absolute;top:0;bottom:0;align-items:center;justify-content:center;", ":", "px;color:", ";& > *{width:", ";height:", ";}", ";"], function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return props.theme.space.base * 3;
}, function (props) {
  return reactTheming.getColor('neutralHue', 600, props.theme);
}, function (props) {
  return props.theme.iconSizes.md;
}, function (props) {
  return props.theme.iconSizes.md;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$b, props);
});
StyledHeaderIcon.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$a = 'dropdowns.header_item';
var getHorizontalPadding = function getHorizontalPadding(props) {
  if (props.hasIcon) {
    return undefined;
  }
  return "".concat(props.theme.space.base * 3, "px");
};
var StyledHeaderItem = styled__default['default'](StyledItem).attrs({
  'data-garden-id': COMPONENT_ID$a,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledHeaderItem",
  componentId: "sc-137filx-0"
})(["cursor:default;padding-right:", ";padding-left:", ";font-weight:", ";", ";"], function (props) {
  return getHorizontalPadding(props);
}, function (props) {
  return getHorizontalPadding(props);
}, function (props) {
  return props.theme.fontWeights.semibold;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$a, props);
});
StyledHeaderItem.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$9 = 'dropdowns.media_body';
var StyledMediaBody = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$9,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledMediaBody",
  componentId: "sc-36j7ef-0"
})(["display:block;overflow:hidden;padding-", ":", "px;", ";"], function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return props.theme.space.base * 2;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$9, props);
});
StyledMediaBody.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var _excluded$b = ["children", "isCompact", "theme"];
var COMPONENT_ID$8 = 'dropdowns.media_figure';
var StyledMediaFigure = styled__default['default'](
function (_ref) {
  var children = _ref.children;
      _ref.isCompact;
      _ref.theme;
      var props = _objectWithoutProperties(_ref, _excluded$b);
  return (
    React__default['default'].cloneElement(React.Children.only(children), props)
  );
}).attrs({
  'data-garden-id': COMPONENT_ID$8,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledMediaFigure",
  componentId: "sc-2f2x8x-0"
})(["float:", ";margin-top:", "px !important;width:", ";height:", ";", ";"], function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return props.theme.space.base * 0.5;
}, function (props) {
  return props.theme.iconSizes.md;
}, function (props) {
  return props.theme.iconSizes.md;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$8, props);
});
StyledMediaFigure.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$7 = 'dropdowns.media_item';
var StyledMediaItem = styled__default['default'](StyledItem).attrs({
  'data-garden-id': COMPONENT_ID$7,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledMediaItem",
  componentId: "sc-ikwshz-0"
})(["", ";"], function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$7, props);
});
StyledMediaItem.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$6 = 'dropdowns.faux_input';
var StyledFauxInput = styled__default['default'](reactForms.FauxInput).attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$6,
    'data-garden-version': '8.47.1',
    mediaLayout: true,
    theme: props.theme
  };
}).withConfig({
  displayName: "StyledFauxInput",
  componentId: "sc-1l592ed-0"
})(["cursor:", ";min-width:", "px;", ";"], function (props) {
  return !props.disabled && 'pointer';
}, function (props) {
  return props.theme.space.base * (props.isCompact ? 25 : 36);
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$6, props);
});
StyledFauxInput.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$5 = 'dropdowns.input';
var hiddenStyling = styled.css(["position:fixed;border:0;clip:rect(1px,1px,1px,1px);padding:0;width:1px;height:1px;overflow:hidden;white-space:nowrap;"]);
var StyledInput = styled__default['default'](reactForms.Input).attrs({
  'data-garden-id': COMPONENT_ID$5,
  'data-garden-version': '8.47.1',
  isBare: true
}).withConfig({
  displayName: "StyledInput",
  componentId: "sc-hzhvmp-0"
})(["", ";", ";"], function (props) {
  return props.isHidden && hiddenStyling;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$5, props);
});
StyledInput.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$4 = 'dropdowns.select';
var StyledSelect = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$4,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledSelect",
  componentId: "sc-xifmwj-0"
})(["flex-grow:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;", ";"], function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$4, props);
});
StyledSelect.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$3 = 'dropdowns.multiselect_input';
var visibleStyling = function visibleStyling(props) {
  var margin = props.isVisible ? "".concat(props.theme.space.base / 2, "px") : 0;
  var minWidth = props.isVisible ? "".concat(props.theme.space.base * 15, "px") : 0;
  var height = '0';
  if (props.isVisible) {
    height = "".concat(props.theme.space.base * (props.isCompact ? 5 : 8), "px");
  }
  return styled.css(["opacity:", ";margin:", ";width:", ";min-width:", ";height:", ";"], !props.isVisible && 0, margin, !props.isVisible && 0, minWidth, height);
};
var StyledMultiselectInput = styled__default['default'](StyledInput).attrs({
  'data-garden-id': COMPONENT_ID$3,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledMultiselectInput",
  componentId: "sc-1avnf6f-0"
})(["flex-basis:", "px;flex-grow:1;align-self:center;min-height:0;", ";", ";"], function (props) {
  return props.theme.space.base * 15;
}, function (props) {
  return visibleStyling(props);
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$3, props);
});
StyledMultiselectInput.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$2 = 'dropdowns.multiselect_items_container';
var sizeStyles = function sizeStyles(props) {
  var margin;
  var padding;
  if (!props.isBare) {
    var marginVertical = props.isCompact ? "-".concat(props.theme.space.base * 1.5, "px") : "-".concat(props.theme.space.base * 2.5, "px");
    margin = "".concat(marginVertical, " 0");
    var paddingVertical = props.isCompact ? '3px' : '1px';
    var paddingEnd = "".concat(props.theme.space.base, "px");
    padding = "".concat(paddingVertical, " ").concat(props.theme.rtl ? 0 : paddingEnd, " ").concat(paddingVertical, " ").concat(props.theme.rtl ? paddingEnd : 0);
  }
  return styled.css(["margin:", ";padding:", ";"], margin, padding);
};
var StyledMultiselectItemsContainer = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$2,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledMultiselectItemsContainer",
  componentId: "sc-1jzhet8-0"
})(["display:inline-flex;flex-grow:1;flex-wrap:wrap;min-width:0;", ";", ";"], function (props) {
  return sizeStyles(props);
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$2, props);
});
StyledMultiselectItemsContainer.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$1 = 'dropdowns.multiselect_item_wrapper';
var StyledMultiselectItemWrapper = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$1,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledMultiselectItemWrapper",
  componentId: "sc-1rb2bye-0"
})(["display:inline-flex;align-items:center;margin:", "px;max-width:100%;", ";"], function (props) {
  return props.theme.space.base / 2;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$1, props);
});
StyledMultiselectItemWrapper.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID = 'dropdowns.multiselect_more_anchor';
var StyledMultiselectMoreAnchor = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledMultiselectMoreAnchor",
  componentId: "sc-1m9v46e-0"
})(["display:inline-block;cursor:", ";padding:", "px 0;overflow:hidden;user-select:none;text-overflow:ellipsis;line-height:", ";white-space:nowrap;color:", ";:hover{text-decoration:", ";}", ";"], function (props) {
  return props.isDisabled ? 'default' : 'pointer';
}, function (props) {
  return props.theme.space.base * (props.isCompact ? 0.75 : 1.5);
}, function (props) {
  return props.isCompact ? '1em' : reactTheming.getLineHeight(props.theme.space.base * 5, props.theme.fontSizes.md);
}, function (props) {
  return props.isDisabled ? reactTheming.getColor('neutralHue', 400, props.theme) : reactTheming.getColor('primaryHue', 600, props.theme);
}, function (props) {
  return !props.isDisabled && 'underline';
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID, props);
});
StyledMultiselectMoreAnchor.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var _excluded$a = ["children", "refKey"],
    _excluded2$5 = ["ref"];
var Trigger = function Trigger(_ref) {
  var children = _ref.children,
      refKey = _ref.refKey,
      triggerProps = _objectWithoutProperties(_ref, _excluded$a);
  var _useDropdownContext = useDropdownContext(),
      hasMenuRef = _useDropdownContext.hasMenuRef,
      itemSearchRegistry = _useDropdownContext.itemSearchRegistry,
      _useDropdownContext$d = _useDropdownContext.downshift,
      getRootProps = _useDropdownContext$d.getRootProps,
      getToggleButtonProps = _useDropdownContext$d.getToggleButtonProps,
      getInputProps = _useDropdownContext$d.getInputProps,
      isOpen = _useDropdownContext$d.isOpen,
      highlightedIndex = _useDropdownContext$d.highlightedIndex,
      selectItemAtIndex = _useDropdownContext$d.selectItemAtIndex,
      setHighlightedIndex = _useDropdownContext$d.setHighlightedIndex;
  var hiddenInputRef = React.useRef(null);
  var triggerRef = React.useRef(null);
  var previousIsOpenRef = React.useRef(undefined);
  var _useState = React.useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      searchString = _useState2[0],
      setSearchString = _useState2[1];
  var searchTimeoutRef = React.useRef();
  var currentSearchIndexRef = React.useRef(0);
  React.useEffect(function () {
    if (hiddenInputRef.current && isOpen && !previousIsOpenRef.current) {
      hiddenInputRef.current.focus();
    }
    if (triggerRef.current && !isOpen && previousIsOpenRef.current) {
      triggerRef.current.focus();
    }
    previousIsOpenRef.current = isOpen;
  }, [isOpen, hasMenuRef]);
  React.useEffect(function () {
    if (hasMenuRef.current === false) {
      hasMenuRef.current = true;
    }
  }, [hasMenuRef]);
  React.useEffect(function () {
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    searchTimeoutRef.current = window.setTimeout(function () {
      setSearchString('');
    }, 500);
    return function () {
      clearTimeout(searchTimeoutRef.current);
    };
  }, [searchString]);
  var searchItems = React.useCallback(function (searchValue, startIndex, endIndex) {
    for (var index = startIndex; index < endIndex; index++) {
      var itemTextValue = itemSearchRegistry.current[index];
      if (itemTextValue && itemTextValue.toUpperCase().indexOf(searchValue.toUpperCase()) === 0) {
        return index;
      }
    }
    return undefined;
  }, [itemSearchRegistry]);
  var onInputKeyDown = React.useCallback(function (e) {
    if (e.keyCode === containerUtilities.KEY_CODES.SPACE) {
      if (searchString) {
        e.preventDefault();
        e.stopPropagation();
      } else if (highlightedIndex !== null && highlightedIndex !== undefined) {
        e.preventDefault();
        e.stopPropagation();
        selectItemAtIndex(highlightedIndex);
      }
    }
    if ((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 65 || e.keyCode > 90) && e.keyCode !== containerUtilities.KEY_CODES.SPACE) {
      return;
    }
    var character = String.fromCharCode(e.which || e.keyCode);
    if (!character || character.length === 0) {
      return;
    }
    if (!searchString) {
      if (highlightedIndex === null || highlightedIndex === undefined) {
        currentSearchIndexRef.current = -1;
      } else {
        currentSearchIndexRef.current = highlightedIndex;
      }
    }
    var newSearchString = searchString + character;
    setSearchString(newSearchString);
    var matchingIndex = searchItems(newSearchString, currentSearchIndexRef.current + 1, itemSearchRegistry.current.length);
    if (matchingIndex === undefined) {
      matchingIndex = searchItems(newSearchString, 0, currentSearchIndexRef.current);
    }
    if (matchingIndex !== undefined) {
      setHighlightedIndex(matchingIndex);
    }
  }, [searchString, searchItems, itemSearchRegistry, highlightedIndex, selectItemAtIndex, setHighlightedIndex]);
  var renderChildren = function renderChildren(popperRef) {
    var _getRootProps = getRootProps(),
        rootPropsRefCallback = _getRootProps.ref,
        rootProps = _objectWithoutProperties(_getRootProps, _excluded2$5);
    var listboxToggleProps = getToggleButtonProps(_objectSpread2(_objectSpread2(_objectSpread2({}, rootProps), {}, {
      role: null,
      'aria-labelledby': undefined
    }, triggerProps), children.props));
    var menuToggleProps = _objectSpread2(_objectSpread2({}, listboxToggleProps), {}, {
      'aria-haspopup': 'true',
      'aria-controls': listboxToggleProps['aria-owns'],
      'aria-owns': null
    });
    var toggleButtonProps = hasMenuRef.current ? menuToggleProps : listboxToggleProps;
    return React__default['default'].cloneElement(React__default['default'].Children.only(children), _objectSpread2(_objectSpread2({}, toggleButtonProps), {}, _defineProperty({}, refKey, function (childRef) {
      popperRef(childRef);
      triggerRef.current = childRef;
      rootPropsRefCallback(childRef);
    })));
  };
  return React__default['default'].createElement(reactPopper.Reference, null, function (_ref2) {
    var popperReference = _ref2.ref;
    return React__default['default'].createElement(React__default['default'].Fragment, null, renderChildren(popperReference), React__default['default'].createElement(StyledInput, getInputProps({
      readOnly: true,
      isHidden: true,
      tabIndex: -1,
      ref: hiddenInputRef,
      value: '',
      onClick: function onClick(e) {
        if (isOpen) {
          e.nativeEvent.preventDownshiftDefault = true;
        }
      },
      onKeyDown: onInputKeyDown
    })));
  });
};
Trigger.propTypes = {
  children: PropTypes__default['default'].any,
  refKey: PropTypes__default['default'].string
};
Trigger.defaultProps = {
  refKey: 'ref'
};

function _extends$2() { _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }

var _ref$2 = /*#__PURE__*/React__namespace.createElement("path", {
  fill: "currentColor",
  d: "M12.688 5.61a.5.5 0 01.69.718l-.066.062-5 4a.5.5 0 01-.542.054l-.082-.054-5-4a.5.5 0 01.55-.83l.074.05L8 9.359l4.688-3.75z"
});

function SvgChevronDownStroke(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$2);
}

var FieldContext = React__default['default'].createContext(undefined);
var useFieldContext = function useFieldContext() {
  var fieldContext = React.useContext(FieldContext);
  if (!fieldContext) {
    throw new Error('This component must be rendered within a `Field` component.');
  }
  return fieldContext;
};

var _excluded$9 = ["children", "inputRef", "start"],
    _excluded2$4 = ["type"];
var Autocomplete = React__default['default'].forwardRef(function (_ref, _ref3) {
  var children = _ref.children,
      controlledInputRef = _ref.inputRef,
      start = _ref.start,
      props = _objectWithoutProperties(_ref, _excluded$9);
  var _useDropdownContext = useDropdownContext(),
      popperReferenceElementRef = _useDropdownContext.popperReferenceElementRef,
      _useDropdownContext$d = _useDropdownContext.downshift,
      getToggleButtonProps = _useDropdownContext$d.getToggleButtonProps,
      getInputProps = _useDropdownContext$d.getInputProps,
      getRootProps = _useDropdownContext$d.getRootProps,
      isOpen = _useDropdownContext$d.isOpen,
      setDropdownType = _useDropdownContext.setDropdownType;
  var _useFieldContext = useFieldContext(),
      isLabelHovered = _useFieldContext.isLabelHovered;
  var inputRef = React.useRef();
  var triggerRef = React.useRef();
  var previousIsOpenRef = React.useRef(isOpen);
  var _useState = React.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isHovered = _useState2[0],
      setIsHovered = _useState2[1];
  var _useState3 = React.useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isFocused = _useState4[0],
      setIsFocused = _useState4[1];
  React.useEffect(function () {
    if (inputRef.current && isOpen !== previousIsOpenRef.current) {
      inputRef.current.focus();
    }
    previousIsOpenRef.current = isOpen;
  }, [inputRef, isOpen]);
  var _getToggleButtonProps = getToggleButtonProps(getRootProps(_objectSpread2({
    onKeyDown: function onKeyDown(e) {
      if (isOpen) {
        e.nativeEvent.preventDownshiftDefault = true;
      }
    },
    onMouseEnter: containerUtilities.composeEventHandlers(props.onMouseEnter, function () {
      return setIsHovered(true);
    }),
    onMouseLeave: containerUtilities.composeEventHandlers(props.onMouseLeave, function () {
      return setIsHovered(false);
    }),
    role: null
  }, props)));
      _getToggleButtonProps.type;
      var selectProps = _objectWithoutProperties(_getToggleButtonProps, _excluded2$4);
  var isContainerHovered = isLabelHovered && !isOpen;
  var isContainerFocused = isOpen || isFocused;
  React.useEffect(function () {
    setDropdownType('autocomplete');
  }, [setDropdownType]);
  return React__default['default'].createElement(reactPopper.Reference, null, function (_ref2) {
    var popperReference = _ref2.ref;
    return React__default['default'].createElement(StyledFauxInput, _extends$5({
      isHovered: isContainerHovered,
      isFocused: isContainerFocused,
      tabIndex: null
    }, selectProps, {
      ref: function ref(selectRef) {
        popperReference(selectRef);
        mergeRefs__default['default']([triggerRef, _ref3])(selectRef);
        popperReferenceElementRef.current = selectRef;
      }
    }), start && React__default['default'].createElement(StyledFauxInput.StartIcon, {
      isHovered: isHovered || isLabelHovered && !isOpen,
      isFocused: isContainerFocused,
      isDisabled: props.disabled
    }, start), !isOpen && React__default['default'].createElement(StyledSelect, null, children), React__default['default'].createElement(StyledInput, getInputProps({
      isHidden: !isOpen,
      disabled: props.disabled,
      onFocus: function onFocus() {
        setIsFocused(true);
      },
      onBlur: function onBlur() {
        setIsFocused(false);
      },
      onClick: function onClick(e) {
        if (isOpen) {
          e.nativeEvent.preventDownshiftDefault = true;
        }
      },
      role: 'combobox',
      ref: mergeRefs__default['default']([inputRef, controlledInputRef || null])
    })), !props.isBare && React__default['default'].createElement(StyledFauxInput.EndIcon, {
      isHovered: isHovered || isLabelHovered && !isOpen,
      isFocused: isContainerFocused,
      isDisabled: props.disabled,
      isRotated: isOpen
    }, React__default['default'].createElement(SvgChevronDownStroke, null)));
  });
});
Autocomplete.displayName = 'Autocomplete';
Autocomplete.propTypes = {
  isCompact: PropTypes__default['default'].bool,
  isBare: PropTypes__default['default'].bool,
  disabled: PropTypes__default['default'].bool,
  focusInset: PropTypes__default['default'].bool,
  validation: PropTypes__default['default'].oneOf(['success', 'warning', 'error'])
};

var _excluded$8 = ["isCompact", "isBare", "disabled", "focusInset", "placeholder", "validation", "inputRef", "start", "end"];
var Combobox = React__default['default'].forwardRef(function (_ref, ref) {
  var isCompact = _ref.isCompact,
      isBare = _ref.isBare,
      disabled = _ref.disabled,
      focusInset = _ref.focusInset,
      placeholder = _ref.placeholder,
      validation = _ref.validation,
      _ref$inputRef = _ref.inputRef,
      inputRefProp = _ref$inputRef === void 0 ? null : _ref$inputRef,
      start = _ref.start,
      end = _ref.end,
      props = _objectWithoutProperties(_ref, _excluded$8);
  var _useDropdownContext = useDropdownContext(),
      popperReferenceElementRef = _useDropdownContext.popperReferenceElementRef,
      _useDropdownContext$d = _useDropdownContext.downshift,
      getToggleButtonProps = _useDropdownContext$d.getToggleButtonProps,
      getInputProps = _useDropdownContext$d.getInputProps,
      getRootProps = _useDropdownContext$d.getRootProps,
      isOpen = _useDropdownContext$d.isOpen,
      setDropdownType = _useDropdownContext.setDropdownType;
  var wrapperRef = React.useRef();
  var inputRef = React.useRef();
  var isOpenRef = React.useRef(isOpen);
  var wrapperProps = getToggleButtonProps(getRootProps(_objectSpread2({
    role: null,
    type: null,
    onClick: function onClick(event) {
      event.nativeEvent.preventDownshiftDefault = true;
    }
  }, props)));
  var inputProps = getInputProps({
    isCompact: isCompact,
    isBare: isBare,
    disabled: disabled,
    focusInset: focusInset,
    placeholder: placeholder,
    validation: validation,
    start: start,
    end: end,
    role: 'combobox',
    onKeyDown: function onKeyDown(event) {
      if (event.keyCode === containerUtilities.KEY_CODES.SPACE || !isOpen && [containerUtilities.KEY_CODES.DOWN, containerUtilities.KEY_CODES.UP].includes(event.keyCode)) {
        event.nativeEvent.preventDownshiftDefault = true;
      }
    },
    onClick: function onClick(event) {
      event.nativeEvent.preventDownshiftDefault = true;
    }
  });
  React.useEffect(function () {
    if (inputRef.current && isOpen !== isOpenRef.current) {
      inputRef.current.focus();
    }
    isOpenRef.current = isOpen;
  }, [inputRef, isOpen]);
  React.useEffect(function () {
    setDropdownType('combobox');
  }, [setDropdownType]);
  return React__default['default'].createElement(reactPopper.Reference, null, function (_ref2) {
    var popperReference = _ref2.ref;
    var wrapperRefProp = function wrapperRefProp(element) {
      popperReference(element);
      mergeRefs__default['default']([wrapperRef, ref])(element);
      popperReferenceElementRef.current = element;
    };
    return React__default['default'].createElement(reactForms.MediaInput, _extends$5({}, inputProps, {
      wrapperProps: wrapperProps,
      wrapperRef: wrapperRefProp,
      ref: mergeRefs__default['default']([inputRef, inputRefProp])
    }));
  });
});
Combobox.displayName = 'Combobox';
Combobox.propTypes = {
  isCompact: PropTypes__default['default'].bool,
  isBare: PropTypes__default['default'].bool,
  disabled: PropTypes__default['default'].bool,
  focusInset: PropTypes__default['default'].bool,
  placeholder: PropTypes__default['default'].string,
  validation: PropTypes__default['default'].oneOf(['success', 'warning', 'error'])
};

var _excluded$7 = ["renderItem", "placeholder", "maxItems", "renderShowMore", "inputRef", "start"],
    _excluded2$3 = ["type"];
var Multiselect = React__default['default'].forwardRef(function (_ref, _ref3) {
  var renderItem = _ref.renderItem,
      placeholder = _ref.placeholder,
      maxItems = _ref.maxItems,
      renderShowMore = _ref.renderShowMore,
      _ref$inputRef = _ref.inputRef,
      externalInputRef = _ref$inputRef === void 0 ? null : _ref$inputRef,
      start = _ref.start,
      props = _objectWithoutProperties(_ref, _excluded$7);
  var _useDropdownContext = useDropdownContext(),
      popperReferenceElementRef = _useDropdownContext.popperReferenceElementRef,
      _useDropdownContext$s = _useDropdownContext.selectedItems,
      selectedItems = _useDropdownContext$s === void 0 ? [] : _useDropdownContext$s,
      containsMultiselectRef = _useDropdownContext.containsMultiselectRef,
      previousIndexRef = _useDropdownContext.previousIndexRef,
      _useDropdownContext$d = _useDropdownContext.downshift,
      getToggleButtonProps = _useDropdownContext$d.getToggleButtonProps,
      getRootProps = _useDropdownContext$d.getRootProps,
      getInputProps = _useDropdownContext$d.getInputProps,
      isOpen = _useDropdownContext$d.isOpen,
      closeMenu = _useDropdownContext$d.closeMenu,
      inputValue = _useDropdownContext$d.inputValue,
      setDownshiftState = _useDropdownContext$d.setState,
      itemToString = _useDropdownContext$d.itemToString,
      setDropdownType = _useDropdownContext.setDropdownType;
  var _useFieldContext = useFieldContext(),
      isLabelHovered = _useFieldContext.isLabelHovered;
  var inputRef = React.useRef();
  var triggerRef = React.useRef();
  var blurTimeoutRef = React.useRef();
  var previousIsOpenRef = React.useRef(undefined);
  var previousIsFocusedRef = React.useRef(undefined);
  var _useState = React.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isHovered = _useState2[0],
      setIsHovered = _useState2[1];
  var _useState3 = React.useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isFocused = _useState4[0],
      setIsFocused = _useState4[1];
  var _useState5 = React.useState(undefined),
      _useState6 = _slicedToArray(_useState5, 2),
      focusedItem = _useState6[0],
      setFocusedItem = _useState6[1];
  var _useSelection = containerSelection.useSelection({
    rtl: reactTheming.isRtl(props),
    focusedItem: focusedItem,
    selectedItem: undefined,
    onFocus: function onFocus(item) {
      setFocusedItem(item);
    }
  }),
      getContainerProps = _useSelection.getContainerProps,
      getItemProps = _useSelection.getItemProps;
  React.useEffect(function () {
    containsMultiselectRef.current = true;
    var tempRef = blurTimeoutRef;
    return function () {
      clearTimeout(tempRef.current);
    };
  }, []);
  React.useEffect(function () {
    if (inputRef.current) {
      if (isOpen && !previousIsOpenRef.current) {
        inputRef.current.focus();
      } else if (isFocused && !previousIsFocusedRef.current && focusedItem === undefined) {
        inputRef.current.focus();
      }
    }
    previousIsOpenRef.current = isOpen;
    previousIsFocusedRef.current = isFocused;
  }, [isOpen, inputRef, isFocused, focusedItem]);
  React.useEffect(function () {
    if (focusedItem !== undefined && isOpen) {
      closeMenu();
    }
  }, [focusedItem, isOpen, closeMenu]);
  var _getToggleButtonProps = getToggleButtonProps(getRootProps(_objectSpread2({
    tabIndex: props.disabled ? undefined : -1,
    onKeyDown: function onKeyDown(e) {
      if (isOpen) {
        e.nativeEvent.preventDownshiftDefault = true;
      } else if (!inputValue && e.keyCode === containerUtilities.KEY_CODES.HOME) {
        setFocusedItem(selectedItems[0]);
        e.preventDefault();
      }
    },
    onFocus: function onFocus() {
      setIsFocused(true);
    },
    onBlur: function onBlur(e) {
      var currentTarget = e.currentTarget;
      blurTimeoutRef.current = setTimeout(function () {
        if (!currentTarget.contains(document.activeElement)) {
          setIsFocused(false);
        }
      }, 0);
    },
    onMouseEnter: containerUtilities.composeEventHandlers(props.onMouseEnter, function () {
      return setIsHovered(true);
    }),
    onMouseLeave: containerUtilities.composeEventHandlers(props.onMouseLeave, function () {
      return setIsHovered(false);
    }),
    role: null
  }, props)));
      _getToggleButtonProps.type;
      var selectProps = _objectWithoutProperties(_getToggleButtonProps, _excluded2$3);
  var renderSelectableItem = React.useCallback(function (item, index) {
    var removeValue = function removeValue() {
      setDownshiftState({
        type: REMOVE_ITEM_STATE_TYPE,
        selectedItem: item
      });
      inputRef.current && inputRef.current.focus();
    };
    var renderedItem = renderItem({
      value: item,
      removeValue: removeValue
    });
    var focusRef = React__default['default'].createRef();
    var clonedChild = React__default['default'].cloneElement(renderedItem, _objectSpread2(_objectSpread2({}, getItemProps({
      item: item,
      focusRef: focusRef,
      onKeyDown: function onKeyDown(e) {
        if (e.keyCode === containerUtilities.KEY_CODES.DELETE || e.keyCode === containerUtilities.KEY_CODES.BACKSPACE) {
          e.preventDefault();
          removeValue();
        }
        if (e.keyCode === containerUtilities.KEY_CODES.END && !inputValue) {
          inputRef.current && inputRef.current.focus();
          e.preventDefault();
        }
        if (reactTheming.isRtl(props)) {
          if (e.keyCode === containerUtilities.KEY_CODES.RIGHT && index === 0) {
            e.preventDefault();
          }
          if (e.keyCode === containerUtilities.KEY_CODES.LEFT && index === selectedItems.length - 1) {
            e.preventDefault();
            inputRef.current && inputRef.current.focus();
          }
        } else {
          if (e.keyCode === containerUtilities.KEY_CODES.LEFT && index === 0) {
            e.preventDefault();
          }
          if (e.keyCode === containerUtilities.KEY_CODES.RIGHT && index === selectedItems.length - 1) {
            e.preventDefault();
            inputRef.current && inputRef.current.focus();
          }
        }
      },
      onClick: function onClick(e) {
        e.nativeEvent.preventDownshiftDefault = true;
      },
      tabIndex: -1
    })), {}, {
      size: props.isCompact ? 'medium' : 'large'
    }));
    var key = "".concat(itemToString(item), "-").concat(index);
    return React__default['default'].createElement(StyledMultiselectItemWrapper, {
      key: key
    }, clonedChild);
  }, [getItemProps, inputValue, renderItem, setDownshiftState, itemToString, selectedItems, props, inputRef]);
  var items = React.useMemo(function () {
    var itemValues = selectedItems || [];
    var output = [];
    for (var x = 0; x < itemValues.length; x++) {
      var item = itemValues[x];
      if (x < maxItems) {
        if (props.disabled) {
          var renderedItem = React__default['default'].cloneElement(renderItem({
            value: item,
            removeValue: function removeValue() {
              return undefined;
            }
          }), {
            size: props.isCompact ? 'medium' : 'large'
          });
          output.push( React__default['default'].createElement(StyledMultiselectItemWrapper, {
            key: x
          }, renderedItem));
        } else {
          output.push(renderSelectableItem(item, x));
        }
      } else if (!isFocused && !inputValue || props.disabled) {
        output.push( React__default['default'].createElement(StyledMultiselectItemWrapper, {
          key: "more-anchor"
        }, React__default['default'].createElement(StyledMultiselectMoreAnchor, {
          isCompact: props.isCompact,
          isDisabled: props.disabled
        }, renderShowMore ? renderShowMore(itemValues.length - x) : "+ ".concat(itemValues.length - x, " more"))));
        break;
      } else {
        output.push(renderSelectableItem(item, x));
      }
    }
    return output;
  }, [isFocused, props.disabled, renderSelectableItem, selectedItems, renderItem, inputValue, maxItems, renderShowMore, props.isCompact]);
  var isContainerHovered = isLabelHovered && !isOpen;
  var isContainerFocused = isOpen || isFocused;
  React.useEffect(function () {
    setDropdownType('multiselect');
  }, [setDropdownType]);
  return React__default['default'].createElement(reactPopper.Reference, null, function (_ref2) {
    var popperReference = _ref2.ref;
    return React__default['default'].createElement(StyledFauxInput, getContainerProps(_objectSpread2(_objectSpread2({}, selectProps), {}, {
      isHovered: isContainerHovered,
      isFocused: isContainerFocused,
      ref: function ref(selectRef) {
        popperReference(selectRef);
        mergeRefs__default['default']([triggerRef, popperReferenceElementRef, _ref3])(selectRef);
      }
    })), start && React__default['default'].createElement(StyledFauxInput.StartIcon, {
      isHovered: isHovered || isLabelHovered && !isOpen,
      isFocused: isContainerFocused,
      isDisabled: props.disabled
    }, start), React__default['default'].createElement(StyledMultiselectItemsContainer, {
      isBare: props.isBare,
      isCompact: props.isCompact
    }, items, React__default['default'].createElement(StyledMultiselectInput, getInputProps({
      disabled: props.disabled,
      onFocus: function onFocus() {
        setFocusedItem(undefined);
      },
      onClick: function onClick(e) {
        if (inputValue && inputValue.length > 0 && isOpen) {
          e.nativeEvent.preventDownshiftDefault = true;
        }
      },
      onKeyDown: function onKeyDown(e) {
        if (!inputValue) {
          if (reactTheming.isRtl(props) && e.keyCode === containerUtilities.KEY_CODES.RIGHT && selectedItems.length > 0 && previousIndexRef.current === undefined) {
            setFocusedItem(selectedItems[selectedItems.length - 1]);
          } else if (!reactTheming.isRtl(props) && e.keyCode === containerUtilities.KEY_CODES.LEFT && selectedItems.length > 0 && previousIndexRef.current === undefined) {
            setFocusedItem(selectedItems[selectedItems.length - 1]);
          } else if (e.keyCode === containerUtilities.KEY_CODES.BACKSPACE && selectedItems.length > 0) {
            setDownshiftState({
              type: REMOVE_ITEM_STATE_TYPE,
              selectedItem: selectedItems[selectedItems.length - 1]
            });
            e.nativeEvent.preventDownshiftDefault = true;
            e.preventDefault();
            e.stopPropagation();
          }
        }
      },
      isVisible: isFocused || inputValue || selectedItems.length === 0,
      isCompact: props.isCompact,
      role: 'combobox',
      ref: mergeRefs__default['default']([inputRef, externalInputRef]),
      placeholder: selectedItems.length === 0 ? placeholder : undefined
    }))), !props.isBare && React__default['default'].createElement(StyledFauxInput.EndIcon, {
      isHovered: isHovered || isLabelHovered && !isOpen,
      isFocused: isContainerFocused,
      isDisabled: props.disabled,
      isRotated: isOpen
    }, React__default['default'].createElement(SvgChevronDownStroke, null)));
  });
});
Multiselect.propTypes = {
  isCompact: PropTypes__default['default'].bool,
  isBare: PropTypes__default['default'].bool,
  disabled: PropTypes__default['default'].bool,
  focusInset: PropTypes__default['default'].bool,
  renderItem: PropTypes__default['default'].func.isRequired,
  maxItems: PropTypes__default['default'].number,
  validation: PropTypes__default['default'].oneOf(['success', 'warning', 'error'])
};
Multiselect.defaultProps = {
  maxItems: 4
};
var Multiselect$1 = reactTheming.withTheme(Multiselect);

var _excluded$6 = ["children", "start"],
    _excluded2$2 = ["type"];
var Select = React__default['default'].forwardRef(function (_ref, _ref3) {
  var children = _ref.children,
      start = _ref.start,
      props = _objectWithoutProperties(_ref, _excluded$6);
  var _useDropdownContext = useDropdownContext(),
      popperReferenceElementRef = _useDropdownContext.popperReferenceElementRef,
      itemSearchRegistry = _useDropdownContext.itemSearchRegistry,
      _useDropdownContext$d = _useDropdownContext.downshift,
      getToggleButtonProps = _useDropdownContext$d.getToggleButtonProps,
      getInputProps = _useDropdownContext$d.getInputProps,
      isOpen = _useDropdownContext$d.isOpen,
      highlightedIndex = _useDropdownContext$d.highlightedIndex,
      setHighlightedIndex = _useDropdownContext$d.setHighlightedIndex,
      selectItemAtIndex = _useDropdownContext$d.selectItemAtIndex,
      closeMenu = _useDropdownContext$d.closeMenu;
  var _useFieldContext = useFieldContext(),
      isLabelHovered = _useFieldContext.isLabelHovered;
  var _useState = React.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isHovered = _useState2[0],
      setIsHovered = _useState2[1];
  var _useState3 = React.useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isFocused = _useState4[0],
      setIsFocused = _useState4[1];
  var hiddenInputRef = React.useRef();
  var triggerRef = React.useRef();
  var previousIsOpenRef = React.useRef(undefined);
  var _useState5 = React.useState(''),
      _useState6 = _slicedToArray(_useState5, 2),
      searchString = _useState6[0],
      setSearchString = _useState6[1];
  var searchTimeoutRef = React.useRef();
  var currentSearchIndexRef = React.useRef(0);
  React.useEffect(function () {
    if (hiddenInputRef.current && isOpen && !previousIsOpenRef.current) {
      hiddenInputRef.current.focus();
    }
    if (triggerRef.current && !isOpen && previousIsOpenRef.current) {
      triggerRef.current.focus();
    }
    previousIsOpenRef.current = isOpen;
  }, [isOpen, triggerRef]);
  React.useEffect(function () {
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    searchTimeoutRef.current = window.setTimeout(function () {
      setSearchString('');
    }, 500);
    return function () {
      clearTimeout(searchTimeoutRef.current);
    };
  }, [searchString]);
  var searchItems = React.useCallback(function (searchValue, startIndex, endIndex) {
    for (var index = startIndex; index < endIndex; index++) {
      var itemTextValue = itemSearchRegistry.current[index];
      if (itemTextValue && itemTextValue.toUpperCase().indexOf(searchValue.toUpperCase()) === 0) {
        return index;
      }
    }
    return undefined;
  }, [itemSearchRegistry]);
  var onInputKeyDown = React.useCallback(function (e) {
    if (e.keyCode === containerUtilities.KEY_CODES.SPACE) {
      if (searchString) {
        e.preventDefault();
        e.stopPropagation();
      } else if (highlightedIndex !== null && highlightedIndex !== undefined) {
        e.preventDefault();
        e.stopPropagation();
        selectItemAtIndex(highlightedIndex);
        closeMenu();
      }
    }
    if ((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 65 || e.keyCode > 90) && e.keyCode !== containerUtilities.KEY_CODES.SPACE) {
      return;
    }
    var character = String.fromCharCode(e.which || e.keyCode);
    if (!character || character.length === 0) {
      return;
    }
    if (!searchString) {
      if (highlightedIndex === null || highlightedIndex === undefined) {
        currentSearchIndexRef.current = -1;
      } else {
        currentSearchIndexRef.current = highlightedIndex;
      }
    }
    var newSearchString = searchString + character;
    setSearchString(newSearchString);
    var matchingIndex = searchItems(newSearchString, currentSearchIndexRef.current + 1, itemSearchRegistry.current.length);
    if (matchingIndex === undefined) {
      matchingIndex = searchItems(newSearchString, 0, currentSearchIndexRef.current);
    }
    if (matchingIndex !== undefined) {
      setHighlightedIndex(matchingIndex);
    }
  }, [searchString, searchItems, itemSearchRegistry, highlightedIndex, selectItemAtIndex, closeMenu, setHighlightedIndex]);
  var _getToggleButtonProps = getToggleButtonProps(_objectSpread2({
    tabIndex: props.disabled ? undefined : 0,
    onMouseEnter: containerUtilities.composeEventHandlers(props.onMouseEnter, function () {
      return setIsHovered(true);
    }),
    onMouseLeave: containerUtilities.composeEventHandlers(props.onMouseLeave, function () {
      return setIsHovered(false);
    }),
    onFocus: containerUtilities.composeEventHandlers(props.onFocus, function () {
      return setIsFocused(true);
    }),
    onBlur: containerUtilities.composeEventHandlers(props.onBlur, function () {
      return setIsFocused(false);
    })
  }, props));
      _getToggleButtonProps.type;
      var selectProps = _objectWithoutProperties(_getToggleButtonProps, _excluded2$2);
  var isContainerHovered = isLabelHovered && !isOpen;
  var isContainerFocused = isFocused || isOpen;
  return React__default['default'].createElement(reactPopper.Reference, null, function (_ref2) {
    var popperReference = _ref2.ref;
    return React__default['default'].createElement(StyledFauxInput, _extends$5({
      isHovered: isContainerHovered,
      isFocused: isContainerFocused
    }, selectProps, {
      ref: function ref(selectRef) {
        popperReference(selectRef);
        mergeRefs__default['default']([triggerRef, _ref3, popperReferenceElementRef])(selectRef);
      }
    }), start && React__default['default'].createElement(StyledFauxInput.StartIcon, {
      isHovered: isHovered || isLabelHovered && !isOpen,
      isFocused: isContainerFocused,
      isDisabled: props.disabled
    }, start), React__default['default'].createElement(StyledSelect, null, children), React__default['default'].createElement(StyledInput, getInputProps({
      readOnly: true,
      isHidden: true,
      tabIndex: -1,
      ref: hiddenInputRef,
      value: '',
      onClick: function onClick(e) {
        if (isOpen) {
          e.nativeEvent.preventDownshiftDefault = true;
        }
      },
      onKeyDown: onInputKeyDown
    })), !props.isBare && React__default['default'].createElement(StyledFauxInput.EndIcon, {
      isHovered: isHovered || isLabelHovered && !isOpen,
      isFocused: isContainerFocused,
      isDisabled: props.disabled,
      isRotated: isOpen
    }, React__default['default'].createElement(SvgChevronDownStroke, null)));
  });
});
Select.displayName = 'Select';
Select.propTypes = {
  isCompact: PropTypes__default['default'].bool,
  isBare: PropTypes__default['default'].bool,
  disabled: PropTypes__default['default'].bool,
  focusInset: PropTypes__default['default'].bool,
  validation: PropTypes__default['default'].oneOf(['success', 'warning', 'error'])
};

var Field = function Field(props) {
  var _useDropdownContext = useDropdownContext(),
      getRootProps = _useDropdownContext.downshift.getRootProps;
  var _useState = React.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isLabelHovered = _useState2[0],
      setIsLabelHovered = _useState2[1];
  var _getRootProps = getRootProps(),
      ref = _getRootProps.ref;
  var value = React.useMemo(function () {
    return {
      isLabelHovered: isLabelHovered,
      setIsLabelHovered: setIsLabelHovered
    };
  }, [isLabelHovered, setIsLabelHovered]);
  return React__default['default'].createElement(FieldContext.Provider, {
    value: value
  }, React__default['default'].createElement(reactForms.Field, _extends$5({
    ref: ref
  }, props)));
};

var Hint = React__default['default'].forwardRef(function (props, ref) {
  return React__default['default'].createElement(reactForms.Hint, _extends$5({
    ref: ref
  }, props));
});
Hint.displayName = 'Hint';

var _excluded$5 = ["onMouseEnter", "onMouseLeave"];
var Label = React__default['default'].forwardRef(function (_ref, ref) {
  var onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      other = _objectWithoutProperties(_ref, _excluded$5);
  var _useDropdownContext = useDropdownContext(),
      getLabelProps = _useDropdownContext.downshift.getLabelProps;
  var _useFieldContext = useFieldContext(),
      setIsLabelHovered = _useFieldContext.setIsLabelHovered;
  var labelProps = getLabelProps(_objectSpread2({
    onMouseEnter: containerUtilities.composeEventHandlers(onMouseEnter, function () {
      setIsLabelHovered(true);
    }),
    onMouseLeave: containerUtilities.composeEventHandlers(onMouseLeave, function () {
      setIsLabelHovered(false);
    })
  }, other));
  return React__default['default'].createElement(reactForms.Label, _extends$5({
    ref: ref
  }, labelProps));
});
Label.displayName = 'Label';
Label.propTypes = {
  isRegular: PropTypes__default['default'].bool
};

var Message = React__default['default'].forwardRef(function (props, ref) {
  return React__default['default'].createElement(reactForms.Message, _extends$5({
    ref: ref
  }, props));
});
Message.displayName = 'Message';
Message.propTypes = {
  validation: PropTypes__default['default'].oneOf(['success', 'warning', 'error'])
};

var MenuContext = React__default['default'].createContext(undefined);
var useMenuContext = function useMenuContext() {
  var menuContext = React.useContext(MenuContext);
  if (!menuContext) {
    throw new Error('This component must be rendered within a `Menu` component.');
  }
  return menuContext;
};

var _excluded$4 = ["placement", "popperModifiers", "eventsEnabled", "isAnimated", "maxHeight", "style", "zIndex", "isCompact", "children"];
var Menu = function Menu(props) {
  var placement = props.placement,
      popperModifiers = props.popperModifiers,
      eventsEnabled = props.eventsEnabled,
      isAnimated = props.isAnimated,
      maxHeight = props.maxHeight,
      menuStyle = props.style,
      zIndex = props.zIndex,
      isCompact = props.isCompact,
      children = props.children,
      otherProps = _objectWithoutProperties(props, _excluded$4);
  var _useDropdownContext = useDropdownContext(),
      hasMenuRef = _useDropdownContext.hasMenuRef,
      itemIndexRef = _useDropdownContext.itemIndexRef,
      previousIndexRef = _useDropdownContext.previousIndexRef,
      nextItemsHashRef = _useDropdownContext.nextItemsHashRef,
      popperReferenceElementRef = _useDropdownContext.popperReferenceElementRef,
      itemSearchRegistry = _useDropdownContext.itemSearchRegistry,
      _useDropdownContext$d = _useDropdownContext.downshift,
      isOpen = _useDropdownContext$d.isOpen,
      getMenuProps = _useDropdownContext$d.getMenuProps;
  var scheduleUpdateRef = React.useRef(undefined);
  React.useEffect(function () {
    if (scheduleUpdateRef.current && isOpen) {
      scheduleUpdateRef.current();
    }
  });
  var _useState = React.useState(isOpen),
      _useState2 = _slicedToArray(_useState, 2),
      isVisible = _useState2[0],
      setVisible = _useState2[1];
  React.useEffect(function () {
    var timeout;
    if (isOpen) {
      setVisible(true);
    } else if (isAnimated) {
      timeout = setTimeout(function () {
        return setVisible(false);
      }, 200);
    } else {
      setVisible(false);
    }
    return function () {
      return clearTimeout(timeout);
    };
  }, [isOpen, isAnimated]);
  itemIndexRef.current = 0;
  nextItemsHashRef.current = {};
  previousIndexRef.current = undefined;
  itemSearchRegistry.current = [];
  var popperPlacement = reactTheming.isRtl(props) ? getRtlPopperPlacement(placement) : getPopperPlacement(placement);
  return (
    React__default['default'].createElement(MenuContext.Provider, {
      value: {
        itemIndexRef: itemIndexRef,
        isCompact: isCompact
      }
    }, React__default['default'].createElement(reactPopper.Popper, {
      placement: popperPlacement,
      modifiers: popperModifiers
      ,
      eventsEnabled: isOpen && eventsEnabled
    }, function (_ref) {
      var ref = _ref.ref,
          style = _ref.style,
          scheduleUpdate = _ref.scheduleUpdate,
          currentPlacement = _ref.placement;
      var computedStyle = menuStyle;
      scheduleUpdateRef.current = scheduleUpdate;
      if ((isOpen || isVisible) && popperReferenceElementRef.current && popperReferenceElementRef.current.getBoundingClientRect) {
        computedStyle = _objectSpread2({
          width: popperReferenceElementRef.current.getBoundingClientRect().width
        }, menuStyle);
      }
      var menuProps = getMenuProps(_objectSpread2({
        role: hasMenuRef.current ? 'menu' : 'listbox',
        placement: currentPlacement,
        isAnimated: isAnimated && (isOpen || isVisible)
      }, otherProps));
      return React__default['default'].createElement(StyledMenuWrapper, {
        ref: isOpen ? ref : undefined,
        hasArrow: menuProps.hasArrow,
        placement: menuProps.placement,
        style: style,
        isHidden: !isOpen,
        isAnimated: menuProps.isAnimated,
        zIndex: zIndex
      }, React__default['default'].createElement(StyledMenu, _extends$5({
        isCompact: isCompact,
        maxHeight: maxHeight,
        style: computedStyle
      }, menuProps), (isOpen || isVisible) && children));
    }))
  );
};
Menu.propTypes = {
  popperModifiers: PropTypes__default['default'].any,
  eventsEnabled: PropTypes__default['default'].bool,
  zIndex: PropTypes__default['default'].number,
  style: PropTypes__default['default'].object,
  placement: PropTypes__default['default'].oneOf(['auto', 'top', 'top-start', 'top-end', 'end', 'end-top', 'end-bottom', 'bottom', 'bottom-start', 'bottom-end', 'start', 'start-top', 'start-bottom']),
  isAnimated: PropTypes__default['default'].bool,
  isCompact: PropTypes__default['default'].bool,
  hasArrow: PropTypes__default['default'].bool,
  maxHeight: PropTypes__default['default'].string
};
Menu.defaultProps = {
  placement: 'bottom-start',
  isAnimated: true,
  eventsEnabled: true,
  maxHeight: '400px',
  zIndex: 1000
};
var Menu$1 = reactTheming.withTheme(Menu);

var Separator = React__default['default'].forwardRef(function (props, ref) {
  return React__default['default'].createElement(StyledSeparator, _extends$5({
    ref: ref
  }, props));
});
Separator.displayName = 'Separator';

function _extends$1() { _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }

var _ref$1 = /*#__PURE__*/React__namespace.createElement("path", {
  stroke: "currentColor",
  strokeLinecap: "round",
  d: "M7.5 2.5v12m6-6h-12"
});

function SvgPlusStroke(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$1);
}

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _ref = /*#__PURE__*/React__namespace.createElement("path", {
  fill: "none",
  stroke: "currentColor",
  strokeLinecap: "round",
  strokeLinejoin: "round",
  d: "M1 9l4 4L15 3"
});

function SvgCheckLgStroke(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref);
}

var ItemContext = React__default['default'].createContext(undefined);
var useItemContext = function useItemContext() {
  var context = React.useContext(ItemContext);
  if (!context) {
    throw new Error('This component must be rendered within an `Item` component.');
  }
  return context;
};

var _excluded$3 = ["value", "disabled", "isDanger", "component", "children"];
var Item = React__default['default'].forwardRef(function (_ref, forwardRef) {
  var value = _ref.value,
      disabled = _ref.disabled,
      isDanger = _ref.isDanger,
      _ref$component = _ref.component,
      component = _ref$component === void 0 ? StyledItem : _ref$component,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, _excluded$3);
  var _useDropdownContext = useDropdownContext(),
      selectedItems = _useDropdownContext.selectedItems,
      hasMenuRef = _useDropdownContext.hasMenuRef,
      itemSearchRegistry = _useDropdownContext.itemSearchRegistry,
      _useDropdownContext$d = _useDropdownContext.downshift,
      isOpen = _useDropdownContext$d.isOpen,
      selectedItem = _useDropdownContext$d.selectedItem,
      highlightedIndex = _useDropdownContext$d.highlightedIndex,
      getItemProps = _useDropdownContext$d.getItemProps,
      setHighlightedIndex = _useDropdownContext$d.setHighlightedIndex,
      itemToString = _useDropdownContext$d.itemToString;
  var _useMenuContext = useMenuContext(),
      itemIndexRef = _useMenuContext.itemIndexRef,
      isCompact = _useMenuContext.isCompact;
  var itemRef = React.useRef();
  var Component = component;
  if ((value === undefined || value === null) && !disabled) {
    throw new Error('All Item components require a `value` prop');
  }
  var currentIndex = itemIndexRef.current;
  var isFocused = highlightedIndex === currentIndex;
  var isSelected;
  React.useEffect(function () {
    if (!disabled && itemRef.current) {
      var itemTextValue = itemRef.current.innerText;
      if (itemTextValue) {
        itemSearchRegistry.current[currentIndex] = itemTextValue;
      }
    }
  });
  if (value) {
    if (selectedItems) {
      isSelected = selectedItems.some(function (item) {
        return itemToString(item) === itemToString(value);
      });
    } else {
      isSelected = itemToString(selectedItem) === itemToString(value);
    }
  } else {
    isSelected = false;
  }
  React.useEffect(function () {
    if (isOpen && !disabled && !selectedItems && isSelected) {
      setHighlightedIndex(currentIndex);
    }
  }, [currentIndex, disabled, isOpen, isSelected, selectedItems, setHighlightedIndex]);
  var contextValue = React.useMemo(function () {
    return {
      isDisabled: disabled
    };
  }, [disabled]);
  var ref = mergeRefs__default['default']([itemRef, forwardRef]);
  if (disabled) {
    return React__default['default'].createElement(ItemContext.Provider, {
      value: contextValue
    }, React__default['default'].createElement(Component, _extends$5({
      ref: ref,
      disabled: disabled,
      isDanger: isDanger,
      isCompact: isCompact
    }, props), isSelected && React__default['default'].createElement(StyledItemIcon, {
      isCompact: isCompact,
      isVisible: isSelected,
      isDisabled: disabled
    }, React__default['default'].createElement(SvgCheckLgStroke, null)), children));
  }
  itemIndexRef.current++;
  return React__default['default'].createElement(ItemContext.Provider, {
    value: contextValue
  }, React__default['default'].createElement(Component, getItemProps(_objectSpread2(_objectSpread2({
    item: value,
    isFocused: isFocused,
    ref: ref,
    isCompact: isCompact,
    isDanger: isDanger
  }, hasMenuRef.current && {
    role: 'menuitem',
    'aria-selected': null
  }), props)), isSelected && React__default['default'].createElement(StyledItemIcon, {
    isCompact: isCompact,
    isVisible: isSelected
  }, React__default['default'].createElement(SvgCheckLgStroke, null)), children));
});
Item.displayName = 'Item';
Item.propTypes = {
  value: PropTypes__default['default'].any,
  disabled: PropTypes__default['default'].bool
};

var _excluded$2 = ["children", "disabled"];
var AddItemComponent = React__default['default'].forwardRef(function (_ref, ref) {
  var children = _ref.children,
      disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, _excluded$2);
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React__default['default'].createElement(StyledAddItem, _extends$5({
    ref: ref,
    disabled: disabled
  }, props), React__default['default'].createElement(StyledItemIcon, {
    isCompact: isCompact,
    isVisible: true,
    isDisabled: disabled
  }, React__default['default'].createElement(SvgPlusStroke, null)), children);
});
var AddItem = React__default['default'].forwardRef(function (props, ref) {
  return React__default['default'].createElement(Item, _extends$5({
    component: AddItemComponent,
    ref: ref
  }, props));
});
AddItem.displayName = 'AddItem';
AddItem.propTypes = {
  value: PropTypes__default['default'].any,
  disabled: PropTypes__default['default'].bool
};

var HeaderIcon = React__default['default'].forwardRef(function (props, ref) {
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React__default['default'].createElement(StyledHeaderIcon, _extends$5({
    ref: ref,
    isCompact: isCompact
  }, props));
});
HeaderIcon.displayName = 'HeaderIcon';

var HeaderItem = React__default['default'].forwardRef(function (props, ref) {
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React__default['default'].createElement(StyledHeaderItem, _extends$5({
    ref: ref,
    isCompact: isCompact
  }, props));
});
HeaderItem.displayName = 'HeaderItem';

var ItemMeta = React__default['default'].forwardRef(function (props, ref) {
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  var _useItemContext = useItemContext(),
      isDisabled = _useItemContext.isDisabled;
  return React__default['default'].createElement(StyledItemMeta, _extends$5({
    ref: ref,
    isCompact: isCompact,
    isDisabled: isDisabled
  }, props));
});
ItemMeta.displayName = 'ItemMeta';

var MediaBody = React__default['default'].forwardRef(function (props, ref) {
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React__default['default'].createElement(StyledMediaBody, _extends$5({
    ref: ref,
    isCompact: isCompact
  }, props));
});
MediaBody.displayName = 'MediaBody';

var MediaFigure = function MediaFigure(props) {
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React__default['default'].createElement(StyledMediaFigure, _extends$5({
    isCompact: isCompact
  }, props));
};

var MediaItem = React__default['default'].forwardRef(function (props, ref) {
  return React__default['default'].createElement(Item, _extends$5({
    component: StyledMediaItem,
    ref: ref
  }, props));
});
MediaItem.displayName = 'MediaItem';
MediaItem.propTypes = {
  value: PropTypes__default['default'].any,
  disabled: PropTypes__default['default'].bool
};

var _excluded$1 = ["children", "disabled"],
    _excluded2$1 = ["value", "disabled"];
var NextItemComponent = React__default['default'].forwardRef(function (_ref, ref) {
  var children = _ref.children,
      disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, _excluded$1);
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React__default['default'].createElement(StyledNextItem, _extends$5({
    ref: ref,
    disabled: disabled
  }, props), React__default['default'].createElement(StyledItemIcon, {
    isCompact: isCompact,
    isDisabled: disabled,
    isVisible: true
  }, React__default['default'].createElement(StyledNextIcon, {
    isDisabled: disabled
  })), children);
});
var NextItem = React__default['default'].forwardRef(function (_ref2, ref) {
  var value = _ref2.value,
      disabled = _ref2.disabled,
      props = _objectWithoutProperties(_ref2, _excluded2$1);
  var _useDropdownContext = useDropdownContext(),
      nextItemsHashRef = _useDropdownContext.nextItemsHashRef,
      itemToString = _useDropdownContext.downshift.itemToString;
  var _useMenuContext2 = useMenuContext(),
      itemIndexRef = _useMenuContext2.itemIndexRef;
  if (!disabled) {
    nextItemsHashRef.current[itemToString(value)] = itemIndexRef.current;
  }
  return React__default['default'].createElement(Item, _extends$5({
    component: NextItemComponent,
    "aria-expanded": true,
    disabled: disabled,
    value: value,
    ref: ref
  }, props));
});
NextItem.displayName = 'NextItem';
NextItem.propTypes = {
  value: PropTypes__default['default'].any,
  disabled: PropTypes__default['default'].bool
};

var _excluded = ["children", "disabled"],
    _excluded2 = ["value", "disabled"];
var PreviousItemComponent = React__default['default'].forwardRef(function (_ref, ref) {
  var children = _ref.children,
      disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, _excluded);
  var _useMenuContext = useMenuContext(),
      isCompact = _useMenuContext.isCompact;
  return React__default['default'].createElement(StyledPreviousItem, _extends$5({
    ref: ref,
    disabled: disabled
  }, props), React__default['default'].createElement(StyledItemIcon, {
    isCompact: isCompact,
    isDisabled: disabled,
    isVisible: true
  }, React__default['default'].createElement(StyledPreviousIcon, {
    isDisabled: disabled
  })), children);
});
var PreviousItem = React__default['default'].forwardRef(function (_ref2, ref) {
  var value = _ref2.value,
      disabled = _ref2.disabled,
      props = _objectWithoutProperties(_ref2, _excluded2);
  var _useDropdownContext = useDropdownContext(),
      previousIndexRef = _useDropdownContext.previousIndexRef;
  var _useMenuContext2 = useMenuContext(),
      itemIndexRef = _useMenuContext2.itemIndexRef;
  if (!disabled) {
    previousIndexRef.current = itemIndexRef.current;
  }
  return React__default['default'].createElement(Item, _extends$5({
    component: PreviousItemComponent,
    "aria-expanded": true,
    value: value,
    disabled: disabled
  }, props, {
    ref: ref
  }));
});
PreviousItem.displayName = 'PreviousItem';
PreviousItem.propTypes = {
  value: PropTypes__default['default'].any,
  disabled: PropTypes__default['default'].bool
};

Object.defineProperty(exports, 'resetIdCounter', {
  enumerable: true,
  get: function () {
    return Downshift.resetIdCounter;
  }
});
exports.AddItem = AddItem;
exports.Autocomplete = Autocomplete;
exports.Combobox = Combobox;
exports.Dropdown = Dropdown$1;
exports.Field = Field;
exports.HeaderIcon = HeaderIcon;
exports.HeaderItem = HeaderItem;
exports.Hint = Hint;
exports.Item = Item;
exports.ItemMeta = ItemMeta;
exports.Label = Label;
exports.MediaBody = MediaBody;
exports.MediaFigure = MediaFigure;
exports.MediaItem = MediaItem;
exports.Menu = Menu$1;
exports.Message = Message;
exports.Multiselect = Multiselect$1;
exports.NextItem = NextItem;
exports.PreviousItem = PreviousItem;
exports.Select = Select;
exports.Separator = Separator;
exports.Trigger = Trigger;
