/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
import { HTMLProps } from 'react';
export interface IUseAccordionProps {
    /** Prefixes IDs for the accordion trigger and panels  */
    idPrefix?: string;
    /** Sets the expanded sections in a controlled accordion */
    expandedSections?: number[];
    /** Sets the default expanded sections in a uncontrolled accordion */
    defaultExpandedSections?: number[];
    onChange?: (expanded: number) => any;
    /** Determines if multiple panels can be expanded at the same time in an uncontrolled accordion */
    expandable?: boolean;
    /** Determines if panels can be collapsed in an uncontrolled accordion */
    collapsible?: boolean;
}
interface IHeaderProps extends HTMLProps<any> {
    ariaLevel?: number | null;
    role?: any;
}
interface ITriggerProps extends HTMLProps<any> {
    index?: number;
    role?: any;
    tabIndex?: any;
}
interface IPanelProps extends HTMLProps<any> {
    index?: number;
    role?: any;
}
export interface IUseAccordionPropGetters {
    getHeaderProps: <T>(options?: T & IHeaderProps) => any;
    getTriggerProps: <T>(options?: T & ITriggerProps) => any;
    getPanelProps: <T>(options?: T & IPanelProps) => any;
}
export interface IUseAccordionReturnValue extends IUseAccordionPropGetters {
    expandedSections: number[];
    disabledSections: number[];
}
export declare function useAccordion({ idPrefix, expandedSections, onChange, expandable, collapsible, defaultExpandedSections }?: IUseAccordionProps): IUseAccordionReturnValue;
export {};
