/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
import React, { PropsWithChildren } from 'react';
import PropTypes from 'prop-types';
export interface IDatepickerRangeProps {
    /**
     * Applies locale-based formatting.
     * Accepts all valid `Intl` [locales](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).
     */
    locale?: string;
    /**
     * Sets the start date
     */
    startValue?: Date;
    /**
     * Sets the end date
     */
    endValue?: Date;
    /**
     * Disables dates before this value on the calendar
     */
    minValue?: Date;
    /**
     * Disables dates after this value on the calendar
     */
    maxValue?: Date;
    /**
     * Handles start and end date changes
     *
     * @param {Object} values The selected dates
     * @param {Date} [values.startValue] Optional start date
     * @param {Date} [values.endValue] Optional end date
     */
    onChange?: (values: {
        startValue?: Date;
        endValue?: Date;
    }) => void;
    /**
     * Adjusts the input element's date formatting
     *
     *  @param {Date} date The selected date
     *  @returns {string} a formatted date string
     */
    formatDate?: (date: Date) => string;
    /**
     * Overrides the default date parsing
     *
     * @param {string} inputValue A date string
     * @returns {Date} the parsed date
     */
    customParseDate?: (inputValue?: string) => Date;
    /**
     * Applies compact styling
     */
    isCompact?: boolean;
}
export declare const DatepickerRange: {
    (props: PropsWithChildren<IDatepickerRangeProps>): JSX.Element;
    Start: (props: React.PropsWithChildren<React.HTMLAttributes<HTMLInputElement>>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any> | null) | (new (props: any) => React.Component<any, any, any>)>;
    End: (props: React.PropsWithChildren<React.HTMLAttributes<HTMLInputElement>>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any> | null) | (new (props: any) => React.Component<any, any, any>)>;
    Calendar: React.FunctionComponent<React.HTMLAttributes<HTMLDivElement>>;
    propTypes: {
        locale: PropTypes.Requireable<string>;
        startValue: PropTypes.Requireable<Date>;
        endValue: PropTypes.Requireable<Date>;
        minValue: PropTypes.Requireable<Date>;
        maxValue: PropTypes.Requireable<Date>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        formatDate: PropTypes.Requireable<(...args: any[]) => any>;
        customParseDate: PropTypes.Requireable<(...args: any[]) => any>;
        isCompact: PropTypes.Requireable<boolean>;
    };
    defaultProps: {
        locale: string;
        isCompact: boolean;
    };
};
