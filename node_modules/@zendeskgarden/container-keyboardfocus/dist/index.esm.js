/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

import React, { useState, useRef, useEffect } from 'react';
import { composeEventHandlers } from '@zendeskgarden/container-utilities';
import PropTypes from 'prop-types';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

var _excluded = ["tabIndex", "onBlur", "onFocus", "onMouseDown", "onPointerDown", "onTouchStart"];
function useKeyboardFocus() {
  var _useState = useState(false),
      keyboardFocused = _useState[0],
      setKeyboardFocused = _useState[1];
  var focusableTimeoutIdRef = useRef();
  var isKeyboardFocusableRef = useRef(true);
  useEffect(function () {
    return function () {
      clearTimeout(focusableTimeoutIdRef.current);
    };
  }, []);
  var onKeyboardFocusPointerDown = function onKeyboardFocusPointerDown() {
    isKeyboardFocusableRef.current = false;
    var timeoutId = setTimeout(function () {
      isKeyboardFocusableRef.current = true;
    }, 0);
    focusableTimeoutIdRef.current = Number(timeoutId);
  };
  var onKeyboardFocus = function onKeyboardFocus() {
    if (isKeyboardFocusableRef.current) {
      setKeyboardFocused(true);
    }
  };
  var onKeyboardFocusBlur = function onKeyboardFocusBlur() {
    setKeyboardFocused(false);
  };
  var getFocusProps = function getFocusProps(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        _ref$tabIndex = _ref.tabIndex,
        tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex,
        onBlur = _ref.onBlur,
        onFocus = _ref.onFocus,
        onMouseDown = _ref.onMouseDown,
        onPointerDown = _ref.onPointerDown,
        onTouchStart = _ref.onTouchStart,
        props = _objectWithoutPropertiesLoose(_ref, _excluded);
    return _extends({
      tabIndex: tabIndex,
      onBlur: composeEventHandlers(onBlur, onKeyboardFocusBlur),
      onFocus: composeEventHandlers(onFocus, onKeyboardFocus),
      onMouseDown: composeEventHandlers(onMouseDown, onKeyboardFocusPointerDown),
      onPointerDown: composeEventHandlers(onPointerDown, onKeyboardFocusPointerDown),
      onTouchStart: composeEventHandlers(onTouchStart, onKeyboardFocusPointerDown),
      'data-garden-container-id': 'containers.keyboardfocus',
      'data-garden-container-version': '0.4.14'
    }, props);
  };
  return {
    getFocusProps: getFocusProps,
    keyboardFocused: keyboardFocused
  };
}

var KeyboardFocusContainer = function KeyboardFocusContainer(_ref) {
  var children = _ref.children,
      _ref$render = _ref.render,
      render = _ref$render === void 0 ? children : _ref$render;
  return React.createElement(React.Fragment, null, render(useKeyboardFocus()));
};
KeyboardFocusContainer.propTypes = {
  children: PropTypes.func,
  render: PropTypes.func
};

export { KeyboardFocusContainer, useKeyboardFocus };
