/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

import React, { useState } from 'react';
import PropTypes from 'prop-types';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

function composeEventHandlers() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  return function (event) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    return fns.some(function (fn) {
      fn && fn.apply(void 0, [event].concat(args));
      return event && event.defaultPrevented;
    });
  };
}

var _excluded$1 = ["rowIdx", "colIdx", "onClick", "onFocus", "onKeyDown"];
var GRID_KEYS = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Home', 'End'];
function useGrid(_ref) {
  var rtl = _ref.rtl,
      wrap = _ref.wrap,
      matrix = _ref.matrix,
      idPrefix = _ref.idPrefix,
      selection = _ref.selection,
      onChange = _ref.onChange,
      onSelect = _ref.onSelect,
      rowIndex = _ref.rowIndex,
      colIndex = _ref.colIndex,
      selectedRowIndex = _ref.selectedRowIndex,
      selectedColIndex = _ref.selectedColIndex,
      defaultRowIndex = _ref.defaultRowIndex,
      defaultColIndex = _ref.defaultColIndex,
      defaultSelectedRowIndex = _ref.defaultSelectedRowIndex,
      defaultSelectedColIndex = _ref.defaultSelectedColIndex;
  var rowCount = matrix.length;
  var columnCount = matrix[0].length;
  var lastRowLength = matrix[rowCount - 1].length;
  var _useState = useState(defaultRowIndex !== null && defaultRowIndex !== undefined ? defaultRowIndex : 0),
      uncontrolledRowIndex = _useState[0],
      setUncontrolledRowIndex = _useState[1];
  var _useState2 = useState(defaultColIndex !== null && defaultColIndex !== undefined ? defaultColIndex : 0),
      uncontrolledColIndex = _useState2[0],
      setUncontrolledColIndex = _useState2[1];
  var controlledFocus = rowIndex !== null && colIndex !== null && rowIndex !== undefined && colIndex !== undefined;
  var controlledSelect = selectedRowIndex !== null && selectedColIndex !== null && selectedRowIndex !== undefined && selectedColIndex !== undefined;
  var _useState3 = useState(defaultSelectedRowIndex !== null && defaultSelectedRowIndex !== undefined ? defaultSelectedRowIndex : -1),
      uncontrolledSelectedRowIndex = _useState3[0],
      setUncontrolledSelectedIndex = _useState3[1];
  var _useState4 = useState(defaultSelectedColIndex !== null && defaultSelectedColIndex !== undefined ? defaultSelectedColIndex : -1),
      uncontrolledSelectedColIndex = _useState4[0],
      setUncontrolledSelectedColIndex = _useState4[1];
  var isControlled = controlledFocus || controlledSelect;
  var setFocusedCell = function setFocusedCell(rowIdx, colIdx) {
    setUncontrolledRowIndex(rowIdx);
    setUncontrolledColIndex(colIdx);
  };
  var setSelectedCell = function setSelectedCell(rowIdx, colIdx) {
    setUncontrolledSelectedIndex(rowIdx);
    setUncontrolledSelectedColIndex(colIdx);
  };
  var setFocus = function setFocus(rowIdx, colIdx) {
    var id = idPrefix + "-" + rowIdx + "-" + colIdx;
    var element = document.getElementById(id);
    element && element.focus();
  };
  var onNavigate = function onNavigate(e) {
    if (GRID_KEYS.includes(e.key)) {
      e.preventDefault();
    }
    if (isControlled) {
      var onLastRow = rowIndex === rowCount - 1;
      var onLastCol = colIndex === columnCount - 1;
      var rightEnd = onLastRow && colIndex === lastRowLength - 1;
      var downEnd = rowIndex === rowCount - 2 && colIndex >= lastRowLength;
      var backward = function backward() {
        if (colIndex > 0) {
          onChange && onChange(rowIndex, colIndex - 1);
          setFocus(rowIndex, colIndex - 1);
        }
        if (wrap && colIndex === 0 && rowIndex > 0) {
          onChange && onChange(rowIndex - 1, columnCount - 1);
          setFocus(rowIndex - 1, columnCount - 1);
        }
      };
      var forward = function forward() {
        if (colIndex < columnCount - 1 && !rightEnd) {
          onChange && onChange(rowIndex, colIndex + 1);
          setFocus(rowIndex, colIndex + 1);
        }
        if (wrap && onLastCol && !onLastRow) {
          onChange && onChange(rowIndex + 1, 0);
          setFocus(rowIndex + 1, 0);
        }
      };
      switch (e.key) {
        case 'ArrowLeft':
          return rtl ? forward() : backward();
        case 'ArrowRight':
          return rtl ? backward() : forward();
        case 'ArrowUp':
          if (rowIndex === 0 && colIndex === 0) {
            break;
          }
          if (rowIndex > 0) {
            onChange && onChange(rowIndex - 1, colIndex);
            setFocus(rowIndex - 1, colIndex);
            break;
          }
          if (wrap) {
            if (colIndex <= lastRowLength) {
              setFocus(rowCount - 1, colIndex - 1);
              onChange && onChange(rowCount - 1, colIndex - 1);
            } else {
              setFocus(rowCount - 2, colIndex - 1);
              onChange && onChange(rowCount - 2, colIndex - 1);
            }
          }
          break;
        case 'ArrowDown':
          if (rowIndex < rowCount - 1 && !downEnd) {
            onChange && onChange(rowIndex + 1, colIndex);
            setFocus(rowIndex + 1, colIndex);
          }
          if (wrap) {
            if (colIndex < columnCount - 1 && onLastRow) {
              setFocus(0, colIndex + 1);
              onChange && onChange(0, colIndex + 1);
            }
            if (colIndex >= lastRowLength && rowCount - 1 === rowIndex + 1 && colIndex < columnCount - 1) {
              setFocus(0, colIndex + 1);
              onChange && onChange(0, colIndex + 1);
              break;
            }
          }
          break;
        case 'Home':
          if (e.ctrlKey) {
            onChange && onChange(0, 0);
            setFocus(0, 0);
          } else {
            onChange && onChange(rowIndex, 0);
            setFocus(rowIndex, 0);
          }
          break;
        case 'End':
          if (e.ctrlKey) {
            onChange && onChange(rowCount - 1, matrix[rowCount - 1].length - 1);
            setFocus(rowCount - 1, matrix[rowCount - 1].length - 1);
          } else {
            onChange && onChange(rowIndex, matrix[rowIndex].length - 1);
            setFocus(rowIndex, matrix[rowIndex].length - 1);
          }
          break;
      }
    } else {
      var _onLastRow = uncontrolledRowIndex === rowCount - 1;
      var _onLastCol = uncontrolledColIndex === columnCount - 1;
      var _rightEnd = _onLastRow && uncontrolledColIndex === lastRowLength - 1;
      var _downEnd = uncontrolledRowIndex === rowCount - 2 && uncontrolledColIndex >= lastRowLength;
      var _forward = function _forward() {
        if (uncontrolledColIndex < columnCount - 1 && !_rightEnd) {
          setUncontrolledColIndex(uncontrolledColIndex + 1);
          setFocus(uncontrolledRowIndex, uncontrolledColIndex + 1);
          onChange && onChange(uncontrolledRowIndex, uncontrolledColIndex + 1);
        }
        if (wrap && _onLastCol && !_onLastRow) {
          setUncontrolledRowIndex(uncontrolledRowIndex + 1);
          setUncontrolledColIndex(0);
          setFocus(uncontrolledRowIndex + 1, 0);
          onChange && onChange(uncontrolledRowIndex + 1, 0);
        }
      };
      var _backward = function _backward() {
        if (uncontrolledColIndex > 0) {
          setUncontrolledColIndex(uncontrolledColIndex - 1);
          setFocus(uncontrolledRowIndex, uncontrolledColIndex - 1);
          onChange && onChange(uncontrolledRowIndex, uncontrolledColIndex - 1);
        }
        if (wrap && uncontrolledColIndex === 0 && uncontrolledRowIndex > 0) {
          setUncontrolledRowIndex(uncontrolledRowIndex - 1);
          setUncontrolledColIndex(columnCount - 1);
          setFocus(uncontrolledRowIndex - 1, columnCount - 1);
          onChange && onChange(uncontrolledRowIndex - 1, columnCount - 1);
        }
      };
      switch (e.key) {
        case 'ArrowLeft':
          return rtl ? _forward() : _backward();
        case 'ArrowRight':
          return rtl ? _backward() : _forward();
        case 'ArrowUp':
          if (uncontrolledRowIndex === 0 && uncontrolledColIndex === 0) {
            break;
          }
          if (uncontrolledRowIndex > 0) {
            setUncontrolledRowIndex(uncontrolledRowIndex - 1);
            setFocus(uncontrolledRowIndex - 1, uncontrolledColIndex);
            onChange && onChange(uncontrolledRowIndex - 1, uncontrolledColIndex);
            break;
          }
          if (wrap) {
            if (uncontrolledColIndex <= lastRowLength) {
              setUncontrolledRowIndex(rowCount - 1);
              setUncontrolledColIndex(uncontrolledColIndex - 1);
              setFocus(rowCount - 1, uncontrolledColIndex - 1);
              onChange && onChange(rowCount - 1, uncontrolledColIndex - 1);
            } else {
              setUncontrolledRowIndex(rowCount - 2);
              setUncontrolledColIndex(uncontrolledColIndex - 1);
              setFocus(rowCount - 2, uncontrolledColIndex - 1);
              onChange && onChange(rowCount - 2, uncontrolledColIndex - 1);
            }
          }
          break;
        case 'ArrowDown':
          if (uncontrolledRowIndex < rowCount - 1 && !_downEnd) {
            setUncontrolledRowIndex(uncontrolledRowIndex + 1);
            setFocus(uncontrolledRowIndex + 1, uncontrolledColIndex);
            onChange && onChange(uncontrolledRowIndex + 1, uncontrolledColIndex);
          }
          if (wrap) {
            if (uncontrolledColIndex < columnCount - 1 && _onLastRow) {
              setUncontrolledRowIndex(0);
              setUncontrolledColIndex(uncontrolledColIndex + 1);
              setFocus(0, uncontrolledColIndex + 1);
              onChange && onChange(0, uncontrolledColIndex + 1);
            }
            if (uncontrolledColIndex >= lastRowLength && rowCount - 1 === uncontrolledRowIndex + 1 && uncontrolledColIndex < columnCount - 1) {
              setUncontrolledRowIndex(0);
              setUncontrolledColIndex(uncontrolledColIndex + 1);
              setFocus(0, uncontrolledColIndex + 1);
              onChange && onChange(0, uncontrolledColIndex + 1);
              break;
            }
          }
          break;
        case 'Home':
          if (e.ctrlKey) {
            setFocusedCell(0, 0);
            setFocus(0, 0);
            onChange && onChange(0, 0);
          } else {
            setFocusedCell(uncontrolledRowIndex, 0);
            setFocus(uncontrolledRowIndex, 0);
            onChange && onChange(uncontrolledRowIndex, 0);
          }
          break;
        case 'End':
          if (e.ctrlKey) {
            setFocusedCell(rowCount - 1, lastRowLength - 1);
            setFocus(rowCount - 1, lastRowLength - 1);
            onChange && onChange(rowCount - 1, lastRowLength - 1);
          } else {
            setFocusedCell(uncontrolledRowIndex, matrix[uncontrolledRowIndex].length - 1);
            setFocus(uncontrolledRowIndex, matrix[uncontrolledRowIndex].length - 1);
            onChange && onChange(uncontrolledRowIndex, matrix[uncontrolledRowIndex].length - 1);
          }
          break;
      }
    }
    return undefined;
  };
  var getTabIndex = function getTabIndex(rowIdx, colIdx) {
    if (isControlled) {
      if (rowIndex === -1 && colIndex === -1 && rowIdx === 0 && colIdx === 0) {
        return 0;
      }
      return rowIndex === rowIdx && colIndex === colIdx ? 0 : -1;
    }
    if (rowIdx <= 0 && colIdx <= 0 && uncontrolledRowIndex <= 0 && uncontrolledColIndex <= 0) {
      return 0;
    }
    return uncontrolledRowIndex === rowIdx && uncontrolledColIndex === colIdx ? 0 : -1;
  };
  var getAriaSelected = function getAriaSelected(rowIdx, colIdx) {
    var ariaSelected;
    if (isControlled) {
      ariaSelected = selectedRowIndex === rowIdx && selectedColIndex === colIdx;
    } else {
      ariaSelected = uncontrolledSelectedRowIndex === rowIdx && uncontrolledSelectedColIndex === colIdx;
    }
    return ariaSelected;
  };
  var getGridCellProps = function getGridCellProps(_ref2) {
    var rowIdx = _ref2.rowIdx,
        colIdx = _ref2.colIdx,
        onClick = _ref2.onClick,
        onFocus = _ref2.onFocus,
        onKeyDown = _ref2.onKeyDown,
        other = _objectWithoutPropertiesLoose(_ref2, _excluded$1);
    return _extends({
      tabIndex: getTabIndex(rowIdx, colIdx),
      role: 'gridcell',
      'aria-selected': selection ? getAriaSelected(rowIdx, colIdx) : undefined,
      id: idPrefix + "-" + rowIdx + "-" + colIdx,
      onClick: composeEventHandlers(onClick, function () {
        if (isControlled === false) {
          setFocusedCell(rowIdx, colIdx);
          selection && setSelectedCell(rowIdx, colIdx);
        }
        onChange && onChange(rowIdx, colIdx);
        selection && onSelect && onSelect(rowIdx, colIdx);
      }),
      onFocus: composeEventHandlers(onFocus, function () {
        if (isControlled) {
          rowIndex === -1 && colIndex === -1 && onChange && onChange(0, 0);
        }
      }),
      onKeyDown: composeEventHandlers(onKeyDown, onNavigate)
    }, other);
  };
  return {
    getGridCellProps: getGridCellProps
  };
}

var _excluded = ["children", "render"];
var GridContainer = function GridContainer(props) {
  var children = props.children,
      _props$render = props.render,
      render = _props$render === void 0 ? children : _props$render,
      options = _objectWithoutPropertiesLoose(props, _excluded);
  return React.createElement(React.Fragment, null, render(useGrid(options)));
};
GridContainer.propTypes = {
  children: PropTypes.func,
  render: PropTypes.func,
  rtl: PropTypes.bool,
  wrap: PropTypes.bool,
  selection: PropTypes.bool,
  matrix: PropTypes.any,
  idPrefix: PropTypes.string,
  rowIndex: PropTypes.number,
  colIndex: PropTypes.number,
  selectedRowIndex: PropTypes.number,
  selectedColIndex: PropTypes.number,
  defaultRowIndex: PropTypes.number,
  defaultColIndex: PropTypes.number,
  defaultSelectedRowIndex: PropTypes.number,
  defaultSelectedColIndex: PropTypes.number
};

export { GridContainer, useGrid };
