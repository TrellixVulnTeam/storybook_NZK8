/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var PropTypes = require('prop-types');
var styled = require('styled-components');
var polished = require('polished');
var reactTheming = require('@zendeskgarden/react-theming');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

function _extends$1() {
  _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$1.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var _excluded$1 = ["children"];
var COMPONENT_ID$2 = 'tags.avatar';
var StyledAvatar = styled__default['default'](function (_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, _excluded$1);
  return React__default['default'].cloneElement(React.Children.only(children), props);
}).attrs({
  'data-garden-id': COMPONENT_ID$2,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledAvatar",
  componentId: "sc-3kdmgt-0"
})(["flex-shrink:0;font-size:0;", ";"], function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$2, props);
});
StyledAvatar.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$1 = 'tags.close';
var StyledClose = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$1,
  'data-garden-version': '8.47.1',
  'aria-label': 'Press delete to remove'
}).withConfig({
  displayName: "StyledClose",
  componentId: "sc-d6lrpn-0"
})(["display:flex;flex-shrink:0;align-items:center;justify-content:center;transition:opacity 0.25s ease-in-out;opacity:0.8;border:0;cursor:pointer;padding:0;font-size:0;&:hover{opacity:0.9;}&:focus{outline:none;}", ";"], function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$1, props);
});
StyledClose.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID = 'tags.tag_view';
var colorStyles = function colorStyles(props) {
  var backgroundColor;
  var boxShadowColor;
  var foregroundColor;
  var closeColor;
  if (props.hue) {
    var shade = props.hue === 'yellow' ? 400 : 600;
    backgroundColor = reactTheming.getColor(props.hue, shade, props.theme);
    boxShadowColor = reactTheming.getColor(props.hue, shade, props.theme, 0.35);
    if (props.hue === 'yellow' || props.hue === 'lemon') {
      foregroundColor = reactTheming.getColor('yellow', 800, props.theme);
    } else {
      foregroundColor = polished.readableColor(backgroundColor, props.theme.palette.grey[800], props.theme.palette.white);
    }
  } else {
    backgroundColor = reactTheming.getColor('neutralHue', 200, props.theme);
    boxShadowColor = reactTheming.getColor('neutralHue', 600, props.theme, 0.35);
    foregroundColor = reactTheming.getColor('neutralHue', 700, props.theme);
    closeColor = reactTheming.getColor('neutralHue', 600, props.theme);
  }
  return styled.css(["background-color:", ";color:", ";&:hover{color:", ";}&:focus{box-shadow:", ";}& ", "{color:", ";}"], backgroundColor, foregroundColor, foregroundColor, props.theme.shadows.sm(boxShadowColor), StyledClose, closeColor);
};
var sizeStyles = function sizeStyles(props) {
  var borderRadius;
  var padding;
  var height;
  var fontSize;
  var minWidth;
  var avatarSize;
  if (props.size === 'small') {
    borderRadius = props.theme.borderRadii.sm;
    padding = props.theme.space.base;
    height = props.theme.space.base * 4;
    fontSize = props.theme.fontSizes.xs;
    avatarSize = 0;
  } else if (props.size === 'large') {
    borderRadius = props.theme.borderRadii.md;
    padding = props.theme.space.base * 3;
    height = props.theme.space.base * 8;
    fontSize = props.theme.fontSizes.sm;
    avatarSize = props.theme.space.base * 6;
  } else {
    borderRadius = props.theme.borderRadii.sm;
    padding = props.theme.space.base * 2;
    height = props.theme.space.base * 5;
    fontSize = props.theme.fontSizes.sm;
    avatarSize = props.theme.space.base * 4;
  }
  var avatarBorderRadius = props.size === 'large' ? polished.math("".concat(borderRadius, " - 1")) : borderRadius;
  var avatarMargin = (height - avatarSize) / 2;
  var avatarTextMargin = props.isRound ? avatarMargin : avatarMargin * 2;
  if (props.isRound) {
    borderRadius = '50%';
    padding = 0;
    minWidth = height;
    avatarBorderRadius = '50%';
  } else if (props.isPill) {
    borderRadius = '100px';
    avatarBorderRadius = '50%';
    if (props.size === 'small') {
      padding = props.theme.space.base * 1.5;
      minWidth = props.theme.space.base * 6;
    } else if (props.size === 'large') {
      minWidth = props.theme.space.base * 12;
    } else {
      minWidth = props.theme.space.base * 7.5;
    }
  }
  return styled.css(["border-radius:", ";padding:0 ", "px;min-width:", ";height:", "px;line-height:", ";font-size:", ";& > *{width:100%;min-width:", ";}& ", "{margin-", ":-", "px;margin-", ":", "px;border-radius:", ";width:", "px;min-width:", "px;height:", "px;}& ", "{margin-", ":-", "px;border-radius:", ";width:", "px;height:", "px;}"], borderRadius, padding, minWidth ? "".concat(minWidth, "px") : "calc(".concat(padding * 2, "px + 1ch)"), height, reactTheming.getLineHeight(height, fontSize), fontSize, minWidth ? "".concat(minWidth - padding * 2, "px") : '1ch', StyledAvatar, props.theme.rtl ? 'right' : 'left', padding - avatarMargin, props.theme.rtl ? 'left' : 'right', avatarTextMargin, avatarBorderRadius, avatarSize, avatarSize, avatarSize, StyledClose, props.theme.rtl ? 'left' : 'right', padding, borderRadius, height, height);
};
var StyledTag = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledTag",
  componentId: "sc-1jvbe03-0"
})(["display:inline-flex;flex-wrap:nowrap;align-items:center;justify-content:", ";transition:box-shadow 0.1s ease-in-out;box-sizing:border-box;border:0;max-width:100%;overflow:hidden;vertical-align:middle;text-decoration:none;white-space:nowrap;font-weight:", ";direction:", ";", ";&:hover{cursor:default;text-decoration:none;}&:focus{outline:none;}&:link:hover,&:visited:hover{cursor:pointer;}&:any-link:hover{cursor:pointer;}&[data-garden-focus-visible]{text-decoration:none;}", ";& > *{overflow:hidden;text-align:center;text-overflow:ellipsis;white-space:nowrap;}& b{font-weight:", ";}& ", "{display:", ";}& ", "{display:", ";}", ";"], function (props) {
  return props.isRound && 'center';
}, function (props) {
  return !props.isRegular && props.theme.fontWeights.semibold;
}, function (props) {
  return props.theme.rtl ? 'rtl' : 'ltr';
}, function (props) {
  return sizeStyles(props);
}, function (props) {
  return colorStyles(props);
}, function (props) {
  return props.theme.fontWeights.semibold;
}, StyledAvatar, function (props) {
  return (props.isRound || props.size === 'small') && 'none';
}, StyledClose, function (props) {
  return props.isRound && 'none';
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID, props);
});
StyledTag.defaultProps = {
  size: 'medium',
  theme: reactTheming.DEFAULT_THEME
};

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _ref = /*#__PURE__*/React__namespace.createElement("path", {
  stroke: "currentColor",
  strokeLinecap: "round",
  d: "M3 9l6-6m0 6L3 3"
});

function SvgXStroke(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends({
    xmlns: "http://www.w3.org/2000/svg",
    width: 12,
    height: 12,
    viewBox: "0 0 12 12",
    focusable: "false",
    role: "presentation"
  }, props), _ref);
}

var Close = React__default['default'].forwardRef(function (props, ref) {
  return React__default['default'].createElement(StyledClose, _extends$1({
    ref: ref
  }, props), React__default['default'].createElement(SvgXStroke, null));
});
Close.displayName = 'Close';

var _excluded = ["size", "hue"];
var Tag = React__default['default'].forwardRef(function (_ref, ref) {
  var size = _ref.size,
      hue = _ref.hue,
      otherProps = _objectWithoutProperties(_ref, _excluded);
  return React__default['default'].createElement(StyledTag, _extends$1({
    ref: ref,
    size: size,
    hue: hue
  }, otherProps));
});
Tag.displayName = 'Tag';
Tag.propTypes = {
  size: PropTypes__default['default'].oneOf(['small', 'medium', 'large']),
  hue: PropTypes__default['default'].string,
  isPill: PropTypes__default['default'].bool,
  isRound: PropTypes__default['default'].bool,
  isRegular: PropTypes__default['default'].bool
};
Tag.defaultProps = {
  size: 'medium'
};
Tag.Avatar = StyledAvatar;
Tag.Close = Close;

exports.Tag = Tag;
