/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var ReactDOM = require('react-dom');
var styled = require('styled-components');
var PropTypes = require('prop-types');
var reactTheming = require('@zendeskgarden/react-theming');
var containerModal = require('@zendeskgarden/container-modal');
var containerFocusvisible = require('@zendeskgarden/container-focusvisible');
var mergeRefs = require('react-merge-refs');
var reactPopper = require('react-popper');
var reactTransitionGroup = require('react-transition-group');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var mergeRefs__default = /*#__PURE__*/_interopDefaultLegacy(mergeRefs);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends$2() {
  _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$2.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function isDocument(element) {
  return 'nodeType' in element && element.nodeType === document.DOCUMENT_NODE;
}

function isWindow(node) {
  if ('window' in node && node.window === node) return node;
  if (isDocument(node)) return node.defaultView || false;
  return false;
}

function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

function ownerWindow(node) {
  var doc = ownerDocument(node);
  return doc && doc.defaultView || window;
}

function getComputedStyle(node, psuedoElement) {
  return ownerWindow(node).getComputedStyle(node, psuedoElement);
}

var rUpper = /([A-Z])/g;
function hyphenate(string) {
  return string.replace(rUpper, '-$1').toLowerCase();
}

var msPattern = /^ms-/;
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
function isTransform(value) {
  return !!(value && supportedTransforms.test(value));
}

function style(node, property) {
  var css = '';
  var transforms = '';
  if (typeof property === 'string') {
    return node.style.getPropertyValue(hyphenateStyleName(property)) || getComputedStyle(node).getPropertyValue(hyphenateStyleName(property));
  }
  Object.keys(property).forEach(function (key) {
    var value = property[key];
    if (!value && value !== 0) {
      node.style.removeProperty(hyphenateStyleName(key));
    } else if (isTransform(key)) {
      transforms += key + "(" + value + ") ";
    } else {
      css += hyphenateStyleName(key) + ": " + value + ";";
    }
  });
  if (transforms) {
    css += "transform: " + transforms + ";";
  }
  node.style.cssText += ";" + css;
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var size;
function scrollbarSize(recalc) {
  if (!size && size !== 0 || recalc) {
    if (canUseDOM) {
      var scrollDiv = document.createElement('div');
      scrollDiv.style.position = 'absolute';
      scrollDiv.style.top = '-9999px';
      scrollDiv.style.width = '50px';
      scrollDiv.style.height = '50px';
      scrollDiv.style.overflow = 'scroll';
      document.body.appendChild(scrollDiv);
      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
  }
  return size;
}

var COMPONENT_ID$j = 'modals.backdrop';
var animationName$1 = styled.keyframes(["0%{opacity:0;}100%{opacity:1;}"]);
var StyledBackdrop = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$j,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledBackdrop",
  componentId: "sc-mzdjpo-0"
})(["display:flex;position:fixed;top:0;right:0;bottom:0;left:0;align-items:", ";justify-content:", ";z-index:400;background-color:", ";overflow:auto;-webkit-overflow-scrolling:touch;font-family:", ";direction:", ";animation:", ";", ";"], function (props) {
  return props.isCentered && 'center';
}, function (props) {
  return props.isCentered && 'center';
}, function (props) {
  return reactTheming.getColor('neutralHue', 800, props.theme, 0.85);
}, function (props) {
  return props.theme.fonts.system;
}, function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return props.isAnimated && styled.css(["", " 0.15s ease-in"], animationName$1);
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$j, props);
});
StyledBackdrop.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};
StyledBackdrop.propTypes = {
  isCentered: PropTypes__default['default'].bool,
  isAnimated: PropTypes__default['default'].bool
};

var COMPONENT_ID$i = 'modals.body';
var StyledBody = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$i,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledBody",
  componentId: "sc-14rzecg-0"
})(["display:block;margin:0;padding:", ";height:100%;overflow:auto;line-height:", ";color:", ";font-size:", ";", ";"], function (props) {
  return "".concat(props.theme.space.base * 5, "px ").concat(props.theme.space.base * 10, "px");
}, function (props) {
  return reactTheming.getLineHeight(props.theme.lineHeights.md, props.theme.fontSizes.md);
}, function (props) {
  return props.theme.colors.foreground;
}, function (props) {
  return props.theme.fontSizes.md;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$i, props);
});
StyledBody.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$h = 'modals.close';
var colorStyles = function colorStyles(props) {
  var backgroundColor = 'primaryHue';
  var foregroundColor = 'neutralHue';
  return styled.css(["background-color:transparent;color:", ";&:hover{background-color:", ";color:", ";}&[data-garden-focus-visible]{box-shadow:", ";}&:active{transition:background-color 0.1s ease-in-out,color 0.1s ease-in-out;background-color:", ";color:", ";}"], reactTheming.getColor(foregroundColor, 600, props.theme), reactTheming.getColor(backgroundColor, 600, props.theme, 0.08), reactTheming.getColor(foregroundColor, 700, props.theme), props.theme.shadows.md(reactTheming.getColor(backgroundColor, 600, props.theme, 0.35)), reactTheming.getColor(backgroundColor, 600, props.theme, 0.2), reactTheming.getColor(foregroundColor, 800, props.theme));
};
var StyledClose = styled__default['default'].button.attrs({
  'data-garden-id': COMPONENT_ID$h,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledClose",
  componentId: "sc-iseudj-0"
})(["display:block;position:absolute;top:", "px;", ":", ";transition:box-shadow 0.1s ease-in-out,background-color 0.25s ease-in-out,color 0.25s ease-in-out;border:none;border-radius:50%;background-color:transparent;cursor:pointer;padding:0;width:", "px;height:", "px;overflow:hidden;text-decoration:none;font-size:0;user-select:none;&::-moz-focus-inner{border:0;}&:focus{outline:none;}", " & > svg{vertical-align:middle;}", ";"], function (props) {
  return props.theme.space.base * 2.5;
}, function (props) {
  return props.theme.rtl ? 'left' : 'right';
}, function (props) {
  return "".concat(props.theme.space.base * 6.5, "px");
}, function (props) {
  return props.theme.space.base * 10;
}, function (props) {
  return props.theme.space.base * 10;
}, function (props) {
  return colorStyles(props);
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$h, props);
});
StyledClose.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$g = 'modals.footer';
var StyledFooter = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$g,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledFooter",
  componentId: "sc-d8pfdu-0"
})(["display:flex;flex-shrink:0;align-items:center;justify-content:flex-end;border-top:", ";padding:", ";", ";"], function (props) {
  return props.isLarge && "".concat(props.theme.borders.sm, " ").concat(reactTheming.getColor('neutralHue', 200, props.theme));
}, function (props) {
  return props.isLarge ? "".concat(props.theme.space.base * 8, "px ").concat(props.theme.space.base * 10, "px") : "".concat(props.theme.space.base * 5, "px ").concat(props.theme.space.base * 10, "px ").concat(props.theme.space.base * 8, "px");
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$g, props);
});
StyledFooter.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$f = 'modals.footer_item';
var StyledFooterItem = styled__default['default'].span.attrs({
  'data-garden-id': COMPONENT_ID$f,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledFooterItem",
  componentId: "sc-1mb76hl-0"
})(["display:flex;margin-", ":", "px;min-width:0;&:first-child{margin-", ":0;}", ";"], function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$f, props);
});
StyledFooterItem.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$e = 'modals.header';
var StyledHeader = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$e,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledHeader",
  componentId: "sc-1787r9v-0"
})(["display:block;position:", ";margin:0;border-bottom:", " ", ";padding:", ";line-height:", ";color:", ";font-size:", ";font-weight:", ";", ";"], function (props) {
  return props.isDanger && 'relative';
}, function (props) {
  return props.theme.borders.sm;
}, reactTheming.getColor('neutralHue', 200), function (props) {
  return "".concat(props.theme.space.base * 5, "px ").concat(props.theme.space.base * 10, "px");
}, function (props) {
  return reactTheming.getLineHeight(props.theme.lineHeights.md, props.theme.fontSizes.md);
}, function (props) {
  return props.isDanger ? reactTheming.getColor('dangerHue', 600, props.theme) : props.theme.colors.foreground;
}, function (props) {
  return props.theme.fontSizes.md;
}, function (props) {
  return props.theme.fontWeights.semibold;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$e, props);
});
StyledHeader.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

function _extends$1() { _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }

var _ref$1 = /*#__PURE__*/React__namespace.createElement("g", {
  fill: "none",
  stroke: "currentColor"
}, /*#__PURE__*/React__namespace.createElement("circle", {
  cx: 7.5,
  cy: 8.5,
  r: 7
}), /*#__PURE__*/React__namespace.createElement("path", {
  strokeLinecap: "round",
  d: "M7.5 4.5V9"
}));

var _ref2 = /*#__PURE__*/React__namespace.createElement("circle", {
  cx: 7.5,
  cy: 12,
  r: 1,
  fill: "currentColor"
});

function SvgAlertErrorStroke(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref$1, _ref2);
}

var StyledDangerIcon = styled__default['default'](SvgAlertErrorStroke).withConfig({
  displayName: "StyledDangerIcon",
  componentId: "sc-1kwbb39-0"
})(["position:absolute;top:", "px;", ":", ";"], function (props) {
  return props.theme.space.base * 5.5;
}, function (props) {
  return props.theme.rtl ? 'right' : 'left';
}, function (props) {
  return "".concat(props.theme.space.base * 4, "px");
});
StyledDangerIcon.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$d = 'modals.modal';
var animationName = styled.keyframes(["0%{transform:scale(0);opacity:0;}50%{transform:scale(1.05);}100%{opacity:1;}"]);
var boxShadow$1 = function boxShadow(props) {
  var theme = props.theme;
  var space = theme.space,
      shadows = theme.shadows;
  var offsetY = "".concat(space.base * 5, "px");
  var blurRadius = "".concat(space.base * 7, "px");
  var color = reactTheming.getColor('neutralHue', 800, theme, 0.35);
  return shadows.lg(offsetY, blurRadius, color);
};
var sizeStyles$1 = function sizeStyles(props) {
  var defaultWidth = 544;
  var largeWidth = 800;
  return styled.css(["width:", ";@media (max-width:", "){", ":", "px;}"], props.isLarge ? "".concat(largeWidth, "px") : "".concat(defaultWidth, "px"), props.isLarge ? "".concat(largeWidth - 1, "px") : props.theme.breakpoints.md, props.theme.rtl ? 'right' : 'left', props.theme.space.base * 6);
};
var StyledModal = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$d,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledModal",
  componentId: "sc-1pe1axu-0"
})(["display:flex;position:fixed;flex-direction:column;margin:", ";border-radius:", ";box-shadow:", ";background-color:", ";min-height:60px;max-height:calc(100vh - ", "px);animation:", ";animation-delay:0.01s;overflow:auto;direction:", ";", " &:focus{outline:none;}@media (max-height:399px){top:", "px;bottom:auto;margin-bottom:", "px;max-height:none;}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){right:", ";bottom:", ";transform:", ";}", ";"], function (props) {
  return props.isCentered ? '0' : "".concat(props.theme.space.base * 12, "px");
}, function (props) {
  return props.theme.borderRadii.md;
}, boxShadow$1, function (props) {
  return props.theme.colors.background;
}, function (props) {
  return props.theme.space.base * 24;
}, function (props) {
  return props.isAnimated && styled.css(["", " 0.3s ease-in-out"], animationName);
}, function (props) {
  return props.theme.rtl && 'rtl';
}, sizeStyles$1, function (props) {
  return props.theme.space.base * 6;
}, function (props) {
  return props.theme.space.base * 6;
}, function (props) {
  return props.isCentered && '50%';
}, function (props) {
  return props.isCentered && '50%';
}, function (props) {
  return props.isCentered && 'translate(50%, 50%)';
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$d, props);
});
StyledModal.propTypes = {
  isLarge: PropTypes__default['default'].bool,
  isAnimated: PropTypes__default['default'].bool
};
StyledModal.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$c = 'modals.tooltip_modal.backdrop';
var StyledTooltipModalBackdrop = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$c,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledTooltipModalBackdrop",
  componentId: "sc-1yaomgq-0"
})(["position:fixed;top:0;right:0;bottom:0;left:0;z-index:400;overflow:hidden;-webkit-overflow-scrolling:touch;font-family:", ";direction:", ";&.garden-tooltip-modal-transition-exit-active{pointer-events:none;}&.garden-tooltip-modal-transition-exit-active div{transition:opacity 200ms;opacity:0;}", ";"], function (props) {
  return props.theme.fonts.system;
}, function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$c, props);
});
StyledTooltipModalBackdrop.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

function getPopperPlacement(gardenPlacement) {
  var gardenToPopperMapping = {
    auto: 'auto',
    top: 'top',
    'top-start': 'top-start',
    'top-end': 'top-end',
    bottom: 'bottom',
    'bottom-start': 'bottom-start',
    'bottom-end': 'bottom-end',
    end: 'right',
    'end-top': 'right-start',
    'end-bottom': 'right-end',
    start: 'left',
    'start-top': 'left-start',
    'start-bottom': 'left-end'
  };
  return gardenToPopperMapping[gardenPlacement];
}
function getRtlPopperPlacement(gardenPlacement) {
  var rtlPlacementMappings = {
    left: 'right',
    'left-start': 'right-start',
    'left-end': 'right-end',
    'top-start': 'top-end',
    'top-end': 'top-start',
    right: 'left',
    'right-start': 'left-start',
    'right-end': 'left-end',
    'bottom-start': 'bottom-end',
    'bottom-end': 'bottom-start'
  };
  var popperPlacement = getPopperPlacement(gardenPlacement);
  return rtlPlacementMappings[popperPlacement] || popperPlacement;
}
function getArrowPosition(popperPlacement) {
  var arrowPositionMappings = {
    top: 'bottom',
    'top-start': 'bottom-left',
    'top-end': 'bottom-right',
    right: 'left',
    'right-start': 'left-top',
    'right-end': 'left-bottom',
    bottom: 'top',
    'bottom-start': 'top-left',
    'bottom-end': 'top-right',
    left: 'right',
    'left-start': 'right-top',
    'left-end': 'right-bottom'
  };
  return arrowPositionMappings[popperPlacement] || 'top';
}
function getMenuPosition(popperPlacement) {
  return popperPlacement ? popperPlacement.split('-')[0] : 'bottom';
}

var StyledTooltipWrapper = styled__default['default'].div.attrs(function (props) {
  return {
    className: props.isAnimated && 'is-animated'
  };
}).withConfig({
  displayName: "StyledTooltipWrapper",
  componentId: "sc-1xk05kf-0"
})(["", ";"], function (props) {
  return reactTheming.menuStyles(getMenuPosition(props.placement), {
    theme: props.theme,
    hidden: false,
    margin: '0',
    zIndex: props.zIndex,
    animationModifier: '.is-animated'
  });
});
StyledTooltipWrapper.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$b = 'modals.tooltip_modal';
var StyledTooltipModal = styled__default['default'].div.attrs(function (props) {
  return {
    'data-garden-id': COMPONENT_ID$b,
    'data-garden-version': '8.47.1',
    className: props.isAnimated && 'is-animated'
  };
}).withConfig({
  displayName: "StyledTooltipModal",
  componentId: "sc-42ubfr-0"
})(["padding:", "px;width:400px;", ";", ";"], function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  var computedArrowStyles = reactTheming.arrowStyles(getArrowPosition(props.placement), {
    size: "".concat(props.theme.space.base * 2, "px"),
    inset: '1px',
    animationModifier: '.is-animated'
  });
  if (props.isAnimated) {
    return props.hasArrow && props.transitionState === 'entered' && computedArrowStyles;
  }
  return props.hasArrow && computedArrowStyles;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$b, props);
});
StyledTooltipModal.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$a = 'modals.tooltip_modal.title';
var sizeStyles = function sizeStyles(props) {
  return "\n  /* stylelint-disable-next-line property-no-unknown */\n  padding-".concat(props.theme.rtl ? 'left' : 'right', ": ").concat(props.theme.space.base * 8, "px;\n  line-height: ").concat(reactTheming.getLineHeight(props.theme.lineHeights.md, props.theme.fontSizes.md), ";\n  font-size: ").concat(props.theme.fontSizes.md, ";\n");
};
var StyledTooltipModalTitle = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$a,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledTooltipModalTitle",
  componentId: "sc-11xjgjs-0"
})(["margin:0;color:", ";font-weight:", ";", ";", ";"], function (props) {
  return props.theme.colors.foreground;
}, function (props) {
  return props.theme.fontWeights.semibold;
}, function (props) {
  return sizeStyles(props);
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$a, props);
});
StyledTooltipModalTitle.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$9 = 'modals.tooltip_modal.body';
var StyledTooltipModalBody = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$9,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledTooltipModalBody",
  componentId: "sc-195dkzj-0"
})(["display:block;margin:0;padding-top:", "px;line-height:", ";color:", ";font-size:", ";", ";"], function (props) {
  return props.theme.space.base * 1.5;
}, function (props) {
  return reactTheming.getLineHeight(props.theme.lineHeights.md, props.theme.fontSizes.md);
}, function (props) {
  return props.theme.colors.foreground;
}, function (props) {
  return props.theme.fontSizes.md;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$9, props);
});
StyledTooltipModalBody.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$8 = 'modals.tooltip_modal.footer';
var StyledTooltipModalFooter = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$8,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledTooltipModalFooter",
  componentId: "sc-fm36a9-0"
})(["display:flex;flex-shrink:0;align-items:center;justify-content:flex-end;padding-top:", "px;", ";"], function (p) {
  return p.theme.space.base * 5;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$8, props);
});
StyledTooltipModalFooter.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$7 = 'modals.tooltip_modal.footer_item';
var StyledTooltipModalFooterItem = styled__default['default'](StyledFooterItem).attrs({
  'data-garden-id': COMPONENT_ID$7,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledTooltipModalFooterItem",
  componentId: "sc-1nahj6p-0"
})(["", ";"], function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$7, props);
});
StyledTooltipModalFooterItem.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$6 = 'modals.tooltip_modal.close';
var StyledTooltipModalClose = styled__default['default'](StyledClose).attrs({
  'data-garden-id': COMPONENT_ID$6,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledTooltipModalClose",
  componentId: "sc-1h2ke3q-0"
})(["top:", "px;", ":", ";width:", "px;height:", "px;", ";"], function (props) {
  return props.theme.space.base * 3.5;
}, function (props) {
  return props.theme.rtl ? 'left' : 'right';
}, function (props) {
  return "".concat(props.theme.space.base * 3, "px");
}, function (props) {
  return props.theme.space.base * 8;
}, function (props) {
  return props.theme.space.base * 8;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$6, props);
});
StyledTooltipModalClose.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$5 = 'modals.drawer_modal';
var DRAWER_WIDTH = 380;
var boxShadow = function boxShadow(props) {
  var theme = props.theme;
  var space = theme.space,
      shadows = theme.shadows;
  var offsetY = "".concat(space.base * 5, "px");
  var blurRadius = "".concat(space.base * 7, "px");
  var color = reactTheming.getColor('neutralHue', 800, theme, 0.35);
  return shadows.lg(offsetY, blurRadius, color);
};
var StyledDrawerModal = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$5,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledDrawerModal",
  componentId: "sc-i1sake-0"
})(["display:flex;position:fixed;top:0;", ":0;flex-direction:column;z-index:500;box-shadow:", ";background:", ";width:", "px;height:100%;overflow:auto;-webkit-overflow-scrolling:touch;font-family:", ";direction:", ";&.garden-drawer-transition-enter{transform:translateX(", "px);}&.garden-drawer-transition-enter-active{transform:translateX(0);transition:transform 0.25s ease-in-out;}&.garden-drawer-transition-exit-active{transform:translateX(", "px);transition:transform 0.25s ease-in-out;}&:focus{outline:none;}", ";"], function (props) {
  return props.theme.rtl ? 'left' : 'right';
}, boxShadow, function (props) {
  return props.theme.colors.background;
}, DRAWER_WIDTH, function (props) {
  return props.theme.fonts.system;
}, function (props) {
  return props.theme.rtl && 'rtl';
}, function (props) {
  return props.theme.rtl ? -DRAWER_WIDTH : DRAWER_WIDTH;
}, function (props) {
  return props.theme.rtl ? -DRAWER_WIDTH : DRAWER_WIDTH;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$5, props);
});
StyledDrawerModal.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$4 = 'modals.drawer_modal.header';
var StyledDrawerModalHeader = styled__default['default'](StyledHeader).attrs({
  'data-garden-id': COMPONENT_ID$4,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledDrawerModalHeader",
  componentId: "sc-1u04rqw-0"
})(["padding:", "px;", ";"], function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$4, props);
});
StyledDrawerModalHeader.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$3 = 'modals.drawer_modal.close';
var StyledDrawerModalClose = styled__default['default'](StyledClose).attrs({
  'data-garden-id': COMPONENT_ID$3,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledDrawerModalClose",
  componentId: "sc-hrnaom-0"
})(["top:", "px;width:", "px;height:", "px;", ";"], function (props) {
  return props.theme.space.base * 3.5;
}, function (props) {
  return props.theme.space.base * 8;
}, function (props) {
  return props.theme.space.base * 8;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$3, props);
});
StyledDrawerModalClose.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$2 = 'modals.drawer_modal.body';
var StyledDrawerModalBody = styled__default['default'](StyledBody).attrs({
  'data-garden-id': COMPONENT_ID$2,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledDrawerModalBody",
  componentId: "sc-yafe2y-0"
})(["padding:", "px;", ";"], function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$2, props);
});
StyledDrawerModalBody.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID$1 = 'modals.drawer_modal.footer';
var StyledDrawerModalFooter = styled__default['default'].div.attrs({
  'data-garden-id': COMPONENT_ID$1,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledDrawerModalFooter",
  componentId: "sc-17if4ka-0"
})(["display:flex;flex-shrink:0;justify-content:flex-end;border-top:", ";padding:", "px;", ";"], function (props) {
  return "".concat(props.theme.borders.sm, " ").concat(reactTheming.getColor('neutralHue', 200, props.theme));
}, function (props) {
  return props.theme.space.base * 5;
}, function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID$1, props);
});
StyledDrawerModalFooter.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var COMPONENT_ID = 'modals.drawer_modal.footer_item';
var StyledDrawerModalFooterItem = styled__default['default'](StyledFooterItem).attrs({
  'data-garden-id': COMPONENT_ID,
  'data-garden-version': '8.47.1'
}).withConfig({
  displayName: "StyledDrawerModalFooterItem",
  componentId: "sc-1vbl885-0"
})(["", ";"], function (props) {
  return reactTheming.retrieveComponentStyles(COMPONENT_ID, props);
});
StyledDrawerModalFooterItem.defaultProps = {
  theme: reactTheming.DEFAULT_THEME
};

var ModalsContext = React.createContext(undefined);
var useModalContext = function useModalContext() {
  var context = React.useContext(ModalsContext);
  if (context === undefined) {
    throw new Error('useModalContext must be used within a ModalsContext.Provider');
  }
  return context;
};

var _excluded$2 = ["backdropProps", "children", "onClose", "isLarge", "isCentered", "isAnimated", "id", "appendToNode", "focusOnMount", "restoreFocus"];
var isOverflowing = function isOverflowing(element) {
  var doc = ownerDocument(element);
  var win = ownerWindow(doc);
  var isBody = element && element.tagName.toLowerCase() === 'body';
  if (!isWindow(doc) && !isBody) {
    return element.scrollHeight > element.clientHeight;
  }
  var style = win.getComputedStyle(doc.body);
  var marginLeft = parseInt(style.getPropertyValue('margin-left'), 10);
  var marginRight = parseInt(style.getPropertyValue('margin-right'), 10);
  return marginLeft + doc.body.clientWidth + marginRight < win.innerWidth;
};
var Modal = React__default['default'].forwardRef(function (_ref, ref) {
  var backdropProps = _ref.backdropProps,
      children = _ref.children,
      onClose = _ref.onClose,
      isLarge = _ref.isLarge,
      isCentered = _ref.isCentered,
      isAnimated = _ref.isAnimated,
      id = _ref.id,
      appendToNode = _ref.appendToNode,
      focusOnMount = _ref.focusOnMount,
      restoreFocus = _ref.restoreFocus,
      modalProps = _objectWithoutProperties(_ref, _excluded$2);
  var theme = React.useContext(styled.ThemeContext);
  var modalRef = React.useRef(null);
  var environment = reactTheming.useDocument(theme);
  var _useModal = containerModal.useModal({
    id: id,
    onClose: onClose,
    modalRef: modalRef,
    focusOnMount: focusOnMount,
    restoreFocus: restoreFocus
  }),
      getBackdropProps = _useModal.getBackdropProps,
      getModalProps = _useModal.getModalProps,
      getTitleProps = _useModal.getTitleProps,
      getContentProps = _useModal.getContentProps,
      getCloseProps = _useModal.getCloseProps;
  containerFocusvisible.useFocusVisible({
    scope: modalRef,
    relativeDocument: environment
  });
  React.useEffect(function () {
    if (!environment) {
      return undefined;
    }
    var htmlElement = environment.querySelector('html');
    var bodyElement = environment.querySelector('body');
    var previousHtmlOverflow;
    var previousBodyPaddingRight;
    if (bodyElement) {
      if (isOverflowing(bodyElement)) {
        var scrollbarSize$1 = scrollbarSize();
        var bodyPaddingRight = parseInt(style(bodyElement, 'paddingRight') || '0', 10);
        previousBodyPaddingRight = bodyElement.style.paddingRight;
        bodyElement.style.paddingRight = "".concat(bodyPaddingRight + scrollbarSize$1, "px");
      }
      if (htmlElement) {
        previousHtmlOverflow = htmlElement.style.overflow;
        htmlElement.style.overflow = 'hidden';
      }
      return function () {
        if (htmlElement) {
          htmlElement.style.overflow = previousHtmlOverflow;
        }
        bodyElement.style.paddingRight = previousBodyPaddingRight;
      };
    }
    return undefined;
  }, [environment]);
  var rootNode = React.useMemo(function () {
    if (appendToNode) {
      return appendToNode;
    }
    if (environment) {
      return environment.body;
    }
    return undefined;
  }, [appendToNode, environment]);
  var value = React.useMemo(function () {
    return {
      isLarge: isLarge,
      getTitleProps: getTitleProps,
      getContentProps: getContentProps,
      getCloseProps: getCloseProps
    };
  }, [isLarge, getTitleProps, getContentProps, getCloseProps]);
  if (!rootNode) {
    return null;
  }
  return ReactDOM.createPortal( React__default['default'].createElement(ModalsContext.Provider, {
    value: value
  }, React__default['default'].createElement(StyledBackdrop, getBackdropProps(_objectSpread2({
    isCentered: isCentered,
    isAnimated: isAnimated
  }, backdropProps)), React__default['default'].createElement(StyledModal, getModalProps(_objectSpread2({
    isCentered: isCentered,
    isAnimated: isAnimated,
    isLarge: isLarge,
    ref: mergeRefs__default['default']([ref, modalRef])
  }, modalProps)), children))), rootNode);
});
Modal.displayName = 'Modal';
Modal.propTypes = {
  backdropProps: PropTypes__default['default'].object,
  isLarge: PropTypes__default['default'].bool,
  isAnimated: PropTypes__default['default'].bool,
  isCentered: PropTypes__default['default'].bool,
  focusOnMount: PropTypes__default['default'].bool,
  restoreFocus: PropTypes__default['default'].bool,
  onClose: PropTypes__default['default'].func,
  appendToNode: PropTypes__default['default'].any,
  id: PropTypes__default['default'].string
};
Modal.defaultProps = {
  isAnimated: true,
  isCentered: true
};

var Body$2 = React__default['default'].forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      getContentProps = _useModalContext.getContentProps;
  return React__default['default'].createElement(StyledBody, _extends$2({
    ref: ref
  }, getContentProps(props)));
});
Body$2.displayName = 'Body';

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _ref = /*#__PURE__*/React__namespace.createElement("path", {
  stroke: "currentColor",
  strokeLinecap: "round",
  d: "M3 13L13 3m0 10L3 3"
});

function SvgXStroke(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    focusable: "false",
    role: "presentation"
  }, props), _ref);
}

var Close$2 = React__default['default'].forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      getCloseProps = _useModalContext.getCloseProps;
  return React__default['default'].createElement(StyledClose, _extends$2({
    ref: ref
  }, getCloseProps(props)), React__default['default'].createElement(SvgXStroke, null));
});
Close$2.displayName = 'Close';

var Footer = React__default['default'].forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      isLarge = _useModalContext.isLarge;
  return React__default['default'].createElement(StyledFooter, _extends$2({
    ref: ref,
    isLarge: isLarge
  }, props));
});
Footer.displayName = 'Footer';

var FooterItem = React__default['default'].forwardRef(function (props, ref) {
  return React__default['default'].createElement(StyledFooterItem, _extends$2({
    ref: ref
  }, props));
});
FooterItem.displayName = 'FooterItem';

var Header$1 = React__default['default'].forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      getTitleProps = _useModalContext.getTitleProps;
  return React__default['default'].createElement(StyledHeader, _extends$2({
    ref: ref
  }, getTitleProps(props)), props.isDanger && React__default['default'].createElement(StyledDangerIcon, null), props.children);
});
Header$1.displayName = 'Header';

var TooltipModalContext = React.createContext(undefined);
var useTooltipModalContext = function useTooltipModalContext() {
  var context = React.useContext(TooltipModalContext);
  if (context === undefined) {
    throw new Error('Element must be used within a TooltipModal component.');
  }
  return context;
};

var Title = React__default['default'].forwardRef(function (props, ref) {
  var _useTooltipModalConte = useTooltipModalContext(),
      getTitleProps = _useTooltipModalConte.getTitleProps;
  return React__default['default'].createElement(StyledTooltipModalTitle, _extends$2({
    ref: ref
  }, getTitleProps(props)), props.children);
});
Title.displayName = 'TooltipModal.Title';

var Body$1 = React__default['default'].forwardRef(function (props, ref) {
  var _useTooltipModalConte = useTooltipModalContext(),
      getContentProps = _useTooltipModalConte.getContentProps;
  return React__default['default'].createElement(StyledTooltipModalBody, _extends$2({
    ref: ref
  }, getContentProps(props)));
});
Body$1.displayName = 'TooltipModal.Body';

var Close$1 = React__default['default'].forwardRef(function (props, ref) {
  var _useTooltipModalConte = useTooltipModalContext(),
      getCloseProps = _useTooltipModalConte.getCloseProps;
  return React__default['default'].createElement(StyledTooltipModalClose, _extends$2({
    ref: ref
  }, getCloseProps(props)), React__default['default'].createElement(SvgXStroke, null));
});
Close$1.displayName = 'TooltipModal.Close';

var _excluded$1 = ["referenceElement", "popperModifiers", "placement", "onClose", "hasArrow", "isAnimated", "zIndex", "style", "backdropProps", "focusOnMount", "restoreFocus", "id"];
var TooltipModal = React__default['default'].forwardRef(function (_ref, ref) {
  var referenceElement = _ref.referenceElement,
      popperModifiers = _ref.popperModifiers,
      placement = _ref.placement,
      onClose = _ref.onClose,
      hasArrow = _ref.hasArrow,
      isAnimated = _ref.isAnimated,
      zIndex = _ref.zIndex,
      style = _ref.style,
      backdropProps = _ref.backdropProps,
      focusOnMount = _ref.focusOnMount,
      restoreFocus = _ref.restoreFocus,
      id = _ref.id,
      props = _objectWithoutProperties(_ref, _excluded$1);
  var theme = React.useContext(styled.ThemeContext);
  var previousReferenceElementRef = React.useRef();
  var modalRef = React.useRef(null);
  var transitionRef = React.useRef(null);
  var _useState = React.useState(),
      _useState2 = _slicedToArray(_useState, 2),
      popperElement = _useState2[0],
      setPopperElement = _useState2[1];
  var _useModal = containerModal.useModal({
    id: id,
    onClose: onClose,
    modalRef: modalRef,
    focusOnMount: focusOnMount,
    restoreFocus: false
  }),
      getTitleProps = _useModal.getTitleProps,
      getCloseProps = _useModal.getCloseProps,
      getContentProps = _useModal.getContentProps,
      getBackdropProps = _useModal.getBackdropProps,
      getModalProps = _useModal.getModalProps;
  React.useEffect(function () {
    if (!referenceElement && previousReferenceElementRef.current && restoreFocus) {
      previousReferenceElementRef.current.focus();
    }
    previousReferenceElementRef.current = referenceElement;
  }, [referenceElement, restoreFocus]);
  var popperPlacement = React.useMemo(function () {
    return theme.rtl ? getRtlPopperPlacement(placement) : getPopperPlacement(placement);
  }, [placement, theme.rtl]);
  var _usePopper = reactPopper.usePopper(referenceElement, popperElement, {
    placement: popperPlacement,
    modifiers: [{
      name: 'offset',
      options: {
        offset: [0, theme.space.base * 3]
      }
    }].concat(_toConsumableArray(popperModifiers || []))
  }),
      styles = _usePopper.styles,
      attributes = _usePopper.attributes,
      state = _usePopper.state;
  var value = {
    getTitleProps: getTitleProps,
    getContentProps: getContentProps,
    getCloseProps: getCloseProps
  };
  var modalProps = getModalProps(_objectSpread2({
    ref: mergeRefs__default['default']([modalRef, ref]),
    placement: state ? state.placement : 'top',
    hasArrow: hasArrow,
    isAnimated: isAnimated,
    style: style
  }, props));
  return React__default['default'].createElement(reactTransitionGroup.CSSTransition, {
    unmountOnExit: true,
    timeout: isAnimated ? 200 : 0,
    in: Boolean(referenceElement),
    classNames: isAnimated ? 'garden-tooltip-modal-transition' : '',
    nodRef: transitionRef
  }, function (transitionState) {
    return React__default['default'].createElement(TooltipModalContext.Provider, {
      value: value
    }, React__default['default'].createElement(StyledTooltipModalBackdrop, getBackdropProps(_objectSpread2({
      ref: transitionRef
    }, backdropProps)), React__default['default'].createElement(StyledTooltipWrapper, _extends$2({
      ref: setPopperElement,
      style: styles.popper,
      placement: state ? state.placement : undefined,
      zIndex: zIndex,
      isAnimated: isAnimated
    }, attributes.popper), React__default['default'].createElement(StyledTooltipModal, _extends$2({
      transitionState: transitionState
    }, modalProps)))));
  });
});
TooltipModal.Title = Title;
TooltipModal.Body = Body$1;
TooltipModal.Close = Close$1;
TooltipModal.Footer = StyledTooltipModalFooter;
TooltipModal.FooterItem = StyledTooltipModalFooterItem;
TooltipModal.defaultProps = {
  placement: 'auto',
  isAnimated: true,
  hasArrow: true,
  focusOnMount: true,
  restoreFocus: true
};
TooltipModal.propTypes = {
  referenceElement: PropTypes__default['default'].any,
  popperModifiers: PropTypes__default['default'].any,
  placement: PropTypes__default['default'].any,
  isAnimated: PropTypes__default['default'].bool,
  hasArrow: PropTypes__default['default'].bool,
  zIndex: PropTypes__default['default'].number,
  onClose: PropTypes__default['default'].func,
  backdropProps: PropTypes__default['default'].any,
  focusOnMount: PropTypes__default['default'].bool,
  restoreFocus: PropTypes__default['default'].bool,
  id: PropTypes__default['default'].string
};

var Header = React__default['default'].forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      getTitleProps = _useModalContext.getTitleProps;
  return React__default['default'].createElement(StyledDrawerModalHeader, _extends$2({
    ref: ref
  }, getTitleProps(props)));
});
Header.displayName = 'DrawerModal.Header';

var Body = React__default['default'].forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      getContentProps = _useModalContext.getContentProps;
  return React__default['default'].createElement(StyledDrawerModalBody, _extends$2({
    ref: ref
  }, getContentProps(props)), props.children);
});
Body.displayName = 'DrawerModal.Body';

var Close = React__default['default'].forwardRef(function (props, ref) {
  var _useModalContext = useModalContext(),
      getCloseProps = _useModalContext.getCloseProps;
  return React__default['default'].createElement(StyledDrawerModalClose, _extends$2({
    ref: ref
  }, getCloseProps(props)), React__default['default'].createElement(SvgXStroke, null));
});
Close.displayName = 'DrawerModal.Close';

var _excluded = ["id", "isOpen", "onClose", "backdropProps", "appendToNode", "focusOnMount", "restoreFocus"];
var DrawerModal = React.forwardRef(function (_ref, ref) {
  var id = _ref.id,
      isOpen = _ref.isOpen,
      onClose = _ref.onClose,
      backdropProps = _ref.backdropProps,
      appendToNode = _ref.appendToNode,
      focusOnMount = _ref.focusOnMount,
      restoreFocus = _ref.restoreFocus,
      props = _objectWithoutProperties(_ref, _excluded);
  var modalRef = React.useRef(null);
  var transitionRef = React.useRef(null);
  var theme = React.useContext(styled.ThemeContext);
  var environment = reactTheming.useDocument(theme);
  containerFocusvisible.useFocusVisible({
    scope: modalRef,
    relativeDocument: modalRef.current
  });
  var _useModal = containerModal.useModal({
    id: id,
    modalRef: modalRef,
    focusOnMount: focusOnMount,
    restoreFocus: restoreFocus,
    environment: environment,
    onClose: onClose
  }),
      getTitleProps = _useModal.getTitleProps,
      getCloseProps = _useModal.getCloseProps,
      getContentProps = _useModal.getContentProps,
      getBackdropProps = _useModal.getBackdropProps,
      getModalProps = _useModal.getModalProps;
  React.useEffect(function () {
    if (!environment) {
      return undefined;
    }
    var htmlElement = environment.querySelector('html');
    var previousHtmlOverflow;
    if (htmlElement && isOpen) {
      previousHtmlOverflow = htmlElement.style.overflow;
      htmlElement.style.overflow = 'hidden';
    }
    return function () {
      if (htmlElement && isOpen) {
        htmlElement.style.overflow = previousHtmlOverflow;
      }
    };
  }, [environment, isOpen]);
  var rootNode = React.useMemo(function () {
    if (appendToNode) {
      return appendToNode;
    }
    if (environment) {
      return environment.body;
    }
    return undefined;
  }, [appendToNode, environment]);
  var value = React.useMemo(function () {
    return {
      getTitleProps: getTitleProps,
      getContentProps: getContentProps,
      getCloseProps: getCloseProps
    };
  }, [getTitleProps, getContentProps, getCloseProps]);
  if (!rootNode) {
    return null;
  }
  var modalProps = isOpen ? getModalProps(_objectSpread2({
    ref: mergeRefs__default['default']([ref, modalRef, transitionRef])
  }, props)) : _objectSpread2({
    ref: mergeRefs__default['default']([ref, modalRef, transitionRef])
  }, props);
  return ReactDOM__default['default'].createPortal( React__default['default'].createElement(ModalsContext.Provider, {
    value: value
  }, React__default['default'].createElement(reactTransitionGroup.CSSTransition, {
    in: isOpen,
    timeout: 250,
    unmountOnExit: true,
    classNames: "garden-drawer-transition",
    nodeRef: transitionRef
  }, React__default['default'].createElement(StyledBackdrop, getBackdropProps(_objectSpread2({
    isAnimated: true
  }, backdropProps)), React__default['default'].createElement(StyledDrawerModal, modalProps)))), rootNode);
});
DrawerModal.Header = Header;
DrawerModal.Body = Body;
DrawerModal.Close = Close;
DrawerModal.Footer = StyledDrawerModalFooter;
DrawerModal.FooterItem = StyledDrawerModalFooterItem;
DrawerModal.displayName = 'DrawerModal';
DrawerModal.propTypes = {
  backdropProps: PropTypes__default['default'].object,
  focusOnMount: PropTypes__default['default'].bool,
  restoreFocus: PropTypes__default['default'].bool,
  onClose: PropTypes__default['default'].func,
  appendToNode: PropTypes__default['default'].any,
  id: PropTypes__default['default'].string,
  isOpen: PropTypes__default['default'].bool
};

exports.Body = Body$2;
exports.Close = Close$2;
exports.DrawerModal = DrawerModal;
exports.Footer = Footer;
exports.FooterItem = FooterItem;
exports.Header = Header$1;
exports.Modal = Modal;
exports.TooltipModal = TooltipModal;
