/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
import { HTMLAttributes, ForwardRefExoticComponent, PropsWithoutRef, RefAttributes } from 'react';
import { Modifier } from 'react-popper';
import { GARDEN_PLACEMENT } from '../../utils/gardenPlacements';
import { StyledTooltipModalFooter, StyledTooltipModalFooterItem } from '../../styled';
import { Title } from './Title';
import { Body } from './Body';
import { Close } from './Close';
interface IStaticTooltipModalExport<T, P> extends ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>> {
    Title: typeof Title;
    Body: typeof Body;
    Close: typeof Close;
    Footer: typeof StyledTooltipModalFooter;
    FooterItem: typeof StyledTooltipModalFooterItem;
}
export interface ITooltipModalProps extends HTMLAttributes<HTMLDivElement> {
    /**
     * Positions the modal relative to the provided `HTMLElement`
     */
    referenceElement?: HTMLElement | null;
    /**
     * Modifies [Popper instance](https://popper.js.org/docs/v2/modifiers/) to customize positioning logic
     */
    popperModifiers?: Partial<Modifier<any, any>>[];
    /**
     * Adjusts the placement of the tooltip
     **/
    placement?: GARDEN_PLACEMENT;
    /**
     * Adds an arrow to the tooltop
     */
    hasArrow?: boolean;
    /**
     * Animates the tooltop
     */
    isAnimated?: boolean;
    /**
     * Sets the `z-index` of the tooltip
     */
    zIndex?: number;
    /**
     * Handles close actions. Can be triggered from the backdrop and from the close icon.
     *
     * @param {Object} event The DOM event that triggered the close action
     */
    onClose?: (event: KeyboardEvent | MouseEvent) => void;
    /**
     * Passes HTML attributes to the backdrop element
     */
    backdropProps?: any;
    /**
     * Directs keyboard focus to the modal on mount
     */
    focusOnMount?: boolean;
    /**
     * Returns keyboard focus to the element that triggered the modal
     */
    restoreFocus?: boolean;
    /**
     * Sets the root ID. A unique ID is created if none is provided.
     */
    id?: string;
}
/**
 * @extends HTMLAttributes<HTMLDivElement>
 */
export declare const TooltipModal: IStaticTooltipModalExport<HTMLDivElement, ITooltipModalProps>;
export {};
