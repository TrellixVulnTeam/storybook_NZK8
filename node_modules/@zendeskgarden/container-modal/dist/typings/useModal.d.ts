/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */
/// <reference types="react" />
export interface IUseModalProps {
    /** A callback when a close action has been completed */
    onClose?: (event: KeyboardEvent | MouseEvent) => void;
    /** A ref pointing to a DOM element which contains the modal content */
    modalRef: React.RefObject<HTMLElement>;
    /** An ID that is applied to modal elements */
    id?: string;
    /** Determines if the modal's focus jail container should focus on mount */
    focusOnMount?: boolean;
    /** Determines whether to return keyboard focus to the element that triggered the modal */
    restoreFocus?: boolean;
    /** The environment where the focus jail is rendered */
    environment?: Document;
}
export interface IUseModalReturnValue {
    getBackdropProps: <T>(options?: T) => T & React.HTMLProps<any>;
    getModalProps: <T>(options?: T) => T & React.HTMLProps<any>;
    getTitleProps: <T>(options?: T) => T & React.HTMLProps<any>;
    getContentProps: <T>(options?: T) => T & React.HTMLProps<any>;
    getCloseProps: <T>(options?: T) => T & React.HTMLProps<any>;
    closeModal?: (event: any) => void;
}
export declare function useModal({ onClose, modalRef, id: _id, focusOnMount, restoreFocus, environment }?: IUseModalProps): IUseModalReturnValue;
