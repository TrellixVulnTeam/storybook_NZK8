/**
 * Copyright Zendesk, Inc.
 *
 * Use of this source code is governed under the Apache License, Version 2.0
 * found at http://www.apache.org/licenses/LICENSE-2.0.
 */

import React, { useState, useRef } from 'react';
import { useUIDSeed } from 'react-uid';
import { composeEventHandlers, KEY_CODES } from '@zendeskgarden/container-utilities';
import { useFocusJail } from '@zendeskgarden/container-focusjail';
import PropTypes from 'prop-types';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

var _excluded$1 = ["onMouseUp"],
    _excluded2 = ["role", "onKeyDown", "onMouseDown"],
    _excluded3 = ["id"],
    _excluded4 = ["id"],
    _excluded5 = ["onClick"];
function useModal(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      onClose = _ref.onClose,
      modalRef = _ref.modalRef,
      _id = _ref.id,
      focusOnMount = _ref.focusOnMount,
      restoreFocus = _ref.restoreFocus,
      environment = _ref.environment;
  var seed = useUIDSeed();
  var _useState = useState(_id || seed("modal_" + '0.8.13')),
      idPrefix = _useState[0];
  var titleId = idPrefix + "--title";
  var contentId = idPrefix + "--content";
  var isModalMousedDownRef = useRef(false);
  var closeModal = function closeModal(event) {
    onClose && onClose(event);
  };
  var getBackdropProps = function getBackdropProps(_temp2) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2,
        onMouseUp = _ref2.onMouseUp,
        other = _objectWithoutPropertiesLoose(_ref2, _excluded$1);
    var containerId = 'containers.modal';
    return _extends({
      onMouseUp: composeEventHandlers(onMouseUp, function (event) {
        var target = event.target;
        var isModalContainer = containerId === target.getAttribute('data-garden-container-id');
        if (!isModalMousedDownRef.current && isModalContainer) {
          closeModal(event);
        }
        isModalMousedDownRef.current = false;
      }),
      'data-garden-container-id': containerId,
      'data-garden-container-version': '0.8.13'
    }, other);
  };
  var _getModalProps = function getModalProps(_temp3) {
    var _ref3 = _temp3 === void 0 ? {} : _temp3,
        _ref3$role = _ref3.role,
        role = _ref3$role === void 0 ? 'dialog' : _ref3$role,
        onKeyDown = _ref3.onKeyDown,
        onMouseDown = _ref3.onMouseDown,
        other = _objectWithoutPropertiesLoose(_ref3, _excluded2);
    return _extends({
      role: role,
      tabIndex: -1,
      'aria-modal': true,
      'aria-labelledby': titleId,
      'aria-describedby': contentId,
      onMouseDown: composeEventHandlers(onMouseDown, function () {
        isModalMousedDownRef.current = true;
      }),
      onKeyDown: composeEventHandlers(onKeyDown, function (event) {
        if (event.keyCode === KEY_CODES.ESCAPE) {
          closeModal(event);
        }
      })
    }, other);
  };
  var getTitleProps = function getTitleProps(_temp4) {
    var _ref4 = _temp4 === void 0 ? {} : _temp4,
        _ref4$id = _ref4.id,
        id = _ref4$id === void 0 ? titleId : _ref4$id,
        other = _objectWithoutPropertiesLoose(_ref4, _excluded3);
    return _extends({
      id: id
    }, other);
  };
  var getContentProps = function getContentProps(_temp5) {
    var _ref5 = _temp5 === void 0 ? {} : _temp5,
        _ref5$id = _ref5.id,
        id = _ref5$id === void 0 ? contentId : _ref5$id,
        other = _objectWithoutPropertiesLoose(_ref5, _excluded4);
    return _extends({
      id: id
    }, other);
  };
  var getCloseProps = function getCloseProps(_temp6) {
    var _ref6 = _temp6 === void 0 ? {} : _temp6,
        onClick = _ref6.onClick,
        other = _objectWithoutPropertiesLoose(_ref6, _excluded5);
    return _extends({
      'aria-label': 'Close modal',
      onClick: composeEventHandlers(onClick, function (event) {
        closeModal(event);
      })
    }, other);
  };
  var _useFocusJail = useFocusJail({
    containerRef: modalRef,
    focusOnMount: focusOnMount,
    restoreFocus: restoreFocus,
    environment: environment
  }),
      getContainerProps = _useFocusJail.getContainerProps;
  return {
    getBackdropProps: getBackdropProps,
    getModalProps: function getModalProps(props) {
      return getContainerProps(_getModalProps(props));
    },
    getTitleProps: getTitleProps,
    getContentProps: getContentProps,
    getCloseProps: getCloseProps,
    closeModal: closeModal
  };
}

var _excluded = ["children", "render"];
var ModalContainer = function ModalContainer(_ref) {
  var children = _ref.children,
      _ref$render = _ref.render,
      render = _ref$render === void 0 ? children : _ref$render,
      options = _objectWithoutPropertiesLoose(_ref, _excluded);
  return React.createElement(React.Fragment, null, render(useModal(options)));
};
ModalContainer.propTypes = {
  children: PropTypes.func,
  render: PropTypes.func,
  onClose: PropTypes.func,
  modalRef: PropTypes.any.isRequired,
  id: PropTypes.string,
  focusOnMount: PropTypes.bool,
  restoreFocus: PropTypes.bool,
  environment: PropTypes.any
};

export { ModalContainer, useModal };
